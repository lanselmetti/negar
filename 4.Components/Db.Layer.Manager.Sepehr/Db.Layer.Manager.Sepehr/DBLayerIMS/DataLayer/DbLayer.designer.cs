#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sepehr.DBLayerIMS.DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ImagingSystem")]
	public partial class DbLayer : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSchAddinColumns(SchAddinColumns instance);
    partial void UpdateSchAddinColumns(SchAddinColumns instance);
    partial void DeleteSchAddinColumns(SchAddinColumns instance);
    partial void InsertSchAddinDataItem(SchAddinDataItem instance);
    partial void UpdateSchAddinDataItem(SchAddinDataItem instance);
    partial void DeleteSchAddinDataItem(SchAddinDataItem instance);
    partial void InsertSchAddinDataItemsColCover(SchAddinDataItemsColCover instance);
    partial void UpdateSchAddinDataItemsColCover(SchAddinDataItemsColCover instance);
    partial void DeleteSchAddinDataItemsColCover(SchAddinDataItemsColCover instance);
    partial void InsertSchApplications(SchApplications instance);
    partial void UpdateSchApplications(SchApplications instance);
    partial void DeleteSchApplications(SchApplications instance);
    partial void InsertSchAppWeekPeriods(SchAppWeekPeriods instance);
    partial void UpdateSchAppWeekPeriods(SchAppWeekPeriods instance);
    partial void DeleteSchAppWeekPeriods(SchAppWeekPeriods instance);
    partial void InsertSchColumnsOrder(SchColumnsOrder instance);
    partial void UpdateSchColumnsOrder(SchColumnsOrder instance);
    partial void DeleteSchColumnsOrder(SchColumnsOrder instance);
    partial void InsertSchHolidays(SchHolidays instance);
    partial void UpdateSchHolidays(SchHolidays instance);
    partial void DeleteSchHolidays(SchHolidays instance);
    partial void InsertPerformer(Performer instance);
    partial void UpdatePerformer(Performer instance);
    partial void DeletePerformer(Performer instance);
    partial void InsertRefService(RefService instance);
    partial void UpdateRefService(RefService instance);
    partial void DeleteRefService(RefService instance);
    partial void InsertServicesList(ServicesList instance);
    partial void UpdateServicesList(ServicesList instance);
    partial void DeleteServicesList(ServicesList instance);
    partial void InsertServicesGroups(ServicesGroups instance);
    partial void UpdateServicesGroups(ServicesGroups instance);
    partial void DeleteServicesGroups(ServicesGroups instance);
    partial void InsertDefaultPerformers(DefaultPerformers instance);
    partial void UpdateDefaultPerformers(DefaultPerformers instance);
    partial void DeleteDefaultPerformers(DefaultPerformers instance);
    partial void InsertServicesCategories(ServicesCategories instance);
    partial void UpdateServicesCategories(ServicesCategories instance);
    partial void DeleteServicesCategories(ServicesCategories instance);
    partial void InsertAdditionalPriceColumn(AdditionalPriceColumn instance);
    partial void UpdateAdditionalPriceColumn(AdditionalPriceColumn instance);
    partial void DeleteAdditionalPriceColumn(AdditionalPriceColumn instance);
    partial void InsertServicesInGroups(ServicesInGroups instance);
    partial void UpdateServicesInGroups(ServicesInGroups instance);
    partial void DeleteServicesInGroups(ServicesInGroups instance);
    partial void InsertIns2Formula(Ins2Formula instance);
    partial void UpdateIns2Formula(Ins2Formula instance);
    partial void DeleteIns2Formula(Ins2Formula instance);
    partial void InsertListInsurance(ListInsurance instance);
    partial void UpdateListInsurance(ListInsurance instance);
    partial void DeleteListInsurance(ListInsurance instance);
    partial void InsertInsuranceService(InsuranceService instance);
    partial void UpdateInsuranceService(InsuranceService instance);
    partial void DeleteInsuranceService(InsuranceService instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertCostsAndDiscountsType(CostsAndDiscountsType instance);
    partial void UpdateCostsAndDiscountsType(CostsAndDiscountsType instance);
    partial void DeleteCostsAndDiscountsType(CostsAndDiscountsType instance);
    partial void InsertCash(Cash instance);
    partial void UpdateCash(Cash instance);
    partial void DeleteCash(Cash instance);
    partial void InsertCashiersCash(CashiersCash instance);
    partial void UpdateCashiersCash(CashiersCash instance);
    partial void DeleteCashiersCash(CashiersCash instance);
    partial void InsertDocText(DocText instance);
    partial void UpdateDocText(DocText instance);
    partial void DeleteDocText(DocText instance);
    partial void InsertDocType(DocType instance);
    partial void UpdateDocType(DocType instance);
    partial void DeleteDocType(DocType instance);
    partial void InsertRefCostsAndDiscount(RefCostsAndDiscount instance);
    partial void UpdateRefCostsAndDiscount(RefCostsAndDiscount instance);
    partial void DeleteRefCostsAndDiscount(RefCostsAndDiscount instance);
    partial void InsertBillsPrintLog(BillsPrintLog instance);
    partial void UpdateBillsPrintLog(BillsPrintLog instance);
    partial void DeleteBillsPrintLog(BillsPrintLog instance);
    partial void InsertRefTransaction(RefTransaction instance);
    partial void UpdateRefTransaction(RefTransaction instance);
    partial void DeleteRefTransaction(RefTransaction instance);
    partial void InsertRefTransAddinData(RefTransAddinData instance);
    partial void UpdateRefTransAddinData(RefTransAddinData instance);
    partial void DeleteRefTransAddinData(RefTransAddinData instance);
    partial void InsertDesignableReport(DesignableReport instance);
    partial void UpdateDesignableReport(DesignableReport instance);
    partial void DeleteDesignableReport(DesignableReport instance);
    partial void InsertDesignableReportsAddinCol(DesignableReportsAddinCol instance);
    partial void UpdateDesignableReportsAddinCol(DesignableReportsAddinCol instance);
    partial void DeleteDesignableReportsAddinCol(DesignableReportsAddinCol instance);
    partial void InsertCashLog(CashLog instance);
    partial void UpdateCashLog(CashLog instance);
    partial void DeleteCashLog(CashLog instance);
    partial void InsertCashInputOutput(CashInputOutput instance);
    partial void UpdateCashInputOutput(CashInputOutput instance);
    partial void DeleteCashInputOutput(CashInputOutput instance);
    partial void InsertSchAddinColsAppCover(SchAddinColsAppCover instance);
    partial void UpdateSchAddinColsAppCover(SchAddinColsAppCover instance);
    partial void DeleteSchAddinColsAppCover(SchAddinColsAppCover instance);
    partial void InsertSavedSearch(SavedSearch instance);
    partial void UpdateSavedSearch(SavedSearch instance);
    partial void DeleteSavedSearch(SavedSearch instance);
    partial void InsertDocTemplate(DocTemplate instance);
    partial void UpdateDocTemplate(DocTemplate instance);
    partial void DeleteDocTemplate(DocTemplate instance);
    partial void InsertRefAdditionalColumn(RefAdditionalColumn instance);
    partial void UpdateRefAdditionalColumn(RefAdditionalColumn instance);
    partial void DeleteRefAdditionalColumn(RefAdditionalColumn instance);
    partial void InsertPatAdditionalColumn(PatAdditionalColumn instance);
    partial void UpdatePatAdditionalColumn(PatAdditionalColumn instance);
    partial void DeletePatAdditionalColumn(PatAdditionalColumn instance);
    partial void InsertRefAdditionalDataItem(RefAdditionalDataItem instance);
    partial void UpdateRefAdditionalDataItem(RefAdditionalDataItem instance);
    partial void DeleteRefAdditionalDataItem(RefAdditionalDataItem instance);
    partial void InsertPatAdditionalDataItem(PatAdditionalDataItem instance);
    partial void UpdatePatAdditionalDataItem(PatAdditionalDataItem instance);
    partial void DeletePatAdditionalDataItem(PatAdditionalDataItem instance);
    partial void InsertPatAdditionalDataItemsColCover(PatAdditionalDataItemsColCover instance);
    partial void UpdatePatAdditionalDataItemsColCover(PatAdditionalDataItemsColCover instance);
    partial void DeletePatAdditionalDataItemsColCover(PatAdditionalDataItemsColCover instance);
    partial void InsertRefAdditionalDataItemsColCover(RefAdditionalDataItemsColCover instance);
    partial void UpdateRefAdditionalDataItemsColCover(RefAdditionalDataItemsColCover instance);
    partial void DeleteRefAdditionalDataItemsColCover(RefAdditionalDataItemsColCover instance);
    partial void InsertBillsUserAccess(BillsUserAccess instance);
    partial void UpdateBillsUserAccess(BillsUserAccess instance);
    partial void DeleteBillsUserAccess(BillsUserAccess instance);
    partial void InsertBillTemplate(BillTemplate instance);
    partial void UpdateBillTemplate(BillTemplate instance);
    partial void DeleteBillTemplate(BillTemplate instance);
    partial void InsertBillServCatExclude(BillServCatExclude instance);
    partial void UpdateBillServCatExclude(BillServCatExclude instance);
    partial void DeleteBillServCatExclude(BillServCatExclude instance);
    partial void InsertCostsAndDiscountsUsersExclude(CostsAndDiscountsUsersExclude instance);
    partial void UpdateCostsAndDiscountsUsersExclude(CostsAndDiscountsUsersExclude instance);
    partial void DeleteCostsAndDiscountsUsersExclude(CostsAndDiscountsUsersExclude instance);
    partial void InsertRefList(RefList instance);
    partial void UpdateRefList(RefList instance);
    partial void DeleteRefList(RefList instance);
    partial void InsertInsPhysicianExclude(InsPhysicianExclude instance);
    partial void UpdateInsPhysicianExclude(InsPhysicianExclude instance);
    partial void DeleteInsPhysicianExclude(InsPhysicianExclude instance);
    partial void InsertInsRefPhysSpecExclude(InsRefPhysSpecExclude instance);
    partial void UpdateInsRefPhysSpecExclude(InsRefPhysSpecExclude instance);
    partial void DeleteInsRefPhysSpecExclude(InsRefPhysSpecExclude instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertCashExcludedRef(CashExcludedRef instance);
    partial void UpdateCashExcludedRef(CashExcludedRef instance);
    partial void DeleteCashExcludedRef(CashExcludedRef instance);
    partial void InsertUsersSetting(UsersSetting instance);
    partial void UpdateUsersSetting(UsersSetting instance);
    partial void DeleteUsersSetting(UsersSetting instance);
    partial void InsertSettingsList(SettingsList instance);
    partial void UpdateSettingsList(SettingsList instance);
    partial void DeleteSettingsList(SettingsList instance);
    partial void InsertUsersDefaultDocType(UsersDefaultDocType instance);
    partial void UpdateUsersDefaultDocType(UsersDefaultDocType instance);
    partial void DeleteUsersDefaultDocType(UsersDefaultDocType instance);
    partial void InsertStudy(Study instance);
    partial void UpdateStudy(Study instance);
    partial void DeleteStudy(Study instance);
    partial void InsertServiceStudy(ServiceStudy instance);
    partial void UpdateServiceStudy(ServiceStudy instance);
    partial void DeleteServiceStudy(ServiceStudy instance);
    partial void InsertModality(Modality instance);
    partial void UpdateModality(Modality instance);
    partial void DeleteModality(Modality instance);
    partial void InsertServiceModality(ServiceModality instance);
    partial void UpdateServiceModality(ServiceModality instance);
    partial void DeleteServiceModality(ServiceModality instance);
    partial void InsertRefDocument(RefDocument instance);
    partial void UpdateRefDocument(RefDocument instance);
    partial void DeleteRefDocument(RefDocument instance);
    partial void InsertSchLogEvents(SchLogEvents instance);
    partial void UpdateSchLogEvents(SchLogEvents instance);
    partial void DeleteSchLogEvents(SchLogEvents instance);
    partial void InsertSchAppointments(SchAppointments instance);
    partial void UpdateSchAppointments(SchAppointments instance);
    partial void DeleteSchAppointments(SchAppointments instance);
    partial void InsertMsgCategories(MsgCategories instance);
    partial void UpdateMsgCategories(MsgCategories instance);
    partial void DeleteMsgCategories(MsgCategories instance);
    partial void InsertMsgLogCategories(MsgLogCategories instance);
    partial void UpdateMsgLogCategories(MsgLogCategories instance);
    partial void DeleteMsgLogCategories(MsgLogCategories instance);
    partial void InsertMsgLogEvents(MsgLogEvents instance);
    partial void UpdateMsgLogEvents(MsgLogEvents instance);
    partial void DeleteMsgLogEvents(MsgLogEvents instance);
    partial void InsertMsgPriorities(MsgPriorities instance);
    partial void UpdateMsgPriorities(MsgPriorities instance);
    partial void DeleteMsgPriorities(MsgPriorities instance);
    partial void InsertMsgStates(MsgStates instance);
    partial void UpdateMsgStates(MsgStates instance);
    partial void DeleteMsgStates(MsgStates instance);
    partial void InsertMsgList(MsgList instance);
    partial void UpdateMsgList(MsgList instance);
    partial void DeleteMsgList(MsgList instance);
    #endregion
		
		public DbLayer() : 
				base("Data Source=MOHAMMAD-PC\\AFTABSERVER02;Initial Catalog=ImagingSystem;Integrated Se" +
						"curity=True", mappingSource)
		{
			OnCreated();
		}
		
		public DbLayer(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbLayer(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbLayer(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbLayer(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SchAddinColumns> SchAddinColumns
		{
			get
			{
				return this.GetTable<SchAddinColumns>();
			}
		}
		
		public System.Data.Linq.Table<SchAddinDataItem> SchAddinDataItems
		{
			get
			{
				return this.GetTable<SchAddinDataItem>();
			}
		}
		
		public System.Data.Linq.Table<SchAddinDataItemsColCover> SchAddinDataItemsColCovers
		{
			get
			{
				return this.GetTable<SchAddinDataItemsColCover>();
			}
		}
		
		public System.Data.Linq.Table<SchApplications> SchApplications
		{
			get
			{
				return this.GetTable<SchApplications>();
			}
		}
		
		public System.Data.Linq.Table<SchAppWeekPeriods> SchAppWeekPeriods
		{
			get
			{
				return this.GetTable<SchAppWeekPeriods>();
			}
		}
		
		public System.Data.Linq.Table<SchColumnsOrder> SchColumnsOrders
		{
			get
			{
				return this.GetTable<SchColumnsOrder>();
			}
		}
		
		public System.Data.Linq.Table<SchHolidays> SchHolidays
		{
			get
			{
				return this.GetTable<SchHolidays>();
			}
		}
		
		public System.Data.Linq.Table<Performer> Performers
		{
			get
			{
				return this.GetTable<Performer>();
			}
		}
		
		public System.Data.Linq.Table<RefService> RefServices
		{
			get
			{
				return this.GetTable<RefService>();
			}
		}
		
		public System.Data.Linq.Table<ServicesList> ServicesLists
		{
			get
			{
				return this.GetTable<ServicesList>();
			}
		}
		
		public System.Data.Linq.Table<ServicesGroups> ServicesGroups
		{
			get
			{
				return this.GetTable<ServicesGroups>();
			}
		}
		
		public System.Data.Linq.Table<DefaultPerformers> DefaultPerformers
		{
			get
			{
				return this.GetTable<DefaultPerformers>();
			}
		}
		
		public System.Data.Linq.Table<ServicesCategories> ServicesCategories
		{
			get
			{
				return this.GetTable<ServicesCategories>();
			}
		}
		
		public System.Data.Linq.Table<AdditionalPriceColumn> AdditionalPriceColumns
		{
			get
			{
				return this.GetTable<AdditionalPriceColumn>();
			}
		}
		
		public System.Data.Linq.Table<ServicesInGroups> ServicesInGroups
		{
			get
			{
				return this.GetTable<ServicesInGroups>();
			}
		}
		
		public System.Data.Linq.Table<Ins2Formula> Ins2Formulas
		{
			get
			{
				return this.GetTable<Ins2Formula>();
			}
		}
		
		public System.Data.Linq.Table<ListInsurance> ListInsurances
		{
			get
			{
				return this.GetTable<ListInsurance>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceService> InsuranceServices
		{
			get
			{
				return this.GetTable<InsuranceService>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<CostsAndDiscountsType> CostsAndDiscountsTypes
		{
			get
			{
				return this.GetTable<CostsAndDiscountsType>();
			}
		}
		
		public System.Data.Linq.Table<Cash> Cashes
		{
			get
			{
				return this.GetTable<Cash>();
			}
		}
		
		public System.Data.Linq.Table<CashiersCash> CashiersCashes
		{
			get
			{
				return this.GetTable<CashiersCash>();
			}
		}
		
		public System.Data.Linq.Table<DocText> DocTexts
		{
			get
			{
				return this.GetTable<DocText>();
			}
		}
		
		public System.Data.Linq.Table<DocType> DocTypes
		{
			get
			{
				return this.GetTable<DocType>();
			}
		}
		
		public System.Data.Linq.Table<RefCostsAndDiscount> RefCostsAndDiscounts
		{
			get
			{
				return this.GetTable<RefCostsAndDiscount>();
			}
		}
		
		public System.Data.Linq.Table<BillsPrintLog> BillsPrintLogs
		{
			get
			{
				return this.GetTable<BillsPrintLog>();
			}
		}
		
		public System.Data.Linq.Table<RefTransaction> RefTransactions
		{
			get
			{
				return this.GetTable<RefTransaction>();
			}
		}
		
		public System.Data.Linq.Table<RefTransAddinData> RefTransAddinDatas
		{
			get
			{
				return this.GetTable<RefTransAddinData>();
			}
		}
		
		public System.Data.Linq.Table<DesignableReport> DesignableReports
		{
			get
			{
				return this.GetTable<DesignableReport>();
			}
		}
		
		public System.Data.Linq.Table<DesignableReportsAddinCol> DesignableReportsAddinCols
		{
			get
			{
				return this.GetTable<DesignableReportsAddinCol>();
			}
		}
		
		public System.Data.Linq.Table<CashLog> CashLogs
		{
			get
			{
				return this.GetTable<CashLog>();
			}
		}
		
		public System.Data.Linq.Table<CashInputOutput> CashInputOutputs
		{
			get
			{
				return this.GetTable<CashInputOutput>();
			}
		}
		
		public System.Data.Linq.Table<VW_SelectCashesReport> VW_SelectCashesReports
		{
			get
			{
				return this.GetTable<VW_SelectCashesReport>();
			}
		}
		
		public System.Data.Linq.Table<SchAddinColsAppCover> SchAddinColsAppCovers
		{
			get
			{
				return this.GetTable<SchAddinColsAppCover>();
			}
		}
		
		public System.Data.Linq.Table<SavedSearch> SavedSearches
		{
			get
			{
				return this.GetTable<SavedSearch>();
			}
		}
		
		public System.Data.Linq.Table<DocTemplate> DocTemplates
		{
			get
			{
				return this.GetTable<DocTemplate>();
			}
		}
		
		public System.Data.Linq.Table<RefAdditionalColumn> RefAdditionalColumns
		{
			get
			{
				return this.GetTable<RefAdditionalColumn>();
			}
		}
		
		public System.Data.Linq.Table<PatAdditionalColumn> PatAdditionalColumns
		{
			get
			{
				return this.GetTable<PatAdditionalColumn>();
			}
		}
		
		public System.Data.Linq.Table<RefAdditionalDataItem> RefAdditionalDataItems
		{
			get
			{
				return this.GetTable<RefAdditionalDataItem>();
			}
		}
		
		public System.Data.Linq.Table<PatAdditionalDataItem> PatAdditionalDataItems
		{
			get
			{
				return this.GetTable<PatAdditionalDataItem>();
			}
		}
		
		public System.Data.Linq.Table<PatAdditionalDataItemsColCover> PatAdditionalDataItemsColCovers
		{
			get
			{
				return this.GetTable<PatAdditionalDataItemsColCover>();
			}
		}
		
		public System.Data.Linq.Table<RefAdditionalDataItemsColCover> RefAdditionalDataItemsColCovers
		{
			get
			{
				return this.GetTable<RefAdditionalDataItemsColCover>();
			}
		}
		
		public System.Data.Linq.Table<BillsUserAccess> BillsUserAccesses
		{
			get
			{
				return this.GetTable<BillsUserAccess>();
			}
		}
		
		public System.Data.Linq.Table<BillTemplate> BillTemplates
		{
			get
			{
				return this.GetTable<BillTemplate>();
			}
		}
		
		public System.Data.Linq.Table<BillServCatExclude> BillServCatExcludes
		{
			get
			{
				return this.GetTable<BillServCatExclude>();
			}
		}
		
		public System.Data.Linq.Table<CostsAndDiscountsUsersExclude> CostsAndDiscountsUsersExcludes
		{
			get
			{
				return this.GetTable<CostsAndDiscountsUsersExclude>();
			}
		}
		
		public System.Data.Linq.Table<RefList> RefLists
		{
			get
			{
				return this.GetTable<RefList>();
			}
		}
		
		public System.Data.Linq.Table<InsPhysicianExclude> InsPhysicianExcludes
		{
			get
			{
				return this.GetTable<InsPhysicianExclude>();
			}
		}
		
		public System.Data.Linq.Table<InsRefPhysSpecExclude> InsRefPhysSpecExcludes
		{
			get
			{
				return this.GetTable<InsRefPhysSpecExclude>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<CashExcludedRef> CashExcludedRefs
		{
			get
			{
				return this.GetTable<CashExcludedRef>();
			}
		}
		
		public System.Data.Linq.Table<UsersSetting> UsersSettings
		{
			get
			{
				return this.GetTable<UsersSetting>();
			}
		}
		
		public System.Data.Linq.Table<SettingsList> SettingsLists
		{
			get
			{
				return this.GetTable<SettingsList>();
			}
		}
		
		public System.Data.Linq.Table<UsersDefaultDocType> UsersDefaultDocTypes
		{
			get
			{
				return this.GetTable<UsersDefaultDocType>();
			}
		}
		
		public System.Data.Linq.Table<Study> Studies
		{
			get
			{
				return this.GetTable<Study>();
			}
		}
		
		public System.Data.Linq.Table<ServiceStudy> ServiceStudies
		{
			get
			{
				return this.GetTable<ServiceStudy>();
			}
		}
		
		public System.Data.Linq.Table<Modality> Modalities
		{
			get
			{
				return this.GetTable<Modality>();
			}
		}
		
		public System.Data.Linq.Table<ServiceModality> ServiceModalities
		{
			get
			{
				return this.GetTable<ServiceModality>();
			}
		}
		
		public System.Data.Linq.Table<RefDocument> RefDocuments
		{
			get
			{
				return this.GetTable<RefDocument>();
			}
		}
		
		public System.Data.Linq.Table<SchLogEvents> SchLogEvents
		{
			get
			{
				return this.GetTable<SchLogEvents>();
			}
		}
		
		public System.Data.Linq.Table<SchAppointments> SchAppointments
		{
			get
			{
				return this.GetTable<SchAppointments>();
			}
		}
		
		public System.Data.Linq.Table<MsgCategories> MsgCategories
		{
			get
			{
				return this.GetTable<MsgCategories>();
			}
		}
		
		public System.Data.Linq.Table<MsgLogCategories> MsgLogCategories
		{
			get
			{
				return this.GetTable<MsgLogCategories>();
			}
		}
		
		public System.Data.Linq.Table<MsgLogEvents> MsgLogEvents
		{
			get
			{
				return this.GetTable<MsgLogEvents>();
			}
		}
		
		public System.Data.Linq.Table<MsgPriorities> MsgPriorities
		{
			get
			{
				return this.GetTable<MsgPriorities>();
			}
		}
		
		public System.Data.Linq.Table<MsgStates> MsgStates
		{
			get
			{
				return this.GetTable<MsgStates>();
			}
		}
		
		public System.Data.Linq.Table<MsgList> MsgLists
		{
			get
			{
				return this.GetTable<MsgList>();
			}
		}
		
		[Function(Name="Schedules.SP_DeleteAdditionalColumns")]
		public int SP_DeleteAdditionalColumns([Parameter(Name="ID", DbType="SmallInt")] System.Nullable<short> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_InsertAdditionalColumns")]
		public int SP_InsertAdditionalColumns([Parameter(Name="NewID", DbType="SmallInt")] ref System.Nullable<short> newID, [Parameter(Name="Title", DbType="NVarChar(50)")] string title, [Parameter(Name="TypeID", DbType="TinyInt")] System.Nullable<byte> typeID, [Parameter(Name="Lenght", DbType="TinyInt")] System.Nullable<byte> lenght, [Parameter(Name="Description", DbType="NVarChar(300)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), newID, title, typeID, lenght, description);
			newID = ((System.Nullable<short>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_InsertAppWeekPeriods")]
		public int SP_InsertAppWeekPeriods([Parameter(Name="ApplicationIX", DbType="SmallInt")] System.Nullable<short> applicationIX, [Parameter(Name="DayNo", DbType="TinyInt")] System.Nullable<byte> dayNo, [Parameter(Name="BeginTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> beginTime, [Parameter(Name="EndTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> endTime, [Parameter(Name="Capacity", DbType="SmallInt")] System.Nullable<short> capacity, [Parameter(Name="RoundingMinute", DbType="TinyInt")] System.Nullable<byte> roundingMinute)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationIX, dayNo, beginTime, endTime, capacity, roundingMinute);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_InsertColumnsOrder")]
		public int SP_InsertColumnsOrder([Parameter(Name="ColumnIX", DbType="SmallInt")] System.Nullable<short> columnIX, [Parameter(Name="OrderNumber", DbType="TinyInt")] System.Nullable<byte> orderNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), columnIX, orderNumber);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_InsertHolidays")]
		public int SP_InsertHolidays([Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID, [Parameter(Name="Date", DbType="SmallDateTime")] System.Nullable<System.DateTime> date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appID, date);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_InsertOneDayAppointments")]
		public int SP_InsertOneDayAppointments([Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID, [Parameter(Name="StartTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> startTime, [Parameter(Name="EndTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> endTime, [Parameter(Name="Capacity", DbType="SmallInt")] System.Nullable<short> capacity, [Parameter(Name="RoundMin", DbType="SmallInt")] System.Nullable<short> roundMin)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appID, startTime, endTime, capacity, roundMin);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectApplications")]
		public ISingleResult<SP_SelectApplicationsResult> SP_SelectApplications()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectApplicationsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SetAdditionalColumnsApp")]
		public int SP_SetAdditionalColumnsApp([Parameter(Name="ColumnID", DbType="SmallInt")] System.Nullable<short> columnID, [Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID, [Parameter(Name="IsCovered", DbType="Bit")] System.Nullable<bool> isCovered)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), columnID, appID, isCovered);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_UpdateApplications")]
		public int SP_UpdateApplications([Parameter(Name="ID", DbType="SmallInt")] System.Nullable<short> iD, [Parameter(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [Parameter(Name="Name", DbType="NVarChar(50)")] string name, [Parameter(Name="IsFixed", DbType="Bit")] System.Nullable<bool> isFixed, [Parameter(Name="StartDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> startDate, [Parameter(Name="EndDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> endDate, [Parameter(Name="Description", DbType="NVarChar(300)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, isActive, name, isFixed, startDate, endDate, description);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Services.SP_SelectCategories")]
		public ISingleResult<SP_SelectCategoriesResult> SP_SelectCategories()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectCategoriesResult>)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_InsertInsFullData")]
		public int SP_InsertInsFullData([Parameter(Name="IsActiveBase", DbType="Bit")] System.Nullable<bool> isActiveBase, [Parameter(Name="Name", DbType="NVarChar(50)")] string name, [Parameter(Name="IsActiveImaging", DbType="Bit")] System.Nullable<bool> isActiveImaging, [Parameter(Name="ContractStartDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> contractStartDate, [Parameter(Name="ContractEndDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> contractEndDate, [Parameter(Name="PatientPercent", DbType="TinyInt")] System.Nullable<byte> patientPercent, [Parameter(Name="InsurerPartLimit", DbType="Int")] System.Nullable<int> insurerPartLimit, [Parameter(Name="IsIns1", DbType="Bit")] System.Nullable<bool> isIns1, [Parameter(Name="IsIns2", DbType="Bit")] System.Nullable<bool> isIns2, [Parameter(Name="Ins2FormulasIX", DbType="SmallInt")] System.Nullable<short> ins2FormulasIX, [Parameter(Name="Description", DbType="NVarChar(300)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), isActiveBase, name, isActiveImaging, contractStartDate, contractEndDate, patientPercent, insurerPartLimit, isIns1, isIns2, ins2FormulasIX, description);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Services.SP_SelectServicesList")]
		public ISingleResult<SP_SelectServicesListResult> SP_SelectServicesList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectServicesListResult>)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_SelectInsFullData")]
		public ISingleResult<SP_SelectInsFullDataResult> SP_SelectInsFullData()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectInsFullDataResult>)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_DeletePatAdditionalColumns")]
		public int SP_DeletePatAdditionalColumns([Parameter(Name="ID", DbType="SmallInt")] System.Nullable<short> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_DeleteRefAdditionalColumns")]
		public int SP_DeleteRefAdditionalColumns([Parameter(Name="ID", DbType="SmallInt")] System.Nullable<short> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Services.SP_DeleteAdditionalPriceColumns")]
		public int SP_DeleteAdditionalPriceColumns([Parameter(Name="ID", DbType="SmallInt")] System.Nullable<short> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Services.SP_InsertAdditionalPriceColumns")]
		public int SP_InsertAdditionalPriceColumns([Parameter(Name="Name", DbType="NVarChar(25)")] string name, [Parameter(Name="Description", DbType="NVarChar(300)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, description);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Services.SP_InsertAdditionalPriceData")]
		public int SP_InsertAdditionalPriceData([Parameter(Name="ServiceIX", DbType="SmallInt")] System.Nullable<short> serviceIX, [Parameter(Name="FieldID", DbType="SmallInt")] System.Nullable<short> fieldID, [Parameter(Name="Price", DbType="Int")] System.Nullable<int> price)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), serviceIX, fieldID, price);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_SelectPerformers")]
		public ISingleResult<SP_SelectPerformersResult> SP_SelectPerformers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectPerformersResult>)(result.ReturnValue));
		}
		
		[Function(Name="Services.SP_SelectPriceColumnsList")]
		public ISingleResult<SP_SelectPriceColumnsListResult> SP_SelectPriceColumnsList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectPriceColumnsListResult>)(result.ReturnValue));
		}
		
		[Function(Name="Services.SP_SelectServicesInGroups")]
		public ISingleResult<SP_SelectServicesInGroupsResult> SP_SelectServicesInGroups()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectServicesInGroupsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Services.SP_SelectGroups")]
		public ISingleResult<SP_SelectGroupsResult> SP_SelectGroups()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectGroupsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_CheckIns2Formula")]
		public int SP_CheckIns2Formula(
					[Parameter(Name="Ins2Price_Syntax", DbType="NVarChar(500)")] string ins2Price_Syntax, 
					[Parameter(Name="Ins2Part_Syntax", DbType="NVarChar(500)")] string ins2Part_Syntax, 
					[Parameter(Name="PatientPayable_Syntax", DbType="NVarChar(500)")] string patientPayable_Syntax, 
					[Parameter(Name="PriceFree", DbType="Int")] System.Nullable<int> priceFree, 
					[Parameter(Name="PriceGov", DbType="Int")] System.Nullable<int> priceGov, 
					[Parameter(Name="X1Ins1Price", DbType="Int")] System.Nullable<int> x1Ins1Price, 
					[Parameter(Name="X2Ins1Part", DbType="Int")] System.Nullable<int> x2Ins1Part, 
					[Parameter(Name="X3Ins1PatientPrice", DbType="Int")] System.Nullable<int> x3Ins1PatientPrice, 
					[Parameter(Name="X4Ins1PatientPayable", DbType="Int")] System.Nullable<int> x4Ins1PatientPayable, 
					[Parameter(Name="X5Ins1Limit", DbType="Int")] System.Nullable<int> x5Ins1Limit, 
					[Parameter(Name="X6Ins1PatientPercent", DbType="Int")] System.Nullable<int> x6Ins1PatientPercent, 
					[Parameter(Name="Y1Ins2Limit", DbType="Int")] System.Nullable<int> y1Ins2Limit, 
					[Parameter(Name="Result1", DbType="Int")] ref System.Nullable<int> result1, 
					[Parameter(Name="Result2", DbType="Int")] ref System.Nullable<int> result2, 
					[Parameter(Name="Result3", DbType="Int")] ref System.Nullable<int> result3, 
					[Parameter(Name="IsCorrect", DbType="Bit")] ref System.Nullable<bool> isCorrect)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ins2Price_Syntax, ins2Part_Syntax, patientPayable_Syntax, priceFree, priceGov, x1Ins1Price, x2Ins1Part, x3Ins1PatientPrice, x4Ins1PatientPayable, x5Ins1Limit, x6Ins1PatientPercent, y1Ins2Limit, result1, result2, result3, isCorrect);
			result1 = ((System.Nullable<int>)(result.GetParameterValue(12)));
			result2 = ((System.Nullable<int>)(result.GetParameterValue(13)));
			result3 = ((System.Nullable<int>)(result.GetParameterValue(14)));
			isCorrect = ((System.Nullable<bool>)(result.GetParameterValue(15)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_CopyInsuranceServices")]
		public int SP_CopyInsuranceServices([Parameter(Name="InsID1", DbType="SmallInt")] System.Nullable<short> insID1, [Parameter(Name="InsID2", DbType="SmallInt")] System.Nullable<short> insID2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), insID1, insID2);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_InsertInsuranceServices")]
		public int SP_InsertInsuranceServices([Parameter(Name="InsIX", DbType="SmallInt")] System.Nullable<short> insIX, [Parameter(Name="ServiceIX", DbType="SmallInt")] System.Nullable<short> serviceIX, [Parameter(Name="IsCover", DbType="Bit")] System.Nullable<bool> isCover, [Parameter(Name="InsPrice", DbType="Int")] System.Nullable<int> insPrice, [Parameter(Name="InsPart", DbType="Int")] System.Nullable<int> insPart, [Parameter(Name="PatientPayable", DbType="Int")] System.Nullable<int> patientPayable)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), insIX, serviceIX, isCover, insPrice, insPart, patientPayable);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_SelectIns2FormulaColumns")]
		public ISingleResult<SP_SelectIns2FormulaColumnsResult> SP_SelectIns2FormulaColumns()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectIns2FormulaColumnsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_SelectIns2Formulas")]
		public ISingleResult<SP_SelectIns2FormulasResult> SP_SelectIns2Formulas()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectIns2FormulasResult>)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_UpdateInsFullData")]
		public int SP_UpdateInsFullData([Parameter(Name="ID", DbType="SmallInt")] System.Nullable<short> iD, [Parameter(Name="IsActiveBase", DbType="Bit")] System.Nullable<bool> isActiveBase, [Parameter(Name="Name", DbType="NVarChar(50)")] string name, [Parameter(Name="IsActiveImaging", DbType="Bit")] System.Nullable<bool> isActiveImaging, [Parameter(Name="ContractStartDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> contractStartDate, [Parameter(Name="ContractEndDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> contractEndDate, [Parameter(Name="PatientPercent", DbType="TinyInt")] System.Nullable<byte> patientPercent, [Parameter(Name="InsurerPartLimit", DbType="Int")] System.Nullable<int> insurerPartLimit, [Parameter(Name="IsIns1", DbType="Bit")] System.Nullable<bool> isIns1, [Parameter(Name="IsIns2", DbType="Bit")] System.Nullable<bool> isIns2, [Parameter(Name="Ins2FormulasIX", DbType="SmallInt")] System.Nullable<short> ins2FormulasIX, [Parameter(Name="Description", DbType="NVarChar(300)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, isActiveBase, name, isActiveImaging, contractStartDate, contractEndDate, patientPercent, insurerPartLimit, isIns1, isIns2, ins2FormulasIX, description);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.SP_InsertCashiersCashes")]
		public int SP_InsertCashiersCashes([Parameter(Name="CashierID", DbType="SmallInt")] System.Nullable<short> cashierID, [Parameter(Name="CashID", DbType="SmallInt")] System.Nullable<short> cashID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cashierID, cashID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.SP_SelectCashes")]
		public ISingleResult<SP_SelectCashesResult> SP_SelectCashes()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectCashesResult>)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.SP_SelectCashiersCashesList")]
		public ISingleResult<SP_SelectCashiersCashesListResult> SP_SelectCashiersCashesList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectCashiersCashesListResult>)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.FK_CalcRefPayable", IsComposable=true)]
		public System.Nullable<int> FK_CalcRefPayable([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID).ReturnValue));
		}
		
		[Function(Name="Accounting.FK_CalcSumPay", IsComposable=true)]
		public System.Nullable<int> FK_CalcSumPay([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID).ReturnValue));
		}
		
		[Function(Name="Accounting.FK_CalcSumRecieve", IsComposable=true)]
		public System.Nullable<int> FK_CalcSumRecieve([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID).ReturnValue));
		}
		
		[Function(Name="Accounting.FK_CalcTotalRefRemain", IsComposable=true)]
		public System.Nullable<int> FK_CalcTotalRefRemain([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID).ReturnValue));
		}
		
		[Function(Name="Referrals.SP_SelectRefServicesData")]
		public ISingleResult<SP_SelectRefServicesDataResult> SP_SelectRefServicesData([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID);
			return ((ISingleResult<SP_SelectRefServicesDataResult>)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_SelectStatus")]
		public ISingleResult<SP_SelectStatusResult> SP_SelectStatus()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectStatusResult>)(result.ReturnValue));
		}
		
		[Function(Name="Insurances.SP_GenerateIns2Prices")]
		public int SP_GenerateIns2Prices([Parameter(Name="Ins2ID", DbType="SmallInt")] System.Nullable<short> ins2ID, [Parameter(Name="ServiceID", DbType="SmallInt")] System.Nullable<short> serviceID, [Parameter(Name="X1Ins1Price", DbType="Int")] System.Nullable<int> x1Ins1Price, [Parameter(Name="X2Ins1Part", DbType="Int")] System.Nullable<int> x2Ins1Part, [Parameter(Name="X3Ins1PatientPrice", DbType="Int")] System.Nullable<int> x3Ins1PatientPrice, [Parameter(Name="X4Ins1PatientPayable", DbType="Int")] System.Nullable<int> x4Ins1PatientPayable, [Parameter(Name="X5Ins1Limit", DbType="Int")] System.Nullable<int> x5Ins1Limit, [Parameter(Name="X6Ins1PatientPercent", DbType="Int")] System.Nullable<int> x6Ins1PatientPercent, [Parameter(Name="Y1Ins2Limit", DbType="Int")] System.Nullable<int> y1Ins2Limit, [Parameter(Name="Result1", DbType="Int")] ref System.Nullable<int> result1, [Parameter(Name="Result2", DbType="Int")] ref System.Nullable<int> result2, [Parameter(Name="Result3", DbType="Int")] ref System.Nullable<int> result3)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ins2ID, serviceID, x1Ins1Price, x2Ins1Part, x3Ins1PatientPrice, x4Ins1PatientPayable, x5Ins1Limit, x6Ins1PatientPercent, y1Ins2Limit, result1, result2, result3);
			result1 = ((System.Nullable<int>)(result.GetParameterValue(9)));
			result2 = ((System.Nullable<int>)(result.GetParameterValue(10)));
			result3 = ((System.Nullable<int>)(result.GetParameterValue(11)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Settings.SP_InsertUserSetting")]
		public int SP_InsertUserSetting([Parameter(Name="UserID", DbType="SmallInt")] System.Nullable<short> userID, [Parameter(Name="SettingID", DbType="Int")] System.Nullable<int> settingID, [Parameter(Name="BooleanValue", DbType="Bit")] System.Nullable<bool> booleanValue, [Parameter(Name="StringValue", DbType="NVarChar(100)")] string stringValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, settingID, booleanValue, stringValue);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_ChangeLockRefList")]
		public int SP_ChangeLockRefList([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID, [Parameter(Name="IsLock", DbType="Bit")] System.Nullable<bool> isLock)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID, isLock);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_CheckLockRefList")]
		public int SP_CheckLockRefList([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID, [Parameter(Name="IsLock", DbType="Bit")] ref System.Nullable<bool> isLock)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID, isLock);
			isLock = ((System.Nullable<bool>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.SP_SelectBanks")]
		public ISingleResult<SP_SelectBanksResult> SP_SelectBanks()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectBanksResult>)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_SelectDocumentPatients")]
		public ISingleResult<SP_SelectDocumentPatientsResult> SP_SelectDocumentPatients([Parameter(Name="BeginTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> beginTime, [Parameter(Name="EndTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> endTime, [Parameter(Name="ShowNoServiceRefs", DbType="Bit")] System.Nullable<bool> showNoServiceRefs, [Parameter(Name="ServicePhysIX", DbType="SmallInt")] System.Nullable<short> servicePhysIX, [Parameter(Name="ServiceCatIX", DbType="SmallInt")] System.Nullable<short> serviceCatIX)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), beginTime, endTime, showNoServiceRefs, servicePhysIX, serviceCatIX);
			return ((ISingleResult<SP_SelectDocumentPatientsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Documents.SP_SelectType")]
		public ISingleResult<SP_SelectTypeResult> SP_SelectType()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectTypeResult>)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.FK_CalcRefServicesPayable", IsComposable=true)]
		public System.Nullable<int> FK_CalcRefServicesPayable([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID).ReturnValue));
		}
		
		[Function(Name="Accounting.SP_SelectCashesStatus")]
		public ISingleResult<SP_SelectCashesStatusResult> SP_SelectCashesStatus([Parameter(Name="CashierID", DbType="SmallInt")] System.Nullable<short> cashierID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cashierID);
			return ((ISingleResult<SP_SelectCashesStatusResult>)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.SP_SelectCashPatients")]
		public ISingleResult<SP_SelectCashPatientsResult> SP_SelectCashPatients([Parameter(Name="BeginTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> beginTime, [Parameter(Name="EndTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> endTime, [Parameter(Name="HidePayedRefs", DbType="Bit")] System.Nullable<bool> hidePayedRefs, [Parameter(Name="ShowNoServiceRefs", DbType="Bit")] System.Nullable<bool> showNoServiceRefs)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), beginTime, endTime, hidePayedRefs, showNoServiceRefs);
			return ((ISingleResult<SP_SelectCashPatientsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.SP_SelectCashiersCashes")]
		public ISingleResult<SP_SelectCashiersCashesResult> SP_SelectCashiersCashes([Parameter(Name="CashierID", DbType="SmallInt")] System.Nullable<short> cashierID, [Parameter(Name="EditCashID", DbType="SmallInt")] System.Nullable<short> editCashID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cashierID, editCashID);
			return ((ISingleResult<SP_SelectCashiersCashesResult>)(result.ReturnValue));
		}
		
		[Function(Name="Accounting.FK_GetCashLogStatutorySypply", IsComposable=true)]
		public System.Nullable<int> FK_GetCashLogStatutorySypply([Parameter(Name="CashLogID", DbType="Int")] System.Nullable<int> cashLogID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cashLogID).ReturnValue));
		}
		
		[Function(Name="Accounting.FK_CalcSumCost", IsComposable=true)]
		public System.Nullable<int> FK_CalcSumCost([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID).ReturnValue));
		}
		
		[Function(Name="Accounting.FK_CalcSumDiscount", IsComposable=true)]
		public System.Nullable<int> FK_CalcSumDiscount([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID).ReturnValue));
		}
		
		[Function(Name="Accounting.FK_CalcSumTransactions", IsComposable=true)]
		public System.Nullable<int> FK_CalcSumTransactions([Parameter(Name="RefID", DbType="Int")] System.Nullable<int> refID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), refID).ReturnValue));
		}
		
		[Function(Name="Schedules.SP_ChangeIsActiveAppointments")]
		public int SP_ChangeIsActiveAppointments([Parameter(Name="AppoinmentID", DbType="Int")] System.Nullable<int> appoinmentID, [Parameter(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appoinmentID, isActive);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_ChangeLockAppointments")]
		public int SP_ChangeLockAppointments([Parameter(Name="AppoinmentID", DbType="Int")] System.Nullable<int> appoinmentID, [Parameter(Name="IsLock", DbType="Bit")] System.Nullable<bool> isLock)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appoinmentID, isLock);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_CheckLockAppointments")]
		public int SP_CheckLockAppointments([Parameter(Name="AppoinmentID", DbType="Int")] System.Nullable<int> appoinmentID, [Parameter(Name="IsLock", DbType="Bit")] ref System.Nullable<bool> isLock)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appoinmentID, isLock);
			isLock = ((System.Nullable<bool>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_DeleteAppointment")]
		public int SP_DeleteAppointment([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_InsertAppointmentAddBoolData")]
		public int SP_InsertAppointmentAddBoolData([Parameter(Name="AppointmentID", DbType="Int")] System.Nullable<int> appointmentID, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="Bit")] System.Nullable<bool> data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appointmentID, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_InsertAppointmentAddIntData")]
		public int SP_InsertAppointmentAddIntData([Parameter(Name="AppointmentID", DbType="Int")] System.Nullable<int> appointmentID, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="Int")] System.Nullable<int> data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appointmentID, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_InsertAppointmentAddStringData")]
		public int SP_InsertAppointmentAddStringData([Parameter(Name="AppointmentID", DbType="Int")] System.Nullable<int> appointmentID, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="NVarChar(200)")] string data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appointmentID, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectAppAdditionalColumns")]
		public ISingleResult<SP_SelectAppAdditionalColumnsResult> SP_SelectAppAdditionalColumns([Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appID);
			return ((ISingleResult<SP_SelectAppAdditionalColumnsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectAppFirstDay")]
		public int SP_SelectAppFirstDay([Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID, [Parameter(Name="ReturnValue", DbType="SmallDateTime")] ref System.Nullable<System.DateTime> returnValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appID, returnValue);
			returnValue = ((System.Nullable<System.DateTime>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectAppLastDay")]
		public int SP_SelectAppLastDay([Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID, [Parameter(Name="ReturnValue", DbType="SmallDateTime")] ref System.Nullable<System.DateTime> returnValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appID, returnValue);
			returnValue = ((System.Nullable<System.DateTime>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectAppNextDay")]
		public int SP_SelectAppNextDay([Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID, [Parameter(Name="Date", DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name="ReturnValue", DbType="DateTime")] ref System.Nullable<System.DateTime> returnValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appID, date, returnValue);
			returnValue = ((System.Nullable<System.DateTime>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectAppPrevDay")]
		public int SP_SelectAppPrevDay([Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID, [Parameter(Name="Date", DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name="ReturnValue", DbType="DateTime")] ref System.Nullable<System.DateTime> returnValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appID, date, returnValue);
			returnValue = ((System.Nullable<System.DateTime>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectMultiSelectItems")]
		public ISingleResult<SP_SelectMultiSelectItemsResult> SP_SelectMultiSelectItems([Parameter(Name="ColumnID", DbType="SmallInt")] System.Nullable<short> columnID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), columnID);
			return ((ISingleResult<SP_SelectMultiSelectItemsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Settings.SP_CopyUserSetting")]
		public int SP_CopyUserSetting([Parameter(Name="BaseUserID", DbType="SmallInt")] System.Nullable<short> baseUserID, [Parameter(Name="TargetUserID", DbType="SmallInt")] System.Nullable<short> targetUserID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), baseUserID, targetUserID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Documents.SP_SelectTemplates")]
		public ISingleResult<SP_SelectTemplatesResult> SP_SelectTemplates()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectTemplatesResult>)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_InsertPatAddinBoolData")]
		public int SP_InsertPatAddinBoolData([Parameter(Name="PatientListID", DbType="Int")] System.Nullable<int> patientListID, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="Bit")] System.Nullable<bool> data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientListID, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_InsertPatAddinStringData")]
		public int SP_InsertPatAddinStringData([Parameter(Name="PatientListID", DbType="Int")] System.Nullable<int> patientListID, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="NVarChar(200)")] string data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientListID, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_InsertPatAdditionalColumns")]
		public int SP_InsertPatAdditionalColumns([Parameter(Name="Title", DbType="NVarChar(50)")] string title, [Parameter(Name="TypeID", DbType="TinyInt")] System.Nullable<byte> typeID, [Parameter(Name="Lenght", DbType="TinyInt")] System.Nullable<byte> lenght, [Parameter(Name="Description", DbType="NVarChar(300)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), title, typeID, lenght, description);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_InsertPatIntData")]
		public int SP_InsertPatIntData([Parameter(Name="PatientListID", DbType="Int")] System.Nullable<int> patientListID, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="Int")] System.Nullable<int> data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientListID, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_InsertRefAddinBoolData")]
		public int SP_InsertRefAddinBoolData([Parameter(Name="ReferralIX", DbType="Int")] System.Nullable<int> referralIX, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="Bit")] System.Nullable<bool> data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), referralIX, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_InsertRefAddinIntData")]
		public int SP_InsertRefAddinIntData([Parameter(Name="ReferralIX", DbType="Int")] System.Nullable<int> referralIX, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="Int")] System.Nullable<int> data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), referralIX, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_InsertRefAddinStringData")]
		public int SP_InsertRefAddinStringData([Parameter(Name="ReferralIX", DbType="Int")] System.Nullable<int> referralIX, [Parameter(Name="FieldName", DbType="NVarChar(10)")] string fieldName, [Parameter(Name="Data", DbType="NVarChar(200)")] string data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), referralIX, fieldName, data);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_InsertRefAdditionalColumns")]
		public int SP_InsertRefAdditionalColumns([Parameter(Name="Title", DbType="NVarChar(50)")] string title, [Parameter(Name="TypeID", DbType="TinyInt")] System.Nullable<byte> typeID, [Parameter(Name="Lenght", DbType="TinyInt")] System.Nullable<byte> lenght, [Parameter(Name="Description", DbType="NVarChar(300)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), title, typeID, lenght, description);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_SelectPatMultiSelectItems")]
		public ISingleResult<SP_SelectPatMultiSelectItemsResult> SP_SelectPatMultiSelectItems([Parameter(Name="ColumnID", DbType="SmallInt")] System.Nullable<short> columnID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), columnID);
			return ((ISingleResult<SP_SelectPatMultiSelectItemsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_SelectRefMultiSelectItems")]
		public ISingleResult<SP_SelectRefMultiSelectItemsResult> SP_SelectRefMultiSelectItems([Parameter(Name="ColumnID", DbType="SmallInt")] System.Nullable<short> columnID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), columnID);
			return ((ISingleResult<SP_SelectRefMultiSelectItemsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_SaveDocBinary")]
		public ISingleResult<SP_SaveDocBinaryResult> SP_SaveDocBinary([Parameter(Name="DocID", DbType="Int")] System.Nullable<int> docID, [Parameter(Name="Binary", DbType="VarBinary(MAX)")] System.Data.Linq.Binary binary)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), docID, binary);
			return ((ISingleResult<SP_SaveDocBinaryResult>)(result.ReturnValue));
		}
		
		[Function(Name="Referrals.SP_SelectDocBinary")]
		public int SP_SelectDocBinary([Parameter(Name="DocID", DbType="Int")] System.Nullable<int> docID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), docID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Reports.SP_SelectBillTemplate")]
		public ISingleResult<SP_SelectBillTemplateResult> SP_SelectBillTemplate([Parameter(Name="UserIX", DbType="SmallInt")] System.Nullable<short> userIX)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userIX);
			return ((ISingleResult<SP_SelectBillTemplateResult>)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_ClearAppointment")]
		public int SP_ClearAppointment([Parameter(Name="SchID", DbType="Int")] System.Nullable<int> schID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectLogCategories")]
		public ISingleResult<SP_SelectLogCategoriesResult> SP_SelectLogCategories()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectLogCategoriesResult>)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_SelectLogEvents")]
		public ISingleResult<SP_SelectLogEventsResult> SP_SelectLogEvents([Parameter(Name="AppointmentID", DbType="Int")] System.Nullable<int> appointmentID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appointmentID);
			return ((ISingleResult<SP_SelectLogEventsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Schedules.SP_MoveLogEvents")]
		public int SP_MoveLogEvents([Parameter(Name="PrincipleID", DbType="Int")] System.Nullable<int> principleID, [Parameter(Name="DestinationID", DbType="Int")] System.Nullable<int> destinationID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), principleID, destinationID);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="Schedules.AdditionalColumns")]
	public partial class SchAddinColumns : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _FieldName;
		
		private string _Title;
		
		private byte _TypeID;
		
		private System.Nullable<byte> _Lenght;
		
		private string _Description;
		
		private EntitySet<SchAddinDataItemsColCover> _AdditionalDataItemsColCovers;
		
		private EntitySet<SchAddinColsAppCover> _SchAddinColsAppCovers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnLenghtChanging(System.Nullable<byte> value);
    partial void OnLenghtChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SchAddinColumns()
		{
			this._AdditionalDataItemsColCovers = new EntitySet<SchAddinDataItemsColCover>(new Action<SchAddinDataItemsColCover>(this.attach_AdditionalDataItemsColCovers), new Action<SchAddinDataItemsColCover>(this.detach_AdditionalDataItemsColCovers));
			this._SchAddinColsAppCovers = new EntitySet<SchAddinColsAppCover>(new Action<SchAddinColsAppCover>(this.attach_SchAddinColsAppCovers), new Action<SchAddinColsAppCover>(this.detach_SchAddinColsAppCovers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="NVarChar(10)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="TinyInt NOT NULL")]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Lenght", DbType="TinyInt")]
		public System.Nullable<byte> Lenght
		{
			get
			{
				return this._Lenght;
			}
			set
			{
				if ((this._Lenght != value))
				{
					this.OnLenghtChanging(value);
					this.SendPropertyChanging();
					this._Lenght = value;
					this.SendPropertyChanged("Lenght");
					this.OnLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="SchAddinColumns_SchAddinDataItemsColCover", Storage="_AdditionalDataItemsColCovers", ThisKey="ID", OtherKey="ColumnIX")]
		public EntitySet<SchAddinDataItemsColCover> SchAddinDataItemsColCovers
		{
			get
			{
				return this._AdditionalDataItemsColCovers;
			}
			set
			{
				this._AdditionalDataItemsColCovers.Assign(value);
			}
		}
		
		[Association(Name="SchAddinColumns_SchAddinColsAppCover", Storage="_SchAddinColsAppCovers", ThisKey="ID", OtherKey="FieldIX")]
		public EntitySet<SchAddinColsAppCover> SchAddinColsAppCovers
		{
			get
			{
				return this._SchAddinColsAppCovers;
			}
			set
			{
				this._SchAddinColsAppCovers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdditionalDataItemsColCovers(SchAddinDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.SchAddinColumns = this;
		}
		
		private void detach_AdditionalDataItemsColCovers(SchAddinDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.SchAddinColumns = null;
		}
		
		private void attach_SchAddinColsAppCovers(SchAddinColsAppCover entity)
		{
			this.SendPropertyChanging();
			entity.SchAddinColumns = this;
		}
		
		private void detach_SchAddinColsAppCovers(SchAddinColsAppCover entity)
		{
			this.SendPropertyChanging();
			entity.SchAddinColumns = null;
		}
	}
	
	[Table(Name="Schedules.AdditionalDataItems")]
	public partial class SchAddinDataItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Title;
		
		private EntitySet<SchAddinDataItemsColCover> _AdditionalDataItemsColCovers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SchAddinDataItem()
		{
			this._AdditionalDataItemsColCovers = new EntitySet<SchAddinDataItemsColCover>(new Action<SchAddinDataItemsColCover>(this.attach_AdditionalDataItemsColCovers), new Action<SchAddinDataItemsColCover>(this.detach_AdditionalDataItemsColCovers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="SchAddinDataItem_SchAddinDataItemsColCover", Storage="_AdditionalDataItemsColCovers", ThisKey="ID", OtherKey="ItemIX")]
		public EntitySet<SchAddinDataItemsColCover> SchAddinDataItemsColCovers
		{
			get
			{
				return this._AdditionalDataItemsColCovers;
			}
			set
			{
				this._AdditionalDataItemsColCovers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdditionalDataItemsColCovers(SchAddinDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.SchAddinDataItem = this;
		}
		
		private void detach_AdditionalDataItemsColCovers(SchAddinDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.SchAddinDataItem = null;
		}
	}
	
	[Table(Name="Schedules.AdditionalDataItemsColCover")]
	public partial class SchAddinDataItemsColCover : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ItemIX;
		
		private short _ColumnIX;
		
		private EntityRef<SchAddinColumns> _AdditionalColumn;
		
		private EntityRef<SchAddinDataItem> _AdditionalDataItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIXChanging(short value);
    partial void OnItemIXChanged();
    partial void OnColumnIXChanging(short value);
    partial void OnColumnIXChanged();
    #endregion
		
		public SchAddinDataItemsColCover()
		{
			this._AdditionalColumn = default(EntityRef<SchAddinColumns>);
			this._AdditionalDataItem = default(EntityRef<SchAddinDataItem>);
			OnCreated();
		}
		
		[Column(Storage="_ItemIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ItemIX
		{
			get
			{
				return this._ItemIX;
			}
			set
			{
				if ((this._ItemIX != value))
				{
					if (this._AdditionalDataItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIXChanging(value);
					this.SendPropertyChanging();
					this._ItemIX = value;
					this.SendPropertyChanged("ItemIX");
					this.OnItemIXChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ColumnIX
		{
			get
			{
				return this._ColumnIX;
			}
			set
			{
				if ((this._ColumnIX != value))
				{
					if (this._AdditionalColumn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColumnIXChanging(value);
					this.SendPropertyChanging();
					this._ColumnIX = value;
					this.SendPropertyChanged("ColumnIX");
					this.OnColumnIXChanged();
				}
			}
		}
		
		[Association(Name="SchAddinColumns_SchAddinDataItemsColCover", Storage="_AdditionalColumn", ThisKey="ColumnIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchAddinColumns SchAddinColumns
		{
			get
			{
				return this._AdditionalColumn.Entity;
			}
			set
			{
				SchAddinColumns previousValue = this._AdditionalColumn.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalColumn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalColumn.Entity = null;
						previousValue.SchAddinDataItemsColCovers.Remove(this);
					}
					this._AdditionalColumn.Entity = value;
					if ((value != null))
					{
						value.SchAddinDataItemsColCovers.Add(this);
						this._ColumnIX = value.ID;
					}
					else
					{
						this._ColumnIX = default(short);
					}
					this.SendPropertyChanged("SchAddinColumns");
				}
			}
		}
		
		[Association(Name="SchAddinDataItem_SchAddinDataItemsColCover", Storage="_AdditionalDataItem", ThisKey="ItemIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchAddinDataItem SchAddinDataItem
		{
			get
			{
				return this._AdditionalDataItem.Entity;
			}
			set
			{
				SchAddinDataItem previousValue = this._AdditionalDataItem.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalDataItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalDataItem.Entity = null;
						previousValue.SchAddinDataItemsColCovers.Remove(this);
					}
					this._AdditionalDataItem.Entity = value;
					if ((value != null))
					{
						value.SchAddinDataItemsColCovers.Add(this);
						this._ItemIX = value.ID;
					}
					else
					{
						this._ItemIX = default(short);
					}
					this.SendPropertyChanged("SchAddinDataItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Schedules.Applications")]
	public partial class SchApplications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private bool _IsFixed;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Description;
		
		private EntitySet<SchAppWeekPeriods> _AppWeekPeriods;
		
		private EntitySet<SchHolidays> _Holidays;
		
		private EntitySet<SchAddinColsAppCover> _SchAddinColsAppCovers;
		
		private EntitySet<SchAppointments> _SchAppointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsFixedChanging(bool value);
    partial void OnIsFixedChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SchApplications()
		{
			this._AppWeekPeriods = new EntitySet<SchAppWeekPeriods>(new Action<SchAppWeekPeriods>(this.attach_AppWeekPeriods), new Action<SchAppWeekPeriods>(this.detach_AppWeekPeriods));
			this._Holidays = new EntitySet<SchHolidays>(new Action<SchHolidays>(this.attach_Holidays), new Action<SchHolidays>(this.detach_Holidays));
			this._SchAddinColsAppCovers = new EntitySet<SchAddinColsAppCover>(new Action<SchAddinColsAppCover>(this.attach_SchAddinColsAppCovers), new Action<SchAddinColsAppCover>(this.detach_SchAddinColsAppCovers));
			this._SchAppointments = new EntitySet<SchAppointments>(new Action<SchAppointments>(this.attach_SchAppointments), new Action<SchAppointments>(this.detach_SchAppointments));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsFixed", DbType="Bit NOT NULL")]
		public bool IsFixed
		{
			get
			{
				return this._IsFixed;
			}
			set
			{
				if ((this._IsFixed != value))
				{
					this.OnIsFixedChanging(value);
					this.SendPropertyChanging();
					this._IsFixed = value;
					this.SendPropertyChanged("IsFixed");
					this.OnIsFixedChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="SchApplications_SchAppWeekPeriods", Storage="_AppWeekPeriods", ThisKey="ID", OtherKey="ApplicationIX")]
		public EntitySet<SchAppWeekPeriods> SchAppWeekPeriods
		{
			get
			{
				return this._AppWeekPeriods;
			}
			set
			{
				this._AppWeekPeriods.Assign(value);
			}
		}
		
		[Association(Name="SchApplications_SchHolidays", Storage="_Holidays", ThisKey="ID", OtherKey="ApplicationIX")]
		public EntitySet<SchHolidays> SchHolidays
		{
			get
			{
				return this._Holidays;
			}
			set
			{
				this._Holidays.Assign(value);
			}
		}
		
		[Association(Name="SchApplications_SchAddinColsAppCover", Storage="_SchAddinColsAppCovers", ThisKey="ID", OtherKey="ApplicationIX")]
		public EntitySet<SchAddinColsAppCover> SchAddinColsAppCovers
		{
			get
			{
				return this._SchAddinColsAppCovers;
			}
			set
			{
				this._SchAddinColsAppCovers.Assign(value);
			}
		}
		
		[Association(Name="SchApplications_SchAppointments", Storage="_SchAppointments", ThisKey="ID", OtherKey="ApplicationIX")]
		public EntitySet<SchAppointments> SchAppointments
		{
			get
			{
				return this._SchAppointments;
			}
			set
			{
				this._SchAppointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppWeekPeriods(SchAppWeekPeriods entity)
		{
			this.SendPropertyChanging();
			entity.SchApplications = this;
		}
		
		private void detach_AppWeekPeriods(SchAppWeekPeriods entity)
		{
			this.SendPropertyChanging();
			entity.SchApplications = null;
		}
		
		private void attach_Holidays(SchHolidays entity)
		{
			this.SendPropertyChanging();
			entity.SchApplications = this;
		}
		
		private void detach_Holidays(SchHolidays entity)
		{
			this.SendPropertyChanging();
			entity.SchApplications = null;
		}
		
		private void attach_SchAddinColsAppCovers(SchAddinColsAppCover entity)
		{
			this.SendPropertyChanging();
			entity.SchApplications = this;
		}
		
		private void detach_SchAddinColsAppCovers(SchAddinColsAppCover entity)
		{
			this.SendPropertyChanging();
			entity.SchApplications = null;
		}
		
		private void attach_SchAppointments(SchAppointments entity)
		{
			this.SendPropertyChanging();
			entity.SchApplications = this;
		}
		
		private void detach_SchAppointments(SchAppointments entity)
		{
			this.SendPropertyChanging();
			entity.SchApplications = null;
		}
	}
	
	[Table(Name="Schedules.AppWeekPeriods")]
	public partial class SchAppWeekPeriods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ApplicationIX;
		
		private byte _DayNo;
		
		private System.DateTime _BeginTime;
		
		private System.DateTime _EndTime;
		
		private short _Capacity;
		
		private byte _RoundingMinute;
		
		private EntityRef<SchApplications> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIXChanging(short value);
    partial void OnApplicationIXChanged();
    partial void OnDayNoChanging(byte value);
    partial void OnDayNoChanged();
    partial void OnBeginTimeChanging(System.DateTime value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnCapacityChanging(short value);
    partial void OnCapacityChanged();
    partial void OnRoundingMinuteChanging(byte value);
    partial void OnRoundingMinuteChanged();
    #endregion
		
		public SchAppWeekPeriods()
		{
			this._Application = default(EntityRef<SchApplications>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ApplicationIX
		{
			get
			{
				return this._ApplicationIX;
			}
			set
			{
				if ((this._ApplicationIX != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIXChanging(value);
					this.SendPropertyChanging();
					this._ApplicationIX = value;
					this.SendPropertyChanged("ApplicationIX");
					this.OnApplicationIXChanged();
				}
			}
		}
		
		[Column(Storage="_DayNo", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte DayNo
		{
			get
			{
				return this._DayNo;
			}
			set
			{
				if ((this._DayNo != value))
				{
					this.OnDayNoChanging(value);
					this.SendPropertyChanging();
					this._DayNo = value;
					this.SendPropertyChanged("DayNo");
					this.OnDayNoChanged();
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Capacity", DbType="SmallInt NOT NULL")]
		public short Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[Column(Storage="_RoundingMinute", DbType="TinyInt NOT NULL")]
		public byte RoundingMinute
		{
			get
			{
				return this._RoundingMinute;
			}
			set
			{
				if ((this._RoundingMinute != value))
				{
					this.OnRoundingMinuteChanging(value);
					this.SendPropertyChanging();
					this._RoundingMinute = value;
					this.SendPropertyChanged("RoundingMinute");
					this.OnRoundingMinuteChanged();
				}
			}
		}
		
		[Association(Name="SchApplications_SchAppWeekPeriods", Storage="_Application", ThisKey="ApplicationIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchApplications SchApplications
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				SchApplications previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.SchAppWeekPeriods.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.SchAppWeekPeriods.Add(this);
						this._ApplicationIX = value.ID;
					}
					else
					{
						this._ApplicationIX = default(short);
					}
					this.SendPropertyChanged("SchApplications");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Schedules.ColumnsOrder")]
	public partial class SchColumnsOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ColumnIX;
		
		private byte _OrderNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColumnIXChanging(short value);
    partial void OnColumnIXChanged();
    partial void OnOrderNumberChanging(byte value);
    partial void OnOrderNumberChanged();
    #endregion
		
		public SchColumnsOrder()
		{
			OnCreated();
		}
		
		[Column(Storage="_ColumnIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ColumnIX
		{
			get
			{
				return this._ColumnIX;
			}
			set
			{
				if ((this._ColumnIX != value))
				{
					this.OnColumnIXChanging(value);
					this.SendPropertyChanging();
					this._ColumnIX = value;
					this.SendPropertyChanged("ColumnIX");
					this.OnColumnIXChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNumber", DbType="TinyInt NOT NULL")]
		public byte OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Schedules.Holidays")]
	public partial class SchHolidays : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ApplicationIX;
		
		private System.DateTime _HolidayDate;
		
		private EntityRef<SchApplications> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIXChanging(short value);
    partial void OnApplicationIXChanged();
    partial void OnHolidayDateChanging(System.DateTime value);
    partial void OnHolidayDateChanged();
    #endregion
		
		public SchHolidays()
		{
			this._Application = default(EntityRef<SchApplications>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ApplicationIX
		{
			get
			{
				return this._ApplicationIX;
			}
			set
			{
				if ((this._ApplicationIX != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIXChanging(value);
					this.SendPropertyChanging();
					this._ApplicationIX = value;
					this.SendPropertyChanged("ApplicationIX");
					this.OnApplicationIXChanged();
				}
			}
		}
		
		[Column(Storage="_HolidayDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime HolidayDate
		{
			get
			{
				return this._HolidayDate;
			}
			set
			{
				if ((this._HolidayDate != value))
				{
					this.OnHolidayDateChanging(value);
					this.SendPropertyChanging();
					this._HolidayDate = value;
					this.SendPropertyChanged("HolidayDate");
					this.OnHolidayDateChanged();
				}
			}
		}
		
		[Association(Name="SchApplications_SchHolidays", Storage="_Application", ThisKey="ApplicationIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchApplications SchApplications
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				SchApplications previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.SchHolidays.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.SchHolidays.Add(this);
						this._ApplicationIX = value.ID;
					}
					else
					{
						this._ApplicationIX = default(short);
					}
					this.SendPropertyChanged("SchApplications");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Referrals.Performers")]
	public partial class Performer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _FirstName;
		
		private string _LastName;
		
		private bool _IsMale;
		
		private bool _IsExpert;
		
		private bool _IsPhysician;
		
		private string _Description;
		
		private EntitySet<RefService> _RefServices;
		
		private EntitySet<RefService> _RefServices1;
		
		private EntitySet<DefaultPerformers> _DefaultPerformers;
		
		private EntitySet<RefDocument> _RefDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIsMaleChanging(bool value);
    partial void OnIsMaleChanged();
    partial void OnIsExpertChanging(bool value);
    partial void OnIsExpertChanged();
    partial void OnIsPhysicianChanging(bool value);
    partial void OnIsPhysicianChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Performer()
		{
			this._RefServices = new EntitySet<RefService>(new Action<RefService>(this.attach_RefServices), new Action<RefService>(this.detach_RefServices));
			this._RefServices1 = new EntitySet<RefService>(new Action<RefService>(this.attach_RefServices1), new Action<RefService>(this.detach_RefServices1));
			this._DefaultPerformers = new EntitySet<DefaultPerformers>(new Action<DefaultPerformers>(this.attach_DefaultPerformers), new Action<DefaultPerformers>(this.detach_DefaultPerformers));
			this._RefDocuments = new EntitySet<RefDocument>(new Action<RefDocument>(this.attach_RefDocuments), new Action<RefDocument>(this.detach_RefDocuments));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(15)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsMale", DbType="Bit NOT NULL")]
		public bool IsMale
		{
			get
			{
				return this._IsMale;
			}
			set
			{
				if ((this._IsMale != value))
				{
					this.OnIsMaleChanging(value);
					this.SendPropertyChanging();
					this._IsMale = value;
					this.SendPropertyChanged("IsMale");
					this.OnIsMaleChanged();
				}
			}
		}
		
		[Column(Storage="_IsExpert", DbType="Bit NOT NULL")]
		public bool IsExpert
		{
			get
			{
				return this._IsExpert;
			}
			set
			{
				if ((this._IsExpert != value))
				{
					this.OnIsExpertChanging(value);
					this.SendPropertyChanging();
					this._IsExpert = value;
					this.SendPropertyChanged("IsExpert");
					this.OnIsExpertChanged();
				}
			}
		}
		
		[Column(Storage="_IsPhysician", DbType="Bit NOT NULL")]
		public bool IsPhysician
		{
			get
			{
				return this._IsPhysician;
			}
			set
			{
				if ((this._IsPhysician != value))
				{
					this.OnIsPhysicianChanging(value);
					this.SendPropertyChanging();
					this._IsPhysician = value;
					this.SendPropertyChanged("IsPhysician");
					this.OnIsPhysicianChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Performer_RefService", Storage="_RefServices", ThisKey="ID", OtherKey="ExpertIX")]
		public EntitySet<RefService> RefServices
		{
			get
			{
				return this._RefServices;
			}
			set
			{
				this._RefServices.Assign(value);
			}
		}
		
		[Association(Name="Performer_RefService1", Storage="_RefServices1", ThisKey="ID", OtherKey="PhysicianIX")]
		public EntitySet<RefService> RefServices1
		{
			get
			{
				return this._RefServices1;
			}
			set
			{
				this._RefServices1.Assign(value);
			}
		}
		
		[Association(Name="Performer_DefaultPerformers", Storage="_DefaultPerformers", ThisKey="ID", OtherKey="PerformerIX")]
		public EntitySet<DefaultPerformers> DefaultPerformers
		{
			get
			{
				return this._DefaultPerformers;
			}
			set
			{
				this._DefaultPerformers.Assign(value);
			}
		}
		
		[Association(Name="Performer_RefDocument", Storage="_RefDocuments", ThisKey="ID", OtherKey="ReportPhysicianIX")]
		public EntitySet<RefDocument> RefDocuments
		{
			get
			{
				return this._RefDocuments;
			}
			set
			{
				this._RefDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefServices(RefService entity)
		{
			this.SendPropertyChanging();
			entity.Performer = this;
		}
		
		private void detach_RefServices(RefService entity)
		{
			this.SendPropertyChanging();
			entity.Performer = null;
		}
		
		private void attach_RefServices1(RefService entity)
		{
			this.SendPropertyChanging();
			entity.Performer1 = this;
		}
		
		private void detach_RefServices1(RefService entity)
		{
			this.SendPropertyChanging();
			entity.Performer1 = null;
		}
		
		private void attach_DefaultPerformers(DefaultPerformers entity)
		{
			this.SendPropertyChanging();
			entity.Performer = this;
		}
		
		private void detach_DefaultPerformers(DefaultPerformers entity)
		{
			this.SendPropertyChanging();
			entity.Performer = null;
		}
		
		private void attach_RefDocuments(RefDocument entity)
		{
			this.SendPropertyChanging();
			entity.Performer = this;
		}
		
		private void detach_RefDocuments(RefDocument entity)
		{
			this.SendPropertyChanging();
			entity.Performer = null;
		}
	}
	
	[Table(Name="Referrals.RefServices")]
	public partial class RefService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReferralIX;
		
		private short _ServiceIX;
		
		private bool _IsActive;
		
		private byte _Quantity;
		
		private System.Nullable<short> _ExpertIX;
		
		private System.Nullable<short> _PhysicianIX;
		
		private System.Nullable<bool> _IsIns1Cover;
		
		private System.Nullable<bool> _IsIns2Cover;
		
		private System.Nullable<int> _Ins1Price;
		
		private System.Nullable<int> _Ins1PartPrice;
		
		private System.Nullable<int> _Ins2Price;
		
		private System.Nullable<int> _Ins2PartPrice;
		
		private int _PatientPayablePrice;
		
		private EntityRef<Performer> _Performer;
		
		private EntityRef<Performer> _Performer1;
		
		private EntityRef<ServicesList> _ServicesList;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReferralIXChanging(int value);
    partial void OnReferralIXChanged();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnQuantityChanging(byte value);
    partial void OnQuantityChanged();
    partial void OnExpertIXChanging(System.Nullable<short> value);
    partial void OnExpertIXChanged();
    partial void OnPhysicianIXChanging(System.Nullable<short> value);
    partial void OnPhysicianIXChanged();
    partial void OnIsIns1CoverChanging(System.Nullable<bool> value);
    partial void OnIsIns1CoverChanged();
    partial void OnIsIns2CoverChanging(System.Nullable<bool> value);
    partial void OnIsIns2CoverChanged();
    partial void OnIns1PriceChanging(System.Nullable<int> value);
    partial void OnIns1PriceChanged();
    partial void OnIns1PartPriceChanging(System.Nullable<int> value);
    partial void OnIns1PartPriceChanged();
    partial void OnIns2PriceChanging(System.Nullable<int> value);
    partial void OnIns2PriceChanged();
    partial void OnIns2PartPriceChanging(System.Nullable<int> value);
    partial void OnIns2PartPriceChanged();
    partial void OnPatientPayablePriceChanging(int value);
    partial void OnPatientPayablePriceChanged();
    #endregion
		
		public RefService()
		{
			this._Performer = default(EntityRef<Performer>);
			this._Performer1 = default(EntityRef<Performer>);
			this._ServicesList = default(EntityRef<ServicesList>);
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralIX", DbType="Int NOT NULL")]
		public int ReferralIX
		{
			get
			{
				return this._ReferralIX;
			}
			set
			{
				if ((this._ReferralIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferralIXChanging(value);
					this.SendPropertyChanging();
					this._ReferralIX = value;
					this.SendPropertyChanged("ReferralIX");
					this.OnReferralIXChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL")]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="TinyInt NOT NULL")]
		public byte Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertIX", DbType="SmallInt")]
		public System.Nullable<short> ExpertIX
		{
			get
			{
				return this._ExpertIX;
			}
			set
			{
				if ((this._ExpertIX != value))
				{
					if (this._Performer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpertIXChanging(value);
					this.SendPropertyChanging();
					this._ExpertIX = value;
					this.SendPropertyChanged("ExpertIX");
					this.OnExpertIXChanged();
				}
			}
		}
		
		[Column(Storage="_PhysicianIX", DbType="SmallInt")]
		public System.Nullable<short> PhysicianIX
		{
			get
			{
				return this._PhysicianIX;
			}
			set
			{
				if ((this._PhysicianIX != value))
				{
					if (this._Performer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicianIXChanging(value);
					this.SendPropertyChanging();
					this._PhysicianIX = value;
					this.SendPropertyChanged("PhysicianIX");
					this.OnPhysicianIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsIns1Cover", DbType="Bit")]
		public System.Nullable<bool> IsIns1Cover
		{
			get
			{
				return this._IsIns1Cover;
			}
			set
			{
				if ((this._IsIns1Cover != value))
				{
					this.OnIsIns1CoverChanging(value);
					this.SendPropertyChanging();
					this._IsIns1Cover = value;
					this.SendPropertyChanged("IsIns1Cover");
					this.OnIsIns1CoverChanged();
				}
			}
		}
		
		[Column(Storage="_IsIns2Cover", DbType="Bit")]
		public System.Nullable<bool> IsIns2Cover
		{
			get
			{
				return this._IsIns2Cover;
			}
			set
			{
				if ((this._IsIns2Cover != value))
				{
					this.OnIsIns2CoverChanging(value);
					this.SendPropertyChanging();
					this._IsIns2Cover = value;
					this.SendPropertyChanged("IsIns2Cover");
					this.OnIsIns2CoverChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1Price", DbType="Int")]
		public System.Nullable<int> Ins1Price
		{
			get
			{
				return this._Ins1Price;
			}
			set
			{
				if ((this._Ins1Price != value))
				{
					this.OnIns1PriceChanging(value);
					this.SendPropertyChanging();
					this._Ins1Price = value;
					this.SendPropertyChanged("Ins1Price");
					this.OnIns1PriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1PartPrice", DbType="Int")]
		public System.Nullable<int> Ins1PartPrice
		{
			get
			{
				return this._Ins1PartPrice;
			}
			set
			{
				if ((this._Ins1PartPrice != value))
				{
					this.OnIns1PartPriceChanging(value);
					this.SendPropertyChanging();
					this._Ins1PartPrice = value;
					this.SendPropertyChanged("Ins1PartPrice");
					this.OnIns1PartPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2Price", DbType="Int")]
		public System.Nullable<int> Ins2Price
		{
			get
			{
				return this._Ins2Price;
			}
			set
			{
				if ((this._Ins2Price != value))
				{
					this.OnIns2PriceChanging(value);
					this.SendPropertyChanging();
					this._Ins2Price = value;
					this.SendPropertyChanged("Ins2Price");
					this.OnIns2PriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2PartPrice", DbType="Int")]
		public System.Nullable<int> Ins2PartPrice
		{
			get
			{
				return this._Ins2PartPrice;
			}
			set
			{
				if ((this._Ins2PartPrice != value))
				{
					this.OnIns2PartPriceChanging(value);
					this.SendPropertyChanging();
					this._Ins2PartPrice = value;
					this.SendPropertyChanged("Ins2PartPrice");
					this.OnIns2PartPriceChanged();
				}
			}
		}
		
		[Column(Storage="_PatientPayablePrice", DbType="Int NOT NULL")]
		public int PatientPayablePrice
		{
			get
			{
				return this._PatientPayablePrice;
			}
			set
			{
				if ((this._PatientPayablePrice != value))
				{
					this.OnPatientPayablePriceChanging(value);
					this.SendPropertyChanging();
					this._PatientPayablePrice = value;
					this.SendPropertyChanged("PatientPayablePrice");
					this.OnPatientPayablePriceChanged();
				}
			}
		}
		
		[Association(Name="Performer_RefService", Storage="_Performer", ThisKey="ExpertIX", OtherKey="ID", IsForeignKey=true)]
		public Performer Performer
		{
			get
			{
				return this._Performer.Entity;
			}
			set
			{
				Performer previousValue = this._Performer.Entity;
				if (((previousValue != value) 
							|| (this._Performer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Performer.Entity = null;
						previousValue.RefServices.Remove(this);
					}
					this._Performer.Entity = value;
					if ((value != null))
					{
						value.RefServices.Add(this);
						this._ExpertIX = value.ID;
					}
					else
					{
						this._ExpertIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("Performer");
				}
			}
		}
		
		[Association(Name="Performer_RefService1", Storage="_Performer1", ThisKey="PhysicianIX", OtherKey="ID", IsForeignKey=true)]
		public Performer Performer1
		{
			get
			{
				return this._Performer1.Entity;
			}
			set
			{
				Performer previousValue = this._Performer1.Entity;
				if (((previousValue != value) 
							|| (this._Performer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Performer1.Entity = null;
						previousValue.RefServices1.Remove(this);
					}
					this._Performer1.Entity = value;
					if ((value != null))
					{
						value.RefServices1.Add(this);
						this._PhysicianIX = value.ID;
					}
					else
					{
						this._PhysicianIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("Performer1");
				}
			}
		}
		
		[Association(Name="ServicesList_RefService", Storage="_ServicesList", ThisKey="ServiceIX", OtherKey="ID", IsForeignKey=true)]
		public ServicesList ServicesList
		{
			get
			{
				return this._ServicesList.Entity;
			}
			set
			{
				ServicesList previousValue = this._ServicesList.Entity;
				if (((previousValue != value) 
							|| (this._ServicesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesList.Entity = null;
						previousValue.RefServices.Remove(this);
					}
					this._ServicesList.Entity = value;
					if ((value != null))
					{
						value.RefServices.Add(this);
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesList");
				}
			}
		}
		
		[Association(Name="RefList_RefService", Storage="_RefList", ThisKey="ReferralIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.RefServices.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.RefServices.Add(this);
						this._ReferralIX = value.ID;
					}
					else
					{
						this._ReferralIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Services.List")]
	public partial class ServicesList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Code;
		
		private string _Name;
		
		private System.Nullable<short> _CategoryIX;
		
		private int _PriceFree;
		
		private int _PriceGov;
		
		private string _Description;
		
		private EntitySet<RefService> _RefServices;
		
		private EntitySet<DefaultPerformers> _DefaultPerformers;
		
		private EntitySet<ServicesInGroups> _ServicesInGroups;
		
		private EntitySet<InsuranceService> _InsuranceServices;
		
		private EntitySet<InsPhysicianExclude> _InsPhysicianExcludes;
		
		private EntitySet<InsRefPhysSpecExclude> _InsRefPhysSpecExcludes;
		
		private EntityRef<ServiceStudy> _ServiceStudy;
		
		private EntitySet<ServiceModality> _ServiceModalities;
		
		private EntityRef<ServicesCategories> _ServicesCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryIXChanging(System.Nullable<short> value);
    partial void OnCategoryIXChanged();
    partial void OnPriceFreeChanging(int value);
    partial void OnPriceFreeChanged();
    partial void OnPriceGovChanging(int value);
    partial void OnPriceGovChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ServicesList()
		{
			this._RefServices = new EntitySet<RefService>(new Action<RefService>(this.attach_RefServices), new Action<RefService>(this.detach_RefServices));
			this._DefaultPerformers = new EntitySet<DefaultPerformers>(new Action<DefaultPerformers>(this.attach_DefaultPerformers), new Action<DefaultPerformers>(this.detach_DefaultPerformers));
			this._ServicesInGroups = new EntitySet<ServicesInGroups>(new Action<ServicesInGroups>(this.attach_ServicesInGroups), new Action<ServicesInGroups>(this.detach_ServicesInGroups));
			this._InsuranceServices = new EntitySet<InsuranceService>(new Action<InsuranceService>(this.attach_InsuranceServices), new Action<InsuranceService>(this.detach_InsuranceServices));
			this._InsPhysicianExcludes = new EntitySet<InsPhysicianExclude>(new Action<InsPhysicianExclude>(this.attach_InsPhysicianExcludes), new Action<InsPhysicianExclude>(this.detach_InsPhysicianExcludes));
			this._InsRefPhysSpecExcludes = new EntitySet<InsRefPhysSpecExclude>(new Action<InsRefPhysSpecExclude>(this.attach_InsRefPhysSpecExcludes), new Action<InsRefPhysSpecExclude>(this.detach_InsRefPhysSpecExcludes));
			this._ServiceStudy = default(EntityRef<ServiceStudy>);
			this._ServiceModalities = new EntitySet<ServiceModality>(new Action<ServiceModality>(this.attach_ServiceModalities), new Action<ServiceModality>(this.detach_ServiceModalities));
			this._ServicesCategories = default(EntityRef<ServicesCategories>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="SmallInt")]
		public System.Nullable<short> CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					if (this._ServicesCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIXChanging(value);
					this.SendPropertyChanging();
					this._CategoryIX = value;
					this.SendPropertyChanged("CategoryIX");
					this.OnCategoryIXChanged();
				}
			}
		}
		
		[Column(Storage="_PriceFree", DbType="Int NOT NULL")]
		public int PriceFree
		{
			get
			{
				return this._PriceFree;
			}
			set
			{
				if ((this._PriceFree != value))
				{
					this.OnPriceFreeChanging(value);
					this.SendPropertyChanging();
					this._PriceFree = value;
					this.SendPropertyChanged("PriceFree");
					this.OnPriceFreeChanged();
				}
			}
		}
		
		[Column(Storage="_PriceGov", DbType="Int NOT NULL")]
		public int PriceGov
		{
			get
			{
				return this._PriceGov;
			}
			set
			{
				if ((this._PriceGov != value))
				{
					this.OnPriceGovChanging(value);
					this.SendPropertyChanging();
					this._PriceGov = value;
					this.SendPropertyChanged("PriceGov");
					this.OnPriceGovChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="ServicesList_RefService", Storage="_RefServices", ThisKey="ID", OtherKey="ServiceIX")]
		public EntitySet<RefService> RefServices
		{
			get
			{
				return this._RefServices;
			}
			set
			{
				this._RefServices.Assign(value);
			}
		}
		
		[Association(Name="ServicesList_DefaultPerformers", Storage="_DefaultPerformers", ThisKey="ID", OtherKey="ServiceIX")]
		public EntitySet<DefaultPerformers> DefaultPerformers
		{
			get
			{
				return this._DefaultPerformers;
			}
			set
			{
				this._DefaultPerformers.Assign(value);
			}
		}
		
		[Association(Name="ServicesList_ServicesInGroups", Storage="_ServicesInGroups", ThisKey="ID", OtherKey="ServiceIX")]
		public EntitySet<ServicesInGroups> ServicesInGroups
		{
			get
			{
				return this._ServicesInGroups;
			}
			set
			{
				this._ServicesInGroups.Assign(value);
			}
		}
		
		[Association(Name="ServicesList_InsuranceService", Storage="_InsuranceServices", ThisKey="ID", OtherKey="ServiceIX")]
		public EntitySet<InsuranceService> InsuranceServices
		{
			get
			{
				return this._InsuranceServices;
			}
			set
			{
				this._InsuranceServices.Assign(value);
			}
		}
		
		[Association(Name="ServicesList_InsPhysicianExclude", Storage="_InsPhysicianExcludes", ThisKey="ID", OtherKey="ServiceIX")]
		public EntitySet<InsPhysicianExclude> InsPhysicianExcludes
		{
			get
			{
				return this._InsPhysicianExcludes;
			}
			set
			{
				this._InsPhysicianExcludes.Assign(value);
			}
		}
		
		[Association(Name="ServicesList_InsRefPhysSpecExclude", Storage="_InsRefPhysSpecExcludes", ThisKey="ID", OtherKey="ServiceIX")]
		public EntitySet<InsRefPhysSpecExclude> InsRefPhysSpecExcludes
		{
			get
			{
				return this._InsRefPhysSpecExcludes;
			}
			set
			{
				this._InsRefPhysSpecExcludes.Assign(value);
			}
		}
		
		[Association(Name="ServicesList_ServiceStudy", Storage="_ServiceStudy", ThisKey="ID", OtherKey="ServiceIX", IsUnique=true, IsForeignKey=false)]
		public ServiceStudy ServiceStudy
		{
			get
			{
				return this._ServiceStudy.Entity;
			}
			set
			{
				ServiceStudy previousValue = this._ServiceStudy.Entity;
				if (((previousValue != value) 
							|| (this._ServiceStudy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceStudy.Entity = null;
						previousValue.ServicesList = null;
					}
					this._ServiceStudy.Entity = value;
					if ((value != null))
					{
						value.ServicesList = this;
					}
					this.SendPropertyChanged("ServiceStudy");
				}
			}
		}
		
		[Association(Name="ServicesList_ServiceModality", Storage="_ServiceModalities", ThisKey="ID", OtherKey="ServiceIX")]
		public EntitySet<ServiceModality> ServiceModalities
		{
			get
			{
				return this._ServiceModalities;
			}
			set
			{
				this._ServiceModalities.Assign(value);
			}
		}
		
		[Association(Name="ServicesCategories_ServicesList", Storage="_ServicesCategories", ThisKey="CategoryIX", OtherKey="ID", IsForeignKey=true)]
		public ServicesCategories ServicesCategories
		{
			get
			{
				return this._ServicesCategories.Entity;
			}
			set
			{
				ServicesCategories previousValue = this._ServicesCategories.Entity;
				if (((previousValue != value) 
							|| (this._ServicesCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesCategories.Entity = null;
						previousValue.ServicesLists.Remove(this);
					}
					this._ServicesCategories.Entity = value;
					if ((value != null))
					{
						value.ServicesLists.Add(this);
						this._CategoryIX = value.ID;
					}
					else
					{
						this._CategoryIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("ServicesCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefServices(RefService entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = this;
		}
		
		private void detach_RefServices(RefService entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = null;
		}
		
		private void attach_DefaultPerformers(DefaultPerformers entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = this;
		}
		
		private void detach_DefaultPerformers(DefaultPerformers entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = null;
		}
		
		private void attach_ServicesInGroups(ServicesInGroups entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = this;
		}
		
		private void detach_ServicesInGroups(ServicesInGroups entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = null;
		}
		
		private void attach_InsuranceServices(InsuranceService entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = this;
		}
		
		private void detach_InsuranceServices(InsuranceService entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = null;
		}
		
		private void attach_InsPhysicianExcludes(InsPhysicianExclude entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = this;
		}
		
		private void detach_InsPhysicianExcludes(InsPhysicianExclude entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = null;
		}
		
		private void attach_InsRefPhysSpecExcludes(InsRefPhysSpecExclude entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = this;
		}
		
		private void detach_InsRefPhysSpecExcludes(InsRefPhysSpecExclude entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = null;
		}
		
		private void attach_ServiceModalities(ServiceModality entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = this;
		}
		
		private void detach_ServiceModalities(ServiceModality entity)
		{
			this.SendPropertyChanging();
			entity.ServicesList = null;
		}
	}
	
	[Table(Name="Services.Groups")]
	public partial class ServicesGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private EntitySet<ServicesInGroups> _ServicesInGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServicesGroups()
		{
			this._ServicesInGroups = new EntitySet<ServicesInGroups>(new Action<ServicesInGroups>(this.attach_ServicesInGroups), new Action<ServicesInGroups>(this.detach_ServicesInGroups));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ServicesGroups_ServicesInGroups", Storage="_ServicesInGroups", ThisKey="ID", OtherKey="GroupIX")]
		public EntitySet<ServicesInGroups> ServicesInGroups
		{
			get
			{
				return this._ServicesInGroups;
			}
			set
			{
				this._ServicesInGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServicesInGroups(ServicesInGroups entity)
		{
			this.SendPropertyChanging();
			entity.ServicesGroups = this;
		}
		
		private void detach_ServicesInGroups(ServicesInGroups entity)
		{
			this.SendPropertyChanging();
			entity.ServicesGroups = null;
		}
	}
	
	[Table(Name="Services.DefaultPerformers")]
	public partial class DefaultPerformers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private short _ServiceIX;
		
		private short _PerformerIX;
		
		private bool _IsExpert;
		
		private string _Days;
		
		private string _Period;
		
		private EntityRef<ServicesList> _ServicesList;
		
		private EntityRef<Performer> _Performer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnPerformerIXChanging(short value);
    partial void OnPerformerIXChanged();
    partial void OnIsExpertChanging(bool value);
    partial void OnIsExpertChanged();
    partial void OnDaysChanging(string value);
    partial void OnDaysChanged();
    partial void OnPeriodChanging(string value);
    partial void OnPeriodChanged();
    #endregion
		
		public DefaultPerformers()
		{
			this._ServicesList = default(EntityRef<ServicesList>);
			this._Performer = default(EntityRef<Performer>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL")]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_PerformerIX", DbType="SmallInt NOT NULL")]
		public short PerformerIX
		{
			get
			{
				return this._PerformerIX;
			}
			set
			{
				if ((this._PerformerIX != value))
				{
					if (this._Performer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformerIXChanging(value);
					this.SendPropertyChanging();
					this._PerformerIX = value;
					this.SendPropertyChanged("PerformerIX");
					this.OnPerformerIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsExpert", DbType="Bit NOT NULL")]
		public bool IsExpert
		{
			get
			{
				return this._IsExpert;
			}
			set
			{
				if ((this._IsExpert != value))
				{
					this.OnIsExpertChanging(value);
					this.SendPropertyChanging();
					this._IsExpert = value;
					this.SendPropertyChanged("IsExpert");
					this.OnIsExpertChanged();
				}
			}
		}
		
		[Column(Storage="_Days", DbType="NVarChar(7) NOT NULL", CanBeNull=false)]
		public string Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				if ((this._Days != value))
				{
					this.OnDaysChanging(value);
					this.SendPropertyChanging();
					this._Days = value;
					this.SendPropertyChanged("Days");
					this.OnDaysChanged();
				}
			}
		}
		
		[Column(Storage="_Period", DbType="NVarChar(8) NOT NULL", CanBeNull=false)]
		public string Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[Association(Name="ServicesList_DefaultPerformers", Storage="_ServicesList", ThisKey="ServiceIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesList ServicesList
		{
			get
			{
				return this._ServicesList.Entity;
			}
			set
			{
				ServicesList previousValue = this._ServicesList.Entity;
				if (((previousValue != value) 
							|| (this._ServicesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesList.Entity = null;
						previousValue.DefaultPerformers.Remove(this);
					}
					this._ServicesList.Entity = value;
					if ((value != null))
					{
						value.DefaultPerformers.Add(this);
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesList");
				}
			}
		}
		
		[Association(Name="Performer_DefaultPerformers", Storage="_Performer", ThisKey="PerformerIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Performer Performer
		{
			get
			{
				return this._Performer.Entity;
			}
			set
			{
				Performer previousValue = this._Performer.Entity;
				if (((previousValue != value) 
							|| (this._Performer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Performer.Entity = null;
						previousValue.DefaultPerformers.Remove(this);
					}
					this._Performer.Entity = value;
					if ((value != null))
					{
						value.DefaultPerformers.Add(this);
						this._PerformerIX = value.ID;
					}
					else
					{
						this._PerformerIX = default(short);
					}
					this.SendPropertyChanged("Performer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Services.Categories")]
	public partial class ServicesCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private EntitySet<ServicesList> _ServicesLists;
		
		private EntityRef<BillServCatExclude> _BillServCatExclude;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServicesCategories()
		{
			this._ServicesLists = new EntitySet<ServicesList>(new Action<ServicesList>(this.attach_ServicesLists), new Action<ServicesList>(this.detach_ServicesLists));
			this._BillServCatExclude = default(EntityRef<BillServCatExclude>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ServicesCategories_ServicesList", Storage="_ServicesLists", ThisKey="ID", OtherKey="CategoryIX")]
		public EntitySet<ServicesList> ServicesLists
		{
			get
			{
				return this._ServicesLists;
			}
			set
			{
				this._ServicesLists.Assign(value);
			}
		}
		
		[Association(Name="ServicesCategories_BillServCatExclude", Storage="_BillServCatExclude", ThisKey="ID", OtherKey="CategoryIX", IsUnique=true, IsForeignKey=false)]
		public BillServCatExclude BillServCatExclude
		{
			get
			{
				return this._BillServCatExclude.Entity;
			}
			set
			{
				BillServCatExclude previousValue = this._BillServCatExclude.Entity;
				if (((previousValue != value) 
							|| (this._BillServCatExclude.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillServCatExclude.Entity = null;
						previousValue.ServicesCategories = null;
					}
					this._BillServCatExclude.Entity = value;
					if ((value != null))
					{
						value.ServicesCategories = this;
					}
					this.SendPropertyChanged("BillServCatExclude");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServicesLists(ServicesList entity)
		{
			this.SendPropertyChanging();
			entity.ServicesCategories = this;
		}
		
		private void detach_ServicesLists(ServicesList entity)
		{
			this.SendPropertyChanging();
			entity.ServicesCategories = null;
		}
	}
	
	[Table(Name="Services.AdditionalPriceColumns")]
	public partial class AdditionalPriceColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _ColumnName;
		
		private string _Name;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnColumnNameChanging(string value);
    partial void OnColumnNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AdditionalPriceColumn()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnName", DbType="NVarChar(15)")]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this.OnColumnNameChanging(value);
					this.SendPropertyChanging();
					this._ColumnName = value;
					this.SendPropertyChanged("ColumnName");
					this.OnColumnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Services.ServiceInGroups")]
	public partial class ServicesInGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ServiceIX;
		
		private short _GroupIX;
		
		private EntityRef<ServicesGroups> _ServicesGroups;
		
		private EntityRef<ServicesList> _ServicesList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnGroupIXChanging(short value);
    partial void OnGroupIXChanged();
    #endregion
		
		public ServicesInGroups()
		{
			this._ServicesGroups = default(EntityRef<ServicesGroups>);
			this._ServicesList = default(EntityRef<ServicesList>);
			OnCreated();
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_GroupIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short GroupIX
		{
			get
			{
				return this._GroupIX;
			}
			set
			{
				if ((this._GroupIX != value))
				{
					if (this._ServicesGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIXChanging(value);
					this.SendPropertyChanging();
					this._GroupIX = value;
					this.SendPropertyChanged("GroupIX");
					this.OnGroupIXChanged();
				}
			}
		}
		
		[Association(Name="ServicesGroups_ServicesInGroups", Storage="_ServicesGroups", ThisKey="GroupIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesGroups ServicesGroups
		{
			get
			{
				return this._ServicesGroups.Entity;
			}
			set
			{
				ServicesGroups previousValue = this._ServicesGroups.Entity;
				if (((previousValue != value) 
							|| (this._ServicesGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesGroups.Entity = null;
						previousValue.ServicesInGroups.Remove(this);
					}
					this._ServicesGroups.Entity = value;
					if ((value != null))
					{
						value.ServicesInGroups.Add(this);
						this._GroupIX = value.ID;
					}
					else
					{
						this._GroupIX = default(short);
					}
					this.SendPropertyChanged("ServicesGroups");
				}
			}
		}
		
		[Association(Name="ServicesList_ServicesInGroups", Storage="_ServicesList", ThisKey="ServiceIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesList ServicesList
		{
			get
			{
				return this._ServicesList.Entity;
			}
			set
			{
				ServicesList previousValue = this._ServicesList.Entity;
				if (((previousValue != value) 
							|| (this._ServicesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesList.Entity = null;
						previousValue.ServicesInGroups.Remove(this);
					}
					this._ServicesList.Entity = value;
					if ((value != null))
					{
						value.ServicesInGroups.Add(this);
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Insurances.Ins2Formulas")]
	public partial class Ins2Formula : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private string _Ins2Price;
		
		private string _Ins2Part;
		
		private string _PatientPayable;
		
		private string _Description;
		
		private EntitySet<ListInsurance> _ListInsurances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIns2PriceChanging(string value);
    partial void OnIns2PriceChanged();
    partial void OnIns2PartChanging(string value);
    partial void OnIns2PartChanged();
    partial void OnPatientPayableChanging(string value);
    partial void OnPatientPayableChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Ins2Formula()
		{
			this._ListInsurances = new EntitySet<ListInsurance>(new Action<ListInsurance>(this.attach_ListInsurances), new Action<ListInsurance>(this.detach_ListInsurances));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2Price", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Ins2Price
		{
			get
			{
				return this._Ins2Price;
			}
			set
			{
				if ((this._Ins2Price != value))
				{
					this.OnIns2PriceChanging(value);
					this.SendPropertyChanging();
					this._Ins2Price = value;
					this.SendPropertyChanged("Ins2Price");
					this.OnIns2PriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2Part", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Ins2Part
		{
			get
			{
				return this._Ins2Part;
			}
			set
			{
				if ((this._Ins2Part != value))
				{
					this.OnIns2PartChanging(value);
					this.SendPropertyChanging();
					this._Ins2Part = value;
					this.SendPropertyChanged("Ins2Part");
					this.OnIns2PartChanged();
				}
			}
		}
		
		[Column(Storage="_PatientPayable", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string PatientPayable
		{
			get
			{
				return this._PatientPayable;
			}
			set
			{
				if ((this._PatientPayable != value))
				{
					this.OnPatientPayableChanging(value);
					this.SendPropertyChanging();
					this._PatientPayable = value;
					this.SendPropertyChanged("PatientPayable");
					this.OnPatientPayableChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Ins2Formula_ListInsurance", Storage="_ListInsurances", ThisKey="ID", OtherKey="Ins2FormulasIX")]
		public EntitySet<ListInsurance> ListInsurances
		{
			get
			{
				return this._ListInsurances;
			}
			set
			{
				this._ListInsurances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ListInsurances(ListInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Ins2Formula = this;
		}
		
		private void detach_ListInsurances(ListInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Ins2Formula = null;
		}
	}
	
	[Table(Name="Insurances.List")]
	public partial class ListInsurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _InsuranceIX;
		
		private bool _IsActive;
		
		private System.Nullable<System.DateTime> _ContractStartDate;
		
		private System.Nullable<System.DateTime> _ContractEndDate;
		
		private byte _PatientPercent;
		
		private int _InsurerPartLimit;
		
		private bool _IsIns1;
		
		private bool _IsIns2;
		
		private System.Nullable<short> _Ins2FormulasIX;
		
		private string _Description;
		
		private EntitySet<InsuranceService> _InsuranceServices;
		
		private EntitySet<InsPhysicianExclude> _InsPhysicianExcludes;
		
		private EntitySet<InsRefPhysSpecExclude> _InsRefPhysSpecExcludes;
		
		private EntityRef<Ins2Formula> _Ins2Formula;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsuranceIXChanging(short value);
    partial void OnInsuranceIXChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnContractStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractStartDateChanged();
    partial void OnContractEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractEndDateChanged();
    partial void OnPatientPercentChanging(byte value);
    partial void OnPatientPercentChanged();
    partial void OnInsurerPartLimitChanging(int value);
    partial void OnInsurerPartLimitChanged();
    partial void OnIsIns1Changing(bool value);
    partial void OnIsIns1Changed();
    partial void OnIsIns2Changing(bool value);
    partial void OnIsIns2Changed();
    partial void OnIns2FormulasIXChanging(System.Nullable<short> value);
    partial void OnIns2FormulasIXChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ListInsurance()
		{
			this._InsuranceServices = new EntitySet<InsuranceService>(new Action<InsuranceService>(this.attach_InsuranceServices), new Action<InsuranceService>(this.detach_InsuranceServices));
			this._InsPhysicianExcludes = new EntitySet<InsPhysicianExclude>(new Action<InsPhysicianExclude>(this.attach_InsPhysicianExcludes), new Action<InsPhysicianExclude>(this.detach_InsPhysicianExcludes));
			this._InsRefPhysSpecExcludes = new EntitySet<InsRefPhysSpecExclude>(new Action<InsRefPhysSpecExclude>(this.attach_InsRefPhysSpecExcludes), new Action<InsRefPhysSpecExclude>(this.detach_InsRefPhysSpecExcludes));
			this._Ins2Formula = default(EntityRef<Ins2Formula>);
			OnCreated();
		}
		
		[Column(Storage="_InsuranceIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short InsuranceIX
		{
			get
			{
				return this._InsuranceIX;
			}
			set
			{
				if ((this._InsuranceIX != value))
				{
					this.OnInsuranceIXChanging(value);
					this.SendPropertyChanging();
					this._InsuranceIX = value;
					this.SendPropertyChanged("InsuranceIX");
					this.OnInsuranceIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_ContractStartDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ContractStartDate
		{
			get
			{
				return this._ContractStartDate;
			}
			set
			{
				if ((this._ContractStartDate != value))
				{
					this.OnContractStartDateChanging(value);
					this.SendPropertyChanging();
					this._ContractStartDate = value;
					this.SendPropertyChanged("ContractStartDate");
					this.OnContractStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ContractEndDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ContractEndDate
		{
			get
			{
				return this._ContractEndDate;
			}
			set
			{
				if ((this._ContractEndDate != value))
				{
					this.OnContractEndDateChanging(value);
					this.SendPropertyChanging();
					this._ContractEndDate = value;
					this.SendPropertyChanged("ContractEndDate");
					this.OnContractEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_PatientPercent", DbType="TinyInt NOT NULL")]
		public byte PatientPercent
		{
			get
			{
				return this._PatientPercent;
			}
			set
			{
				if ((this._PatientPercent != value))
				{
					this.OnPatientPercentChanging(value);
					this.SendPropertyChanging();
					this._PatientPercent = value;
					this.SendPropertyChanged("PatientPercent");
					this.OnPatientPercentChanged();
				}
			}
		}
		
		[Column(Storage="_InsurerPartLimit", DbType="Int NOT NULL")]
		public int InsurerPartLimit
		{
			get
			{
				return this._InsurerPartLimit;
			}
			set
			{
				if ((this._InsurerPartLimit != value))
				{
					this.OnInsurerPartLimitChanging(value);
					this.SendPropertyChanging();
					this._InsurerPartLimit = value;
					this.SendPropertyChanged("InsurerPartLimit");
					this.OnInsurerPartLimitChanged();
				}
			}
		}
		
		[Column(Storage="_IsIns1", DbType="Bit NOT NULL")]
		public bool IsIns1
		{
			get
			{
				return this._IsIns1;
			}
			set
			{
				if ((this._IsIns1 != value))
				{
					this.OnIsIns1Changing(value);
					this.SendPropertyChanging();
					this._IsIns1 = value;
					this.SendPropertyChanged("IsIns1");
					this.OnIsIns1Changed();
				}
			}
		}
		
		[Column(Storage="_IsIns2", DbType="Bit NOT NULL")]
		public bool IsIns2
		{
			get
			{
				return this._IsIns2;
			}
			set
			{
				if ((this._IsIns2 != value))
				{
					this.OnIsIns2Changing(value);
					this.SendPropertyChanging();
					this._IsIns2 = value;
					this.SendPropertyChanged("IsIns2");
					this.OnIsIns2Changed();
				}
			}
		}
		
		[Column(Storage="_Ins2FormulasIX", DbType="SmallInt")]
		public System.Nullable<short> Ins2FormulasIX
		{
			get
			{
				return this._Ins2FormulasIX;
			}
			set
			{
				if ((this._Ins2FormulasIX != value))
				{
					if (this._Ins2Formula.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIns2FormulasIXChanging(value);
					this.SendPropertyChanging();
					this._Ins2FormulasIX = value;
					this.SendPropertyChanged("Ins2FormulasIX");
					this.OnIns2FormulasIXChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="ListInsurance_InsuranceService", Storage="_InsuranceServices", ThisKey="InsuranceIX", OtherKey="InsIX")]
		public EntitySet<InsuranceService> InsuranceServices
		{
			get
			{
				return this._InsuranceServices;
			}
			set
			{
				this._InsuranceServices.Assign(value);
			}
		}
		
		[Association(Name="ListInsurance_InsPhysicianExclude", Storage="_InsPhysicianExcludes", ThisKey="InsuranceIX", OtherKey="InsIX")]
		public EntitySet<InsPhysicianExclude> InsPhysicianExcludes
		{
			get
			{
				return this._InsPhysicianExcludes;
			}
			set
			{
				this._InsPhysicianExcludes.Assign(value);
			}
		}
		
		[Association(Name="ListInsurance_InsRefPhysSpecExclude", Storage="_InsRefPhysSpecExcludes", ThisKey="InsuranceIX", OtherKey="InsIX")]
		public EntitySet<InsRefPhysSpecExclude> InsRefPhysSpecExcludes
		{
			get
			{
				return this._InsRefPhysSpecExcludes;
			}
			set
			{
				this._InsRefPhysSpecExcludes.Assign(value);
			}
		}
		
		[Association(Name="Ins2Formula_ListInsurance", Storage="_Ins2Formula", ThisKey="Ins2FormulasIX", OtherKey="ID", IsForeignKey=true)]
		public Ins2Formula Ins2Formula
		{
			get
			{
				return this._Ins2Formula.Entity;
			}
			set
			{
				Ins2Formula previousValue = this._Ins2Formula.Entity;
				if (((previousValue != value) 
							|| (this._Ins2Formula.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ins2Formula.Entity = null;
						previousValue.ListInsurances.Remove(this);
					}
					this._Ins2Formula.Entity = value;
					if ((value != null))
					{
						value.ListInsurances.Add(this);
						this._Ins2FormulasIX = value.ID;
					}
					else
					{
						this._Ins2FormulasIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("Ins2Formula");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsuranceServices(InsuranceService entity)
		{
			this.SendPropertyChanging();
			entity.ListInsurance = this;
		}
		
		private void detach_InsuranceServices(InsuranceService entity)
		{
			this.SendPropertyChanging();
			entity.ListInsurance = null;
		}
		
		private void attach_InsPhysicianExcludes(InsPhysicianExclude entity)
		{
			this.SendPropertyChanging();
			entity.ListInsurance = this;
		}
		
		private void detach_InsPhysicianExcludes(InsPhysicianExclude entity)
		{
			this.SendPropertyChanging();
			entity.ListInsurance = null;
		}
		
		private void attach_InsRefPhysSpecExcludes(InsRefPhysSpecExclude entity)
		{
			this.SendPropertyChanging();
			entity.ListInsurance = this;
		}
		
		private void detach_InsRefPhysSpecExcludes(InsRefPhysSpecExclude entity)
		{
			this.SendPropertyChanging();
			entity.ListInsurance = null;
		}
	}
	
	[Table(Name="Insurances.InsuranceServices")]
	public partial class InsuranceService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _InsIX;
		
		private short _ServiceIX;
		
		private bool _IsCover;
		
		private int _InsPrice;
		
		private int _InsPart;
		
		private int _PatientPayable;
		
		private EntityRef<ServicesList> _ServicesList;
		
		private EntityRef<ListInsurance> _ListInsurance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsIXChanging(short value);
    partial void OnInsIXChanged();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnIsCoverChanging(bool value);
    partial void OnIsCoverChanged();
    partial void OnInsPriceChanging(int value);
    partial void OnInsPriceChanged();
    partial void OnInsPartChanging(int value);
    partial void OnInsPartChanged();
    partial void OnPatientPayableChanging(int value);
    partial void OnPatientPayableChanged();
    #endregion
		
		public InsuranceService()
		{
			this._ServicesList = default(EntityRef<ServicesList>);
			this._ListInsurance = default(EntityRef<ListInsurance>);
			OnCreated();
		}
		
		[Column(Storage="_InsIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short InsIX
		{
			get
			{
				return this._InsIX;
			}
			set
			{
				if ((this._InsIX != value))
				{
					if (this._ListInsurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsIXChanging(value);
					this.SendPropertyChanging();
					this._InsIX = value;
					this.SendPropertyChanged("InsIX");
					this.OnInsIXChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsCover", DbType="Bit NOT NULL")]
		public bool IsCover
		{
			get
			{
				return this._IsCover;
			}
			set
			{
				if ((this._IsCover != value))
				{
					this.OnIsCoverChanging(value);
					this.SendPropertyChanging();
					this._IsCover = value;
					this.SendPropertyChanged("IsCover");
					this.OnIsCoverChanged();
				}
			}
		}
		
		[Column(Storage="_InsPrice", DbType="Int NOT NULL")]
		public int InsPrice
		{
			get
			{
				return this._InsPrice;
			}
			set
			{
				if ((this._InsPrice != value))
				{
					this.OnInsPriceChanging(value);
					this.SendPropertyChanging();
					this._InsPrice = value;
					this.SendPropertyChanged("InsPrice");
					this.OnInsPriceChanged();
				}
			}
		}
		
		[Column(Storage="_InsPart", DbType="Int NOT NULL")]
		public int InsPart
		{
			get
			{
				return this._InsPart;
			}
			set
			{
				if ((this._InsPart != value))
				{
					this.OnInsPartChanging(value);
					this.SendPropertyChanging();
					this._InsPart = value;
					this.SendPropertyChanged("InsPart");
					this.OnInsPartChanged();
				}
			}
		}
		
		[Column(Storage="_PatientPayable", DbType="Int NOT NULL")]
		public int PatientPayable
		{
			get
			{
				return this._PatientPayable;
			}
			set
			{
				if ((this._PatientPayable != value))
				{
					this.OnPatientPayableChanging(value);
					this.SendPropertyChanging();
					this._PatientPayable = value;
					this.SendPropertyChanged("PatientPayable");
					this.OnPatientPayableChanged();
				}
			}
		}
		
		[Association(Name="ServicesList_InsuranceService", Storage="_ServicesList", ThisKey="ServiceIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesList ServicesList
		{
			get
			{
				return this._ServicesList.Entity;
			}
			set
			{
				ServicesList previousValue = this._ServicesList.Entity;
				if (((previousValue != value) 
							|| (this._ServicesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesList.Entity = null;
						previousValue.InsuranceServices.Remove(this);
					}
					this._ServicesList.Entity = value;
					if ((value != null))
					{
						value.InsuranceServices.Add(this);
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesList");
				}
			}
		}
		
		[Association(Name="ListInsurance_InsuranceService", Storage="_ListInsurance", ThisKey="InsIX", OtherKey="InsuranceIX", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ListInsurance ListInsurance
		{
			get
			{
				return this._ListInsurance.Entity;
			}
			set
			{
				ListInsurance previousValue = this._ListInsurance.Entity;
				if (((previousValue != value) 
							|| (this._ListInsurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ListInsurance.Entity = null;
						previousValue.InsuranceServices.Remove(this);
					}
					this._ListInsurance.Entity = value;
					if ((value != null))
					{
						value.InsuranceServices.Add(this);
						this._InsIX = value.InsuranceIX;
					}
					else
					{
						this._InsIX = default(short);
					}
					this.SendPropertyChanged("ListInsurance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.Banks")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<RefTransAddinData> _RefTransactionAdditionalDatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Bank()
		{
			this._RefTransactionAdditionalDatas = new EntitySet<RefTransAddinData>(new Action<RefTransAddinData>(this.attach_RefTransactionAdditionalDatas), new Action<RefTransAddinData>(this.detach_RefTransactionAdditionalDatas));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Bank_RefTransAddinData", Storage="_RefTransactionAdditionalDatas", ThisKey="ID", OtherKey="BankIX")]
		public EntitySet<RefTransAddinData> RefTransAddinDatas
		{
			get
			{
				return this._RefTransactionAdditionalDatas;
			}
			set
			{
				this._RefTransactionAdditionalDatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefTransactionAdditionalDatas(RefTransAddinData entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_RefTransactionAdditionalDatas(RefTransAddinData entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[Table(Name="Accounting.CostsAndDiscountsTypes")]
	public partial class CostsAndDiscountsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private bool _IsCost;
		
		private string _Name;
		
		private int _Limitation;
		
		private string _Description;
		
		private EntitySet<RefCostsAndDiscount> _RefCostsAndDiscounts;
		
		private EntitySet<CostsAndDiscountsUsersExclude> _CostsAndDiscountsUsersExcludes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsCostChanging(bool value);
    partial void OnIsCostChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLimitationChanging(int value);
    partial void OnLimitationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CostsAndDiscountsType()
		{
			this._RefCostsAndDiscounts = new EntitySet<RefCostsAndDiscount>(new Action<RefCostsAndDiscount>(this.attach_RefCostsAndDiscounts), new Action<RefCostsAndDiscount>(this.detach_RefCostsAndDiscounts));
			this._CostsAndDiscountsUsersExcludes = new EntitySet<CostsAndDiscountsUsersExclude>(new Action<CostsAndDiscountsUsersExclude>(this.attach_CostsAndDiscountsUsersExcludes), new Action<CostsAndDiscountsUsersExclude>(this.detach_CostsAndDiscountsUsersExcludes));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsCost", DbType="Bit NOT NULL")]
		public bool IsCost
		{
			get
			{
				return this._IsCost;
			}
			set
			{
				if ((this._IsCost != value))
				{
					this.OnIsCostChanging(value);
					this.SendPropertyChanging();
					this._IsCost = value;
					this.SendPropertyChanged("IsCost");
					this.OnIsCostChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Limitation", DbType="Int NOT NULL")]
		public int Limitation
		{
			get
			{
				return this._Limitation;
			}
			set
			{
				if ((this._Limitation != value))
				{
					this.OnLimitationChanging(value);
					this.SendPropertyChanging();
					this._Limitation = value;
					this.SendPropertyChanged("Limitation");
					this.OnLimitationChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="CostsAndDiscountsType_RefCostsAndDiscount", Storage="_RefCostsAndDiscounts", ThisKey="ID", OtherKey="CostIXOrDiscountIX")]
		public EntitySet<RefCostsAndDiscount> RefCostsAndDiscounts
		{
			get
			{
				return this._RefCostsAndDiscounts;
			}
			set
			{
				this._RefCostsAndDiscounts.Assign(value);
			}
		}
		
		[Association(Name="CostsAndDiscountsType_CostsAndDiscountsUsersExclude", Storage="_CostsAndDiscountsUsersExcludes", ThisKey="ID", OtherKey="CDIX")]
		public EntitySet<CostsAndDiscountsUsersExclude> CostsAndDiscountsUsersExcludes
		{
			get
			{
				return this._CostsAndDiscountsUsersExcludes;
			}
			set
			{
				this._CostsAndDiscountsUsersExcludes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefCostsAndDiscounts(RefCostsAndDiscount entity)
		{
			this.SendPropertyChanging();
			entity.CostsAndDiscountsType = this;
		}
		
		private void detach_RefCostsAndDiscounts(RefCostsAndDiscount entity)
		{
			this.SendPropertyChanging();
			entity.CostsAndDiscountsType = null;
		}
		
		private void attach_CostsAndDiscountsUsersExcludes(CostsAndDiscountsUsersExclude entity)
		{
			this.SendPropertyChanging();
			entity.CostsAndDiscountsType = this;
		}
		
		private void detach_CostsAndDiscountsUsersExcludes(CostsAndDiscountsUsersExclude entity)
		{
			this.SendPropertyChanging();
			entity.CostsAndDiscountsType = null;
		}
	}
	
	[Table(Name="Accounting.Cashes")]
	public partial class Cash : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<CashiersCash> _CashiersCashes;
		
		private EntitySet<RefTransaction> _RefTransactions;
		
		private EntitySet<CashLog> _CashLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Cash()
		{
			this._CashiersCashes = new EntitySet<CashiersCash>(new Action<CashiersCash>(this.attach_CashiersCashes), new Action<CashiersCash>(this.detach_CashiersCashes));
			this._RefTransactions = new EntitySet<RefTransaction>(new Action<RefTransaction>(this.attach_RefTransactions), new Action<RefTransaction>(this.detach_RefTransactions));
			this._CashLogs = new EntitySet<CashLog>(new Action<CashLog>(this.attach_CashLogs), new Action<CashLog>(this.detach_CashLogs));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Cash_CashiersCash", Storage="_CashiersCashes", ThisKey="ID", OtherKey="CashIX")]
		public EntitySet<CashiersCash> CashiersCashes
		{
			get
			{
				return this._CashiersCashes;
			}
			set
			{
				this._CashiersCashes.Assign(value);
			}
		}
		
		[Association(Name="Cash_RefTransaction", Storage="_RefTransactions", ThisKey="ID", OtherKey="CashIX")]
		public EntitySet<RefTransaction> RefTransactions
		{
			get
			{
				return this._RefTransactions;
			}
			set
			{
				this._RefTransactions.Assign(value);
			}
		}
		
		[Association(Name="Cash_CashLog", Storage="_CashLogs", ThisKey="ID", OtherKey="CashIX")]
		public EntitySet<CashLog> CashLogs
		{
			get
			{
				return this._CashLogs;
			}
			set
			{
				this._CashLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CashiersCashes(CashiersCash entity)
		{
			this.SendPropertyChanging();
			entity.Cash = this;
		}
		
		private void detach_CashiersCashes(CashiersCash entity)
		{
			this.SendPropertyChanging();
			entity.Cash = null;
		}
		
		private void attach_RefTransactions(RefTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Cash = this;
		}
		
		private void detach_RefTransactions(RefTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Cash = null;
		}
		
		private void attach_CashLogs(CashLog entity)
		{
			this.SendPropertyChanging();
			entity.Cash = this;
		}
		
		private void detach_CashLogs(CashLog entity)
		{
			this.SendPropertyChanging();
			entity.Cash = null;
		}
	}
	
	[Table(Name="Accounting.CashiersCashes")]
	public partial class CashiersCash : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CashierIX;
		
		private short _CashIX;
		
		private EntityRef<Cash> _Cash;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCashierIXChanging(short value);
    partial void OnCashierIXChanged();
    partial void OnCashIXChanging(short value);
    partial void OnCashIXChanged();
    #endregion
		
		public CashiersCash()
		{
			this._Cash = default(EntityRef<Cash>);
			OnCreated();
		}
		
		[Column(Storage="_CashierIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CashierIX
		{
			get
			{
				return this._CashierIX;
			}
			set
			{
				if ((this._CashierIX != value))
				{
					this.OnCashierIXChanging(value);
					this.SendPropertyChanging();
					this._CashierIX = value;
					this.SendPropertyChanged("CashierIX");
					this.OnCashierIXChanged();
				}
			}
		}
		
		[Column(Storage="_CashIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CashIX
		{
			get
			{
				return this._CashIX;
			}
			set
			{
				if ((this._CashIX != value))
				{
					if (this._Cash.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCashIXChanging(value);
					this.SendPropertyChanging();
					this._CashIX = value;
					this.SendPropertyChanged("CashIX");
					this.OnCashIXChanged();
				}
			}
		}
		
		[Association(Name="Cash_CashiersCash", Storage="_Cash", ThisKey="CashIX", OtherKey="ID", IsForeignKey=true)]
		public Cash Cash
		{
			get
			{
				return this._Cash.Entity;
			}
			set
			{
				Cash previousValue = this._Cash.Entity;
				if (((previousValue != value) 
							|| (this._Cash.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cash.Entity = null;
						previousValue.CashiersCashes.Remove(this);
					}
					this._Cash.Entity = value;
					if ((value != null))
					{
						value.CashiersCashes.Add(this);
						this._CashIX = value.ID;
					}
					else
					{
						this._CashIX = default(short);
					}
					this.SendPropertyChanged("Cash");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Documents.Texts")]
	public partial class DocText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private System.Nullable<short> _ParentIX;
		
		private string _Name;
		
		private System.Nullable<short> _Code;
		
		private bool _IsGroup;
		
		private string _TextsData;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnParentIXChanging(System.Nullable<short> value);
    partial void OnParentIXChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(System.Nullable<short> value);
    partial void OnCodeChanged();
    partial void OnIsGroupChanging(bool value);
    partial void OnIsGroupChanged();
    partial void OnTextsDataChanging(string value);
    partial void OnTextsDataChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DocText()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentIX", DbType="SmallInt")]
		public System.Nullable<short> ParentIX
		{
			get
			{
				return this._ParentIX;
			}
			set
			{
				if ((this._ParentIX != value))
				{
					this.OnParentIXChanging(value);
					this.SendPropertyChanging();
					this._ParentIX = value;
					this.SendPropertyChanged("ParentIX");
					this.OnParentIXChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="SmallInt")]
		public System.Nullable<short> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsGroup", DbType="Bit NOT NULL")]
		public bool IsGroup
		{
			get
			{
				return this._IsGroup;
			}
			set
			{
				if ((this._IsGroup != value))
				{
					this.OnIsGroupChanging(value);
					this.SendPropertyChanging();
					this._IsGroup = value;
					this.SendPropertyChanged("IsGroup");
					this.OnIsGroupChanged();
				}
			}
		}
		
		[Column(Storage="_TextsData", DbType="NVarChar(MAX)")]
		public string TextsData
		{
			get
			{
				return this._TextsData;
			}
			set
			{
				if ((this._TextsData != value))
				{
					this.OnTextsDataChanging(value);
					this.SendPropertyChanging();
					this._TextsData = value;
					this.SendPropertyChanged("TextsData");
					this.OnTextsDataChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Documents.Type")]
	public partial class DocType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Title;
		
		private string _Description;
		
		private EntityRef<UsersDefaultDocType> _UsersDefaultDocType;
		
		private EntitySet<RefDocument> _RefDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DocType()
		{
			this._UsersDefaultDocType = default(EntityRef<UsersDefaultDocType>);
			this._RefDocuments = new EntitySet<RefDocument>(new Action<RefDocument>(this.attach_RefDocuments), new Action<RefDocument>(this.detach_RefDocuments));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="DocType_UsersDefaultDocType", Storage="_UsersDefaultDocType", ThisKey="ID", OtherKey="UserIX", IsUnique=true, IsForeignKey=false)]
		public UsersDefaultDocType UsersDefaultDocType
		{
			get
			{
				return this._UsersDefaultDocType.Entity;
			}
			set
			{
				UsersDefaultDocType previousValue = this._UsersDefaultDocType.Entity;
				if (((previousValue != value) 
							|| (this._UsersDefaultDocType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersDefaultDocType.Entity = null;
						previousValue.DocType = null;
					}
					this._UsersDefaultDocType.Entity = value;
					if ((value != null))
					{
						value.DocType = this;
					}
					this.SendPropertyChanged("UsersDefaultDocType");
				}
			}
		}
		
		[Association(Name="DocType_RefDocument", Storage="_RefDocuments", ThisKey="ID", OtherKey="TypeIX")]
		public EntitySet<RefDocument> RefDocuments
		{
			get
			{
				return this._RefDocuments;
			}
			set
			{
				this._RefDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefDocuments(RefDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocType = this;
		}
		
		private void detach_RefDocuments(RefDocument entity)
		{
			this.SendPropertyChanging();
			entity.DocType = null;
		}
	}
	
	[Table(Name="Accounting.RefCostsAndDiscounts")]
	public partial class RefCostsAndDiscount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Date;
		
		private int _ReferralIX;
		
		private short _CostIXOrDiscountIX;
		
		private short _CashierIX;
		
		private int _Value;
		
		private string _Description;
		
		private EntityRef<CostsAndDiscountsType> _CostsAndDiscountsType;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnReferralIXChanging(int value);
    partial void OnReferralIXChanged();
    partial void OnCostIXOrDiscountIXChanging(short value);
    partial void OnCostIXOrDiscountIXChanged();
    partial void OnCashierIXChanging(short value);
    partial void OnCashierIXChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RefCostsAndDiscount()
		{
			this._CostsAndDiscountsType = default(EntityRef<CostsAndDiscountsType>);
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralIX", DbType="Int NOT NULL")]
		public int ReferralIX
		{
			get
			{
				return this._ReferralIX;
			}
			set
			{
				if ((this._ReferralIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferralIXChanging(value);
					this.SendPropertyChanging();
					this._ReferralIX = value;
					this.SendPropertyChanged("ReferralIX");
					this.OnReferralIXChanged();
				}
			}
		}
		
		[Column(Storage="_CostIXOrDiscountIX", DbType="SmallInt NOT NULL")]
		public short CostIXOrDiscountIX
		{
			get
			{
				return this._CostIXOrDiscountIX;
			}
			set
			{
				if ((this._CostIXOrDiscountIX != value))
				{
					if (this._CostsAndDiscountsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostIXOrDiscountIXChanging(value);
					this.SendPropertyChanging();
					this._CostIXOrDiscountIX = value;
					this.SendPropertyChanged("CostIXOrDiscountIX");
					this.OnCostIXOrDiscountIXChanged();
				}
			}
		}
		
		[Column(Storage="_CashierIX", DbType="SmallInt NOT NULL")]
		public short CashierIX
		{
			get
			{
				return this._CashierIX;
			}
			set
			{
				if ((this._CashierIX != value))
				{
					this.OnCashierIXChanging(value);
					this.SendPropertyChanging();
					this._CashierIX = value;
					this.SendPropertyChanged("CashierIX");
					this.OnCashierIXChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="CostsAndDiscountsType_RefCostsAndDiscount", Storage="_CostsAndDiscountsType", ThisKey="CostIXOrDiscountIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CostsAndDiscountsType CostsAndDiscountsType
		{
			get
			{
				return this._CostsAndDiscountsType.Entity;
			}
			set
			{
				CostsAndDiscountsType previousValue = this._CostsAndDiscountsType.Entity;
				if (((previousValue != value) 
							|| (this._CostsAndDiscountsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostsAndDiscountsType.Entity = null;
						previousValue.RefCostsAndDiscounts.Remove(this);
					}
					this._CostsAndDiscountsType.Entity = value;
					if ((value != null))
					{
						value.RefCostsAndDiscounts.Add(this);
						this._CostIXOrDiscountIX = value.ID;
					}
					else
					{
						this._CostIXOrDiscountIX = default(short);
					}
					this.SendPropertyChanged("CostsAndDiscountsType");
				}
			}
		}
		
		[Association(Name="RefList_RefCostsAndDiscount", Storage="_RefList", ThisKey="ReferralIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.RefCostsAndDiscounts.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.RefCostsAndDiscounts.Add(this);
						this._ReferralIX = value.ID;
					}
					else
					{
						this._ReferralIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Reports.BillsPrintLog")]
	public partial class BillsPrintLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private short _BillIX;
		
		private int _RefIX;
		
		private short _UserIX;
		
		private System.DateTime _PrintDate;
		
		private EntityRef<BillTemplate> _BillTemplate;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBillIXChanging(short value);
    partial void OnBillIXChanged();
    partial void OnRefIXChanging(int value);
    partial void OnRefIXChanged();
    partial void OnUserIXChanging(short value);
    partial void OnUserIXChanged();
    partial void OnPrintDateChanging(System.DateTime value);
    partial void OnPrintDateChanged();
    #endregion
		
		public BillsPrintLog()
		{
			this._BillTemplate = default(EntityRef<BillTemplate>);
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillIX", DbType="SmallInt NOT NULL")]
		public short BillIX
		{
			get
			{
				return this._BillIX;
			}
			set
			{
				if ((this._BillIX != value))
				{
					if (this._BillTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIXChanging(value);
					this.SendPropertyChanging();
					this._BillIX = value;
					this.SendPropertyChanged("BillIX");
					this.OnBillIXChanged();
				}
			}
		}
		
		[Column(Storage="_RefIX", DbType="Int NOT NULL")]
		public int RefIX
		{
			get
			{
				return this._RefIX;
			}
			set
			{
				if ((this._RefIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefIXChanging(value);
					this.SendPropertyChanging();
					this._RefIX = value;
					this.SendPropertyChanged("RefIX");
					this.OnRefIXChanged();
				}
			}
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt NOT NULL")]
		public short UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_PrintDate", DbType="DateTime NOT NULL")]
		public System.DateTime PrintDate
		{
			get
			{
				return this._PrintDate;
			}
			set
			{
				if ((this._PrintDate != value))
				{
					this.OnPrintDateChanging(value);
					this.SendPropertyChanging();
					this._PrintDate = value;
					this.SendPropertyChanged("PrintDate");
					this.OnPrintDateChanged();
				}
			}
		}
		
		[Association(Name="BillTemplate_BillsPrintLog", Storage="_BillTemplate", ThisKey="BillIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BillTemplate BillTemplate
		{
			get
			{
				return this._BillTemplate.Entity;
			}
			set
			{
				BillTemplate previousValue = this._BillTemplate.Entity;
				if (((previousValue != value) 
							|| (this._BillTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillTemplate.Entity = null;
						previousValue.BillsPrintLogs.Remove(this);
					}
					this._BillTemplate.Entity = value;
					if ((value != null))
					{
						value.BillsPrintLogs.Add(this);
						this._BillIX = value.ID;
					}
					else
					{
						this._BillIX = default(short);
					}
					this.SendPropertyChanged("BillTemplate");
				}
			}
		}
		
		[Association(Name="RefList_BillsPrintLog", Storage="_RefList", ThisKey="RefIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.BillsPrintLogs.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.BillsPrintLogs.Add(this);
						this._RefIX = value.ID;
					}
					else
					{
						this._RefIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.RefTransaction")]
	public partial class RefTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReferralIX;
		
		private bool _IsActive;
		
		private System.DateTime _OccuredDate;
		
		private short _CashierIX;
		
		private System.Nullable<short> _CashIX;
		
		private int _Value;
		
		private string _Description;
		
		private EntityRef<RefTransAddinData> _RefTransactionAdditionalData;
		
		private EntityRef<Cash> _Cash;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReferralIXChanging(int value);
    partial void OnReferralIXChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnOccuredDateChanging(System.DateTime value);
    partial void OnOccuredDateChanged();
    partial void OnCashierIXChanging(short value);
    partial void OnCashierIXChanged();
    partial void OnCashIXChanging(System.Nullable<short> value);
    partial void OnCashIXChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RefTransaction()
		{
			this._RefTransactionAdditionalData = default(EntityRef<RefTransAddinData>);
			this._Cash = default(EntityRef<Cash>);
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralIX", DbType="Int NOT NULL")]
		public int ReferralIX
		{
			get
			{
				return this._ReferralIX;
			}
			set
			{
				if ((this._ReferralIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferralIXChanging(value);
					this.SendPropertyChanging();
					this._ReferralIX = value;
					this.SendPropertyChanged("ReferralIX");
					this.OnReferralIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_OccuredDate", DbType="DateTime NOT NULL")]
		public System.DateTime OccuredDate
		{
			get
			{
				return this._OccuredDate;
			}
			set
			{
				if ((this._OccuredDate != value))
				{
					this.OnOccuredDateChanging(value);
					this.SendPropertyChanging();
					this._OccuredDate = value;
					this.SendPropertyChanged("OccuredDate");
					this.OnOccuredDateChanged();
				}
			}
		}
		
		[Column(Storage="_CashierIX", DbType="SmallInt NOT NULL")]
		public short CashierIX
		{
			get
			{
				return this._CashierIX;
			}
			set
			{
				if ((this._CashierIX != value))
				{
					this.OnCashierIXChanging(value);
					this.SendPropertyChanging();
					this._CashierIX = value;
					this.SendPropertyChanged("CashierIX");
					this.OnCashierIXChanged();
				}
			}
		}
		
		[Column(Storage="_CashIX", DbType="SmallInt")]
		public System.Nullable<short> CashIX
		{
			get
			{
				return this._CashIX;
			}
			set
			{
				if ((this._CashIX != value))
				{
					if (this._Cash.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCashIXChanging(value);
					this.SendPropertyChanging();
					this._CashIX = value;
					this.SendPropertyChanged("CashIX");
					this.OnCashIXChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="RefTransaction_RefTransAddinData", Storage="_RefTransactionAdditionalData", ThisKey="ID", OtherKey="RefTransactionIX", IsUnique=true, IsForeignKey=false)]
		public RefTransAddinData RefTransactionAdditionalData
		{
			get
			{
				return this._RefTransactionAdditionalData.Entity;
			}
			set
			{
				RefTransAddinData previousValue = this._RefTransactionAdditionalData.Entity;
				if (((previousValue != value) 
							|| (this._RefTransactionAdditionalData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefTransactionAdditionalData.Entity = null;
						previousValue.RefTransaction = null;
					}
					this._RefTransactionAdditionalData.Entity = value;
					if ((value != null))
					{
						value.RefTransaction = this;
					}
					this.SendPropertyChanged("RefTransactionAdditionalData");
				}
			}
		}
		
		[Association(Name="Cash_RefTransaction", Storage="_Cash", ThisKey="CashIX", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Cash Cash
		{
			get
			{
				return this._Cash.Entity;
			}
			set
			{
				Cash previousValue = this._Cash.Entity;
				if (((previousValue != value) 
							|| (this._Cash.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cash.Entity = null;
						previousValue.RefTransactions.Remove(this);
					}
					this._Cash.Entity = value;
					if ((value != null))
					{
						value.RefTransactions.Add(this);
						this._CashIX = value.ID;
					}
					else
					{
						this._CashIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("Cash");
				}
			}
		}
		
		[Association(Name="RefList_RefTransaction", Storage="_RefList", ThisKey="ReferralIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.RefTransactions.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.RefTransactions.Add(this);
						this._ReferralIX = value.ID;
					}
					else
					{
						this._ReferralIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.RefTransactionAdditionalData")]
	public partial class RefTransAddinData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RefTransactionIX;
		
		private System.Nullable<byte> _PayType;
		
		private System.Nullable<short> _BankIX;
		
		private string _BranchName;
		
		private string _BranchCode;
		
		private System.Nullable<System.DateTime> _CheckDate;
		
		private string _CheckNumber;
		
		private System.Nullable<byte> _AccountType;
		
		private string _AccountNumber;
		
		private string _Description;
		
		private EntityRef<Bank> _Bank;
		
		private EntityRef<RefTransaction> _RefTransaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefTransactionIXChanging(int value);
    partial void OnRefTransactionIXChanged();
    partial void OnPayTypeChanging(System.Nullable<byte> value);
    partial void OnPayTypeChanged();
    partial void OnBankIXChanging(System.Nullable<short> value);
    partial void OnBankIXChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    partial void OnCheckDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckDateChanged();
    partial void OnCheckNumberChanging(string value);
    partial void OnCheckNumberChanged();
    partial void OnAccountTypeChanging(System.Nullable<byte> value);
    partial void OnAccountTypeChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RefTransAddinData()
		{
			this._Bank = default(EntityRef<Bank>);
			this._RefTransaction = default(EntityRef<RefTransaction>);
			OnCreated();
		}
		
		[Column(Storage="_RefTransactionIX", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RefTransactionIX
		{
			get
			{
				return this._RefTransactionIX;
			}
			set
			{
				if ((this._RefTransactionIX != value))
				{
					if (this._RefTransaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefTransactionIXChanging(value);
					this.SendPropertyChanging();
					this._RefTransactionIX = value;
					this.SendPropertyChanged("RefTransactionIX");
					this.OnRefTransactionIXChanged();
				}
			}
		}
		
		[Column(Storage="_PayType", DbType="TinyInt")]
		public System.Nullable<byte> PayType
		{
			get
			{
				return this._PayType;
			}
			set
			{
				if ((this._PayType != value))
				{
					this.OnPayTypeChanging(value);
					this.SendPropertyChanging();
					this._PayType = value;
					this.SendPropertyChanged("PayType");
					this.OnPayTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BankIX", DbType="SmallInt")]
		public System.Nullable<short> BankIX
		{
			get
			{
				return this._BankIX;
			}
			set
			{
				if ((this._BankIX != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIXChanging(value);
					this.SendPropertyChanging();
					this._BankIX = value;
					this.SendPropertyChanged("BankIX");
					this.OnBankIXChanged();
				}
			}
		}
		
		[Column(Storage="_BranchName", DbType="NVarChar(50)")]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[Column(Storage="_BranchCode", DbType="NVarChar(50)")]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CheckDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> CheckDate
		{
			get
			{
				return this._CheckDate;
			}
			set
			{
				if ((this._CheckDate != value))
				{
					this.OnCheckDateChanging(value);
					this.SendPropertyChanging();
					this._CheckDate = value;
					this.SendPropertyChanged("CheckDate");
					this.OnCheckDateChanged();
				}
			}
		}
		
		[Column(Storage="_CheckNumber", DbType="NVarChar(50)")]
		public string CheckNumber
		{
			get
			{
				return this._CheckNumber;
			}
			set
			{
				if ((this._CheckNumber != value))
				{
					this.OnCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._CheckNumber = value;
					this.SendPropertyChanged("CheckNumber");
					this.OnCheckNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AccountType", DbType="TinyInt")]
		public System.Nullable<byte> AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="NVarChar(50)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Bank_RefTransAddinData", Storage="_Bank", ThisKey="BankIX", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.RefTransAddinDatas.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.RefTransAddinDatas.Add(this);
						this._BankIX = value.ID;
					}
					else
					{
						this._BankIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[Association(Name="RefTransaction_RefTransAddinData", Storage="_RefTransaction", ThisKey="RefTransactionIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefTransaction RefTransaction
		{
			get
			{
				return this._RefTransaction.Entity;
			}
			set
			{
				RefTransaction previousValue = this._RefTransaction.Entity;
				if (((previousValue != value) 
							|| (this._RefTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefTransaction.Entity = null;
						previousValue.RefTransactionAdditionalData = null;
					}
					this._RefTransaction.Entity = value;
					if ((value != null))
					{
						value.RefTransactionAdditionalData = this;
						this._RefTransactionIX = value.ID;
					}
					else
					{
						this._RefTransactionIX = default(int);
					}
					this.SendPropertyChanged("RefTransaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Reports.DesignableReports")]
	public partial class DesignableReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Name;
		
		private string _Topic;
		
		private string _ColumnsData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTopicChanging(string value);
    partial void OnTopicChanged();
    partial void OnColumnsDataChanging(string value);
    partial void OnColumnsDataChanged();
    #endregion
		
		public DesignableReport()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Topic", DbType="NVarChar(50)")]
		public string Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					this.OnTopicChanging(value);
					this.SendPropertyChanging();
					this._Topic = value;
					this.SendPropertyChanged("Topic");
					this.OnTopicChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnsData", DbType="NVarChar(MAX)")]
		public string ColumnsData
		{
			get
			{
				return this._ColumnsData;
			}
			set
			{
				if ((this._ColumnsData != value))
				{
					this.OnColumnsDataChanging(value);
					this.SendPropertyChanging();
					this._ColumnsData = value;
					this.SendPropertyChanged("ColumnsData");
					this.OnColumnsDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Reports.DesignableReportsAdditionalColumn")]
	public partial class DesignableReportsAddinCol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _FieldName;
		
		private string _Title;
		
		private string _FieldFormula;
		
		private string _SelectedFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFieldFormulaChanging(string value);
    partial void OnFieldFormulaChanged();
    partial void OnSelectedFieldsChanging(string value);
    partial void OnSelectedFieldsChanged();
    #endregion
		
		public DesignableReportsAddinCol()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="NVarChar(50)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_FieldFormula", DbType="NVarChar(MAX)")]
		public string FieldFormula
		{
			get
			{
				return this._FieldFormula;
			}
			set
			{
				if ((this._FieldFormula != value))
				{
					this.OnFieldFormulaChanging(value);
					this.SendPropertyChanging();
					this._FieldFormula = value;
					this.SendPropertyChanged("FieldFormula");
					this.OnFieldFormulaChanged();
				}
			}
		}
		
		[Column(Storage="_SelectedFields", DbType="NVarChar(MAX)")]
		public string SelectedFields
		{
			get
			{
				return this._SelectedFields;
			}
			set
			{
				if ((this._SelectedFields != value))
				{
					this.OnSelectedFieldsChanging(value);
					this.SendPropertyChanging();
					this._SelectedFields = value;
					this.SendPropertyChanged("SelectedFields");
					this.OnSelectedFieldsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.CashLog")]
	public partial class CashLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private short _CashIX;
		
		private bool _IsClosed;
		
		private System.DateTime _StartDateTime;
		
		private System.Nullable<System.DateTime> _FinishDateTime;
		
		private short _OpenerCashierIX;
		
		private int _SupplyBegin;
		
		private System.Nullable<int> _SupplyEnd;
		
		private System.Nullable<short> _CloserCashierIX;
		
		private EntitySet<CashInputOutput> _CashInputOutputs;
		
		private EntityRef<Cash> _Cash;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCashIXChanging(short value);
    partial void OnCashIXChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    partial void OnStartDateTimeChanging(System.DateTime value);
    partial void OnStartDateTimeChanged();
    partial void OnFinishDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateTimeChanged();
    partial void OnOpenerCashierIXChanging(short value);
    partial void OnOpenerCashierIXChanged();
    partial void OnSupplyBeginChanging(int value);
    partial void OnSupplyBeginChanged();
    partial void OnSupplyEndChanging(System.Nullable<int> value);
    partial void OnSupplyEndChanged();
    partial void OnCloserCashierIXChanging(System.Nullable<short> value);
    partial void OnCloserCashierIXChanged();
    #endregion
		
		public CashLog()
		{
			this._CashInputOutputs = new EntitySet<CashInputOutput>(new Action<CashInputOutput>(this.attach_CashInputOutputs), new Action<CashInputOutput>(this.detach_CashInputOutputs));
			this._Cash = default(EntityRef<Cash>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CashIX", DbType="SmallInt NOT NULL")]
		public short CashIX
		{
			get
			{
				return this._CashIX;
			}
			set
			{
				if ((this._CashIX != value))
				{
					if (this._Cash.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCashIXChanging(value);
					this.SendPropertyChanging();
					this._CashIX = value;
					this.SendPropertyChanged("CashIX");
					this.OnCashIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[Column(Storage="_StartDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_FinishDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishDateTime
		{
			get
			{
				return this._FinishDateTime;
			}
			set
			{
				if ((this._FinishDateTime != value))
				{
					this.OnFinishDateTimeChanging(value);
					this.SendPropertyChanging();
					this._FinishDateTime = value;
					this.SendPropertyChanged("FinishDateTime");
					this.OnFinishDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_OpenerCashierIX", DbType="SmallInt NOT NULL")]
		public short OpenerCashierIX
		{
			get
			{
				return this._OpenerCashierIX;
			}
			set
			{
				if ((this._OpenerCashierIX != value))
				{
					this.OnOpenerCashierIXChanging(value);
					this.SendPropertyChanging();
					this._OpenerCashierIX = value;
					this.SendPropertyChanged("OpenerCashierIX");
					this.OnOpenerCashierIXChanged();
				}
			}
		}
		
		[Column(Storage="_SupplyBegin", DbType="Int NOT NULL")]
		public int SupplyBegin
		{
			get
			{
				return this._SupplyBegin;
			}
			set
			{
				if ((this._SupplyBegin != value))
				{
					this.OnSupplyBeginChanging(value);
					this.SendPropertyChanging();
					this._SupplyBegin = value;
					this.SendPropertyChanged("SupplyBegin");
					this.OnSupplyBeginChanged();
				}
			}
		}
		
		[Column(Storage="_SupplyEnd", DbType="Int")]
		public System.Nullable<int> SupplyEnd
		{
			get
			{
				return this._SupplyEnd;
			}
			set
			{
				if ((this._SupplyEnd != value))
				{
					this.OnSupplyEndChanging(value);
					this.SendPropertyChanging();
					this._SupplyEnd = value;
					this.SendPropertyChanged("SupplyEnd");
					this.OnSupplyEndChanged();
				}
			}
		}
		
		[Column(Storage="_CloserCashierIX", DbType="SmallInt")]
		public System.Nullable<short> CloserCashierIX
		{
			get
			{
				return this._CloserCashierIX;
			}
			set
			{
				if ((this._CloserCashierIX != value))
				{
					this.OnCloserCashierIXChanging(value);
					this.SendPropertyChanging();
					this._CloserCashierIX = value;
					this.SendPropertyChanged("CloserCashierIX");
					this.OnCloserCashierIXChanged();
				}
			}
		}
		
		[Association(Name="CashLog_CashInputOutput", Storage="_CashInputOutputs", ThisKey="ID", OtherKey="CashLogIX")]
		public EntitySet<CashInputOutput> CashInputOutputs
		{
			get
			{
				return this._CashInputOutputs;
			}
			set
			{
				this._CashInputOutputs.Assign(value);
			}
		}
		
		[Association(Name="Cash_CashLog", Storage="_Cash", ThisKey="CashIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Cash Cash
		{
			get
			{
				return this._Cash.Entity;
			}
			set
			{
				Cash previousValue = this._Cash.Entity;
				if (((previousValue != value) 
							|| (this._Cash.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cash.Entity = null;
						previousValue.CashLogs.Remove(this);
					}
					this._Cash.Entity = value;
					if ((value != null))
					{
						value.CashLogs.Add(this);
						this._CashIX = value.ID;
					}
					else
					{
						this._CashIX = default(short);
					}
					this.SendPropertyChanged("Cash");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CashInputOutputs(CashInputOutput entity)
		{
			this.SendPropertyChanging();
			entity.CashLog = this;
		}
		
		private void detach_CashInputOutputs(CashInputOutput entity)
		{
			this.SendPropertyChanging();
			entity.CashLog = null;
		}
	}
	
	[Table(Name="Accounting.CashInputOutput")]
	public partial class CashInputOutput : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CashLogIX;
		
		private System.Nullable<short> _CashierIX;
		
		private System.DateTime _OccuredDate;
		
		private bool _IsInput;
		
		private int _Value;
		
		private string _Description;
		
		private EntityRef<CashLog> _CashLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCashLogIXChanging(System.Nullable<int> value);
    partial void OnCashLogIXChanged();
    partial void OnCashierIXChanging(System.Nullable<short> value);
    partial void OnCashierIXChanged();
    partial void OnOccuredDateChanging(System.DateTime value);
    partial void OnOccuredDateChanged();
    partial void OnIsInputChanging(bool value);
    partial void OnIsInputChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CashInputOutput()
		{
			this._CashLog = default(EntityRef<CashLog>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CashLogIX", DbType="Int")]
		public System.Nullable<int> CashLogIX
		{
			get
			{
				return this._CashLogIX;
			}
			set
			{
				if ((this._CashLogIX != value))
				{
					if (this._CashLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCashLogIXChanging(value);
					this.SendPropertyChanging();
					this._CashLogIX = value;
					this.SendPropertyChanged("CashLogIX");
					this.OnCashLogIXChanged();
				}
			}
		}
		
		[Column(Storage="_CashierIX", DbType="SmallInt")]
		public System.Nullable<short> CashierIX
		{
			get
			{
				return this._CashierIX;
			}
			set
			{
				if ((this._CashierIX != value))
				{
					this.OnCashierIXChanging(value);
					this.SendPropertyChanging();
					this._CashierIX = value;
					this.SendPropertyChanged("CashierIX");
					this.OnCashierIXChanged();
				}
			}
		}
		
		[Column(Storage="_OccuredDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime OccuredDate
		{
			get
			{
				return this._OccuredDate;
			}
			set
			{
				if ((this._OccuredDate != value))
				{
					this.OnOccuredDateChanging(value);
					this.SendPropertyChanging();
					this._OccuredDate = value;
					this.SendPropertyChanged("OccuredDate");
					this.OnOccuredDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsInput", DbType="Bit NOT NULL")]
		public bool IsInput
		{
			get
			{
				return this._IsInput;
			}
			set
			{
				if ((this._IsInput != value))
				{
					this.OnIsInputChanging(value);
					this.SendPropertyChanging();
					this._IsInput = value;
					this.SendPropertyChanged("IsInput");
					this.OnIsInputChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="CashLog_CashInputOutput", Storage="_CashLog", ThisKey="CashLogIX", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public CashLog CashLog
		{
			get
			{
				return this._CashLog.Entity;
			}
			set
			{
				CashLog previousValue = this._CashLog.Entity;
				if (((previousValue != value) 
							|| (this._CashLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashLog.Entity = null;
						previousValue.CashInputOutputs.Remove(this);
					}
					this._CashLog.Entity = value;
					if ((value != null))
					{
						value.CashInputOutputs.Add(this);
						this._CashLogIX = value.ID;
					}
					else
					{
						this._CashLogIX = default(Nullable<int>);
					}
					this.SendPropertyChanged("CashLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.VW_SelectCashesReport")]
	public partial class VW_SelectCashesReport
	{
		
		private System.Nullable<long> _RowNo;
		
		private short _CashID;
		
		private string _CashName;
		
		private string _Description;
		
		private System.Nullable<int> _CashLogID;
		
		private string _CashStatus;
		
		private System.Nullable<short> _OpenerCashierIX;
		
		private string _OpenerCashierName;
		
		private System.Nullable<System.DateTime> _StartDateTime;
		
		private System.Nullable<int> _SupplyBegin;
		
		private System.Nullable<int> _StatutorySypply;
		
		private System.Nullable<int> _SupplyEnd;
		
		private System.Nullable<int> _InputsOutputsBalance;
		
		private System.Nullable<short> _CloserCashierIX;
		
		private string _CloserCashierName;
		
		private System.Nullable<System.DateTime> _FinishDateTime;
		
		public VW_SelectCashesReport()
		{
		}
		
		[Column(Storage="_RowNo", DbType="BigInt")]
		public System.Nullable<long> RowNo
		{
			get
			{
				return this._RowNo;
			}
			set
			{
				if ((this._RowNo != value))
				{
					this._RowNo = value;
				}
			}
		}
		
		[Column(Storage="_CashID", DbType="SmallInt NOT NULL")]
		public short CashID
		{
			get
			{
				return this._CashID;
			}
			set
			{
				if ((this._CashID != value))
				{
					this._CashID = value;
				}
			}
		}
		
		[Column(Storage="_CashName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CashName
		{
			get
			{
				return this._CashName;
			}
			set
			{
				if ((this._CashName != value))
				{
					this._CashName = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_CashLogID", DbType="Int")]
		public System.Nullable<int> CashLogID
		{
			get
			{
				return this._CashLogID;
			}
			set
			{
				if ((this._CashLogID != value))
				{
					this._CashLogID = value;
				}
			}
		}
		
		[Column(Storage="_CashStatus", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string CashStatus
		{
			get
			{
				return this._CashStatus;
			}
			set
			{
				if ((this._CashStatus != value))
				{
					this._CashStatus = value;
				}
			}
		}
		
		[Column(Storage="_OpenerCashierIX", DbType="SmallInt")]
		public System.Nullable<short> OpenerCashierIX
		{
			get
			{
				return this._OpenerCashierIX;
			}
			set
			{
				if ((this._OpenerCashierIX != value))
				{
					this._OpenerCashierIX = value;
				}
			}
		}
		
		[Column(Storage="_OpenerCashierName", DbType="NVarChar(41)")]
		public string OpenerCashierName
		{
			get
			{
				return this._OpenerCashierName;
			}
			set
			{
				if ((this._OpenerCashierName != value))
				{
					this._OpenerCashierName = value;
				}
			}
		}
		
		[Column(Storage="_StartDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this._StartDateTime = value;
				}
			}
		}
		
		[Column(Storage="_SupplyBegin", DbType="Int")]
		public System.Nullable<int> SupplyBegin
		{
			get
			{
				return this._SupplyBegin;
			}
			set
			{
				if ((this._SupplyBegin != value))
				{
					this._SupplyBegin = value;
				}
			}
		}
		
		[Column(Storage="_StatutorySypply", DbType="Int")]
		public System.Nullable<int> StatutorySypply
		{
			get
			{
				return this._StatutorySypply;
			}
			set
			{
				if ((this._StatutorySypply != value))
				{
					this._StatutorySypply = value;
				}
			}
		}
		
		[Column(Storage="_SupplyEnd", DbType="Int")]
		public System.Nullable<int> SupplyEnd
		{
			get
			{
				return this._SupplyEnd;
			}
			set
			{
				if ((this._SupplyEnd != value))
				{
					this._SupplyEnd = value;
				}
			}
		}
		
		[Column(Storage="_InputsOutputsBalance", DbType="Int")]
		public System.Nullable<int> InputsOutputsBalance
		{
			get
			{
				return this._InputsOutputsBalance;
			}
			set
			{
				if ((this._InputsOutputsBalance != value))
				{
					this._InputsOutputsBalance = value;
				}
			}
		}
		
		[Column(Storage="_CloserCashierIX", DbType="SmallInt")]
		public System.Nullable<short> CloserCashierIX
		{
			get
			{
				return this._CloserCashierIX;
			}
			set
			{
				if ((this._CloserCashierIX != value))
				{
					this._CloserCashierIX = value;
				}
			}
		}
		
		[Column(Storage="_CloserCashierName", DbType="NVarChar(41)")]
		public string CloserCashierName
		{
			get
			{
				return this._CloserCashierName;
			}
			set
			{
				if ((this._CloserCashierName != value))
				{
					this._CloserCashierName = value;
				}
			}
		}
		
		[Column(Storage="_FinishDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishDateTime
		{
			get
			{
				return this._FinishDateTime;
			}
			set
			{
				if ((this._FinishDateTime != value))
				{
					this._FinishDateTime = value;
				}
			}
		}
	}
	
	[Table(Name="Schedules.AdditionalColumnsAppCover")]
	public partial class SchAddinColsAppCover : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ApplicationIX;
		
		private short _FieldIX;
		
		private EntityRef<SchAddinColumns> _SchAddinColumns;
		
		private EntityRef<SchApplications> _SchApplications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIXChanging(short value);
    partial void OnApplicationIXChanged();
    partial void OnFieldIXChanging(short value);
    partial void OnFieldIXChanged();
    #endregion
		
		public SchAddinColsAppCover()
		{
			this._SchAddinColumns = default(EntityRef<SchAddinColumns>);
			this._SchApplications = default(EntityRef<SchApplications>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ApplicationIX
		{
			get
			{
				return this._ApplicationIX;
			}
			set
			{
				if ((this._ApplicationIX != value))
				{
					if (this._SchApplications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIXChanging(value);
					this.SendPropertyChanging();
					this._ApplicationIX = value;
					this.SendPropertyChanged("ApplicationIX");
					this.OnApplicationIXChanged();
				}
			}
		}
		
		[Column(Storage="_FieldIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short FieldIX
		{
			get
			{
				return this._FieldIX;
			}
			set
			{
				if ((this._FieldIX != value))
				{
					if (this._SchAddinColumns.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIXChanging(value);
					this.SendPropertyChanging();
					this._FieldIX = value;
					this.SendPropertyChanged("FieldIX");
					this.OnFieldIXChanged();
				}
			}
		}
		
		[Association(Name="SchAddinColumns_SchAddinColsAppCover", Storage="_SchAddinColumns", ThisKey="FieldIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchAddinColumns SchAddinColumns
		{
			get
			{
				return this._SchAddinColumns.Entity;
			}
			set
			{
				SchAddinColumns previousValue = this._SchAddinColumns.Entity;
				if (((previousValue != value) 
							|| (this._SchAddinColumns.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchAddinColumns.Entity = null;
						previousValue.SchAddinColsAppCovers.Remove(this);
					}
					this._SchAddinColumns.Entity = value;
					if ((value != null))
					{
						value.SchAddinColsAppCovers.Add(this);
						this._FieldIX = value.ID;
					}
					else
					{
						this._FieldIX = default(short);
					}
					this.SendPropertyChanged("SchAddinColumns");
				}
			}
		}
		
		[Association(Name="SchApplications_SchAddinColsAppCover", Storage="_SchApplications", ThisKey="ApplicationIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchApplications SchApplications
		{
			get
			{
				return this._SchApplications.Entity;
			}
			set
			{
				SchApplications previousValue = this._SchApplications.Entity;
				if (((previousValue != value) 
							|| (this._SchApplications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchApplications.Entity = null;
						previousValue.SchAddinColsAppCovers.Remove(this);
					}
					this._SchApplications.Entity = value;
					if ((value != null))
					{
						value.SchAddinColsAppCovers.Add(this);
						this._ApplicationIX = value.ID;
					}
					else
					{
						this._ApplicationIX = default(short);
					}
					this.SendPropertyChanged("SchApplications");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Reports.SavedSearch")]
	public partial class SavedSearch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Name;
		
		private string _ColumnsData;
		
		private string _FilterData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnColumnsDataChanging(string value);
    partial void OnColumnsDataChanged();
    partial void OnFilterDataChanging(string value);
    partial void OnFilterDataChanged();
    #endregion
		
		public SavedSearch()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnsData", DbType="NVarChar(MAX)")]
		public string ColumnsData
		{
			get
			{
				return this._ColumnsData;
			}
			set
			{
				if ((this._ColumnsData != value))
				{
					this.OnColumnsDataChanging(value);
					this.SendPropertyChanging();
					this._ColumnsData = value;
					this.SendPropertyChanged("ColumnsData");
					this.OnColumnsDataChanged();
				}
			}
		}
		
		[Column(Storage="_FilterData", DbType="NVarChar(MAX)")]
		public string FilterData
		{
			get
			{
				return this._FilterData;
			}
			set
			{
				if ((this._FilterData != value))
				{
					this.OnFilterDataChanging(value);
					this.SendPropertyChanging();
					this._FilterData = value;
					this.SendPropertyChanged("FilterData");
					this.OnFilterDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Documents.Templates")]
	public partial class DocTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private System.Nullable<short> _ParentIX;
		
		private string _Name;
		
		private System.Nullable<short> _Code;
		
		private bool _IsGroup;
		
		private System.Nullable<bool> _IsDefualt;
		
		private System.Data.Linq.Binary _TemplateData;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnParentIXChanging(System.Nullable<short> value);
    partial void OnParentIXChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(System.Nullable<short> value);
    partial void OnCodeChanged();
    partial void OnIsGroupChanging(bool value);
    partial void OnIsGroupChanged();
    partial void OnIsDefaultChanging(System.Nullable<bool> value);
    partial void OnIsDefaultChanged();
    partial void OnTemplateDataChanging(System.Data.Linq.Binary value);
    partial void OnTemplateDataChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DocTemplate()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentIX", DbType="SmallInt")]
		public System.Nullable<short> ParentIX
		{
			get
			{
				return this._ParentIX;
			}
			set
			{
				if ((this._ParentIX != value))
				{
					this.OnParentIXChanging(value);
					this.SendPropertyChanging();
					this._ParentIX = value;
					this.SendPropertyChanged("ParentIX");
					this.OnParentIXChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="SmallInt")]
		public System.Nullable<short> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsGroup", DbType="Bit NOT NULL")]
		public bool IsGroup
		{
			get
			{
				return this._IsGroup;
			}
			set
			{
				if ((this._IsGroup != value))
				{
					this.OnIsGroupChanging(value);
					this.SendPropertyChanging();
					this._IsGroup = value;
					this.SendPropertyChanged("IsGroup");
					this.OnIsGroupChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefualt", DbType="Bit")]
		public System.Nullable<bool> IsDefault
		{
			get
			{
				return this._IsDefualt;
			}
			set
			{
				if ((this._IsDefualt != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefualt = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateData", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TemplateData
		{
			get
			{
				return this._TemplateData;
			}
			set
			{
				if ((this._TemplateData != value))
				{
					this.OnTemplateDataChanging(value);
					this.SendPropertyChanging();
					this._TemplateData = value;
					this.SendPropertyChanged("TemplateData");
					this.OnTemplateDataChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Referrals.RefAdditionalColumns")]
	public partial class RefAdditionalColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _FieldName;
		
		private string _Title;
		
		private byte _TypeID;
		
		private System.Nullable<byte> _Lenght;
		
		private string _Description;
		
		private EntitySet<RefAdditionalDataItemsColCover> _RefAdditionalDataItemsColCovers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnLenghtChanging(System.Nullable<byte> value);
    partial void OnLenghtChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RefAdditionalColumn()
		{
			this._RefAdditionalDataItemsColCovers = new EntitySet<RefAdditionalDataItemsColCover>(new Action<RefAdditionalDataItemsColCover>(this.attach_RefAdditionalDataItemsColCovers), new Action<RefAdditionalDataItemsColCover>(this.detach_RefAdditionalDataItemsColCovers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="NVarChar(10)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="TinyInt NOT NULL")]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Lenght", DbType="TinyInt")]
		public System.Nullable<byte> Lenght
		{
			get
			{
				return this._Lenght;
			}
			set
			{
				if ((this._Lenght != value))
				{
					this.OnLenghtChanging(value);
					this.SendPropertyChanging();
					this._Lenght = value;
					this.SendPropertyChanged("Lenght");
					this.OnLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="RefAdditionalColumn_RefAdditionalDataItemsColCover", Storage="_RefAdditionalDataItemsColCovers", ThisKey="ID", OtherKey="ColumnIX")]
		public EntitySet<RefAdditionalDataItemsColCover> RefAdditionalDataItemsColCovers
		{
			get
			{
				return this._RefAdditionalDataItemsColCovers;
			}
			set
			{
				this._RefAdditionalDataItemsColCovers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefAdditionalDataItemsColCovers(RefAdditionalDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.RefAdditionalColumn = this;
		}
		
		private void detach_RefAdditionalDataItemsColCovers(RefAdditionalDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.RefAdditionalColumn = null;
		}
	}
	
	[Table(Name="Referrals.PatAdditionalColumns")]
	public partial class PatAdditionalColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _FieldName;
		
		private string _Title;
		
		private byte _TypeID;
		
		private System.Nullable<byte> _Lenght;
		
		private string _Description;
		
		private EntitySet<PatAdditionalDataItemsColCover> _PatAdditionalDataItemsColCovers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnLenghtChanging(System.Nullable<byte> value);
    partial void OnLenghtChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PatAdditionalColumn()
		{
			this._PatAdditionalDataItemsColCovers = new EntitySet<PatAdditionalDataItemsColCover>(new Action<PatAdditionalDataItemsColCover>(this.attach_PatAdditionalDataItemsColCovers), new Action<PatAdditionalDataItemsColCover>(this.detach_PatAdditionalDataItemsColCovers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="NVarChar(10)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="TinyInt NOT NULL")]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Lenght", DbType="TinyInt")]
		public System.Nullable<byte> Lenght
		{
			get
			{
				return this._Lenght;
			}
			set
			{
				if ((this._Lenght != value))
				{
					this.OnLenghtChanging(value);
					this.SendPropertyChanging();
					this._Lenght = value;
					this.SendPropertyChanged("Lenght");
					this.OnLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="PatAdditionalColumn_PatAdditionalDataItemsColCover", Storage="_PatAdditionalDataItemsColCovers", ThisKey="ID", OtherKey="ColumnIX")]
		public EntitySet<PatAdditionalDataItemsColCover> PatAdditionalDataItemsColCovers
		{
			get
			{
				return this._PatAdditionalDataItemsColCovers;
			}
			set
			{
				this._PatAdditionalDataItemsColCovers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatAdditionalDataItemsColCovers(PatAdditionalDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.PatAdditionalColumn = this;
		}
		
		private void detach_PatAdditionalDataItemsColCovers(PatAdditionalDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.PatAdditionalColumn = null;
		}
	}
	
	[Table(Name="Referrals.RefAdditionalDataItems")]
	public partial class RefAdditionalDataItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Title;
		
		private EntitySet<RefAdditionalDataItemsColCover> _RefAdditionalDataItemsColCovers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public RefAdditionalDataItem()
		{
			this._RefAdditionalDataItemsColCovers = new EntitySet<RefAdditionalDataItemsColCover>(new Action<RefAdditionalDataItemsColCover>(this.attach_RefAdditionalDataItemsColCovers), new Action<RefAdditionalDataItemsColCover>(this.detach_RefAdditionalDataItemsColCovers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="RefAdditionalDataItem_RefAdditionalDataItemsColCover", Storage="_RefAdditionalDataItemsColCovers", ThisKey="ID", OtherKey="ItemIX")]
		public EntitySet<RefAdditionalDataItemsColCover> RefAdditionalDataItemsColCovers
		{
			get
			{
				return this._RefAdditionalDataItemsColCovers;
			}
			set
			{
				this._RefAdditionalDataItemsColCovers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefAdditionalDataItemsColCovers(RefAdditionalDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.RefAdditionalDataItem = this;
		}
		
		private void detach_RefAdditionalDataItemsColCovers(RefAdditionalDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.RefAdditionalDataItem = null;
		}
	}
	
	[Table(Name="Referrals.PatAdditionalDataItems")]
	public partial class PatAdditionalDataItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Title;
		
		private EntitySet<PatAdditionalDataItemsColCover> _PatAdditionalDataItemsColCovers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public PatAdditionalDataItem()
		{
			this._PatAdditionalDataItemsColCovers = new EntitySet<PatAdditionalDataItemsColCover>(new Action<PatAdditionalDataItemsColCover>(this.attach_PatAdditionalDataItemsColCovers), new Action<PatAdditionalDataItemsColCover>(this.detach_PatAdditionalDataItemsColCovers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="PatAdditionalDataItem_PatAdditionalDataItemsColCover", Storage="_PatAdditionalDataItemsColCovers", ThisKey="ID", OtherKey="ItemIX")]
		public EntitySet<PatAdditionalDataItemsColCover> PatAdditionalDataItemsColCovers
		{
			get
			{
				return this._PatAdditionalDataItemsColCovers;
			}
			set
			{
				this._PatAdditionalDataItemsColCovers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatAdditionalDataItemsColCovers(PatAdditionalDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.PatAdditionalDataItem = this;
		}
		
		private void detach_PatAdditionalDataItemsColCovers(PatAdditionalDataItemsColCover entity)
		{
			this.SendPropertyChanging();
			entity.PatAdditionalDataItem = null;
		}
	}
	
	[Table(Name="Referrals.PatAdditionalDataItemsColCover")]
	public partial class PatAdditionalDataItemsColCover : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ItemIX;
		
		private short _ColumnIX;
		
		private EntityRef<PatAdditionalColumn> _PatAdditionalColumn;
		
		private EntityRef<PatAdditionalDataItem> _PatAdditionalDataItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIXChanging(short value);
    partial void OnItemIXChanged();
    partial void OnColumnIXChanging(short value);
    partial void OnColumnIXChanged();
    #endregion
		
		public PatAdditionalDataItemsColCover()
		{
			this._PatAdditionalColumn = default(EntityRef<PatAdditionalColumn>);
			this._PatAdditionalDataItem = default(EntityRef<PatAdditionalDataItem>);
			OnCreated();
		}
		
		[Column(Storage="_ItemIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ItemIX
		{
			get
			{
				return this._ItemIX;
			}
			set
			{
				if ((this._ItemIX != value))
				{
					if (this._PatAdditionalDataItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIXChanging(value);
					this.SendPropertyChanging();
					this._ItemIX = value;
					this.SendPropertyChanged("ItemIX");
					this.OnItemIXChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ColumnIX
		{
			get
			{
				return this._ColumnIX;
			}
			set
			{
				if ((this._ColumnIX != value))
				{
					if (this._PatAdditionalColumn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColumnIXChanging(value);
					this.SendPropertyChanging();
					this._ColumnIX = value;
					this.SendPropertyChanged("ColumnIX");
					this.OnColumnIXChanged();
				}
			}
		}
		
		[Association(Name="PatAdditionalColumn_PatAdditionalDataItemsColCover", Storage="_PatAdditionalColumn", ThisKey="ColumnIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PatAdditionalColumn PatAdditionalColumn
		{
			get
			{
				return this._PatAdditionalColumn.Entity;
			}
			set
			{
				PatAdditionalColumn previousValue = this._PatAdditionalColumn.Entity;
				if (((previousValue != value) 
							|| (this._PatAdditionalColumn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatAdditionalColumn.Entity = null;
						previousValue.PatAdditionalDataItemsColCovers.Remove(this);
					}
					this._PatAdditionalColumn.Entity = value;
					if ((value != null))
					{
						value.PatAdditionalDataItemsColCovers.Add(this);
						this._ColumnIX = value.ID;
					}
					else
					{
						this._ColumnIX = default(short);
					}
					this.SendPropertyChanged("PatAdditionalColumn");
				}
			}
		}
		
		[Association(Name="PatAdditionalDataItem_PatAdditionalDataItemsColCover", Storage="_PatAdditionalDataItem", ThisKey="ItemIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PatAdditionalDataItem PatAdditionalDataItem
		{
			get
			{
				return this._PatAdditionalDataItem.Entity;
			}
			set
			{
				PatAdditionalDataItem previousValue = this._PatAdditionalDataItem.Entity;
				if (((previousValue != value) 
							|| (this._PatAdditionalDataItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatAdditionalDataItem.Entity = null;
						previousValue.PatAdditionalDataItemsColCovers.Remove(this);
					}
					this._PatAdditionalDataItem.Entity = value;
					if ((value != null))
					{
						value.PatAdditionalDataItemsColCovers.Add(this);
						this._ItemIX = value.ID;
					}
					else
					{
						this._ItemIX = default(short);
					}
					this.SendPropertyChanged("PatAdditionalDataItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Referrals.RefAdditionalDataItemsColCover")]
	public partial class RefAdditionalDataItemsColCover : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ItemIX;
		
		private short _ColumnIX;
		
		private EntityRef<RefAdditionalColumn> _RefAdditionalColumn;
		
		private EntityRef<RefAdditionalDataItem> _RefAdditionalDataItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIXChanging(short value);
    partial void OnItemIXChanged();
    partial void OnColumnIXChanging(short value);
    partial void OnColumnIXChanged();
    #endregion
		
		public RefAdditionalDataItemsColCover()
		{
			this._RefAdditionalColumn = default(EntityRef<RefAdditionalColumn>);
			this._RefAdditionalDataItem = default(EntityRef<RefAdditionalDataItem>);
			OnCreated();
		}
		
		[Column(Storage="_ItemIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ItemIX
		{
			get
			{
				return this._ItemIX;
			}
			set
			{
				if ((this._ItemIX != value))
				{
					if (this._RefAdditionalDataItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIXChanging(value);
					this.SendPropertyChanging();
					this._ItemIX = value;
					this.SendPropertyChanged("ItemIX");
					this.OnItemIXChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ColumnIX
		{
			get
			{
				return this._ColumnIX;
			}
			set
			{
				if ((this._ColumnIX != value))
				{
					if (this._RefAdditionalColumn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColumnIXChanging(value);
					this.SendPropertyChanging();
					this._ColumnIX = value;
					this.SendPropertyChanged("ColumnIX");
					this.OnColumnIXChanged();
				}
			}
		}
		
		[Association(Name="RefAdditionalColumn_RefAdditionalDataItemsColCover", Storage="_RefAdditionalColumn", ThisKey="ColumnIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefAdditionalColumn RefAdditionalColumn
		{
			get
			{
				return this._RefAdditionalColumn.Entity;
			}
			set
			{
				RefAdditionalColumn previousValue = this._RefAdditionalColumn.Entity;
				if (((previousValue != value) 
							|| (this._RefAdditionalColumn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefAdditionalColumn.Entity = null;
						previousValue.RefAdditionalDataItemsColCovers.Remove(this);
					}
					this._RefAdditionalColumn.Entity = value;
					if ((value != null))
					{
						value.RefAdditionalDataItemsColCovers.Add(this);
						this._ColumnIX = value.ID;
					}
					else
					{
						this._ColumnIX = default(short);
					}
					this.SendPropertyChanged("RefAdditionalColumn");
				}
			}
		}
		
		[Association(Name="RefAdditionalDataItem_RefAdditionalDataItemsColCover", Storage="_RefAdditionalDataItem", ThisKey="ItemIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefAdditionalDataItem RefAdditionalDataItem
		{
			get
			{
				return this._RefAdditionalDataItem.Entity;
			}
			set
			{
				RefAdditionalDataItem previousValue = this._RefAdditionalDataItem.Entity;
				if (((previousValue != value) 
							|| (this._RefAdditionalDataItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefAdditionalDataItem.Entity = null;
						previousValue.RefAdditionalDataItemsColCovers.Remove(this);
					}
					this._RefAdditionalDataItem.Entity = value;
					if ((value != null))
					{
						value.RefAdditionalDataItemsColCovers.Add(this);
						this._ItemIX = value.ID;
					}
					else
					{
						this._ItemIX = default(short);
					}
					this.SendPropertyChanged("RefAdditionalDataItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Reports.BillsUserAccess")]
	public partial class BillsUserAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _BillIX;
		
		private short _UserIX;
		
		private System.Nullable<bool> _PrintLimitation;
		
		private EntityRef<BillTemplate> _BillTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillIXChanging(short value);
    partial void OnBillIXChanged();
    partial void OnUserIXChanging(short value);
    partial void OnUserIXChanged();
    partial void OnPrintLimitationChanging(System.Nullable<bool> value);
    partial void OnPrintLimitationChanged();
    #endregion
		
		public BillsUserAccess()
		{
			this._BillTemplate = default(EntityRef<BillTemplate>);
			OnCreated();
		}
		
		[Column(Storage="_BillIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short BillIX
		{
			get
			{
				return this._BillIX;
			}
			set
			{
				if ((this._BillIX != value))
				{
					if (this._BillTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIXChanging(value);
					this.SendPropertyChanging();
					this._BillIX = value;
					this.SendPropertyChanged("BillIX");
					this.OnBillIXChanged();
				}
			}
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_PrintLimitation", DbType="Bit")]
		public System.Nullable<bool> PrintLimitation
		{
			get
			{
				return this._PrintLimitation;
			}
			set
			{
				if ((this._PrintLimitation != value))
				{
					this.OnPrintLimitationChanging(value);
					this.SendPropertyChanging();
					this._PrintLimitation = value;
					this.SendPropertyChanged("PrintLimitation");
					this.OnPrintLimitationChanged();
				}
			}
		}
		
		[Association(Name="BillTemplate_BillsUserAccess", Storage="_BillTemplate", ThisKey="BillIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BillTemplate BillTemplate
		{
			get
			{
				return this._BillTemplate.Entity;
			}
			set
			{
				BillTemplate previousValue = this._BillTemplate.Entity;
				if (((previousValue != value) 
							|| (this._BillTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillTemplate.Entity = null;
						previousValue.BillsUserAccesses.Remove(this);
					}
					this._BillTemplate.Entity = value;
					if ((value != null))
					{
						value.BillsUserAccesses.Add(this);
						this._BillIX = value.ID;
					}
					else
					{
						this._BillIX = default(short);
					}
					this.SendPropertyChanged("BillTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Reports.BillTemplates")]
	public partial class BillTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private System.Data.Linq.Binary _TemplateData;
		
		private System.Nullable<short> _PrintLimitation;
		
		private string _Description;
		
		private EntitySet<BillsPrintLog> _BillsPrintLogs;
		
		private EntitySet<BillsUserAccess> _BillsUserAccesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTemplateDataChanging(System.Data.Linq.Binary value);
    partial void OnTemplateDataChanged();
    partial void OnPrintLimitationChanging(System.Nullable<short> value);
    partial void OnPrintLimitationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public BillTemplate()
		{
			this._BillsPrintLogs = new EntitySet<BillsPrintLog>(new Action<BillsPrintLog>(this.attach_BillsPrintLogs), new Action<BillsPrintLog>(this.detach_BillsPrintLogs));
			this._BillsUserAccesses = new EntitySet<BillsUserAccess>(new Action<BillsUserAccess>(this.attach_BillsUserAccesses), new Action<BillsUserAccess>(this.detach_BillsUserAccesses));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TemplateData
		{
			get
			{
				return this._TemplateData;
			}
			set
			{
				if ((this._TemplateData != value))
				{
					this.OnTemplateDataChanging(value);
					this.SendPropertyChanging();
					this._TemplateData = value;
					this.SendPropertyChanged("TemplateData");
					this.OnTemplateDataChanged();
				}
			}
		}
		
		[Column(Storage="_PrintLimitation", DbType="SmallInt")]
		public System.Nullable<short> PrintLimitation
		{
			get
			{
				return this._PrintLimitation;
			}
			set
			{
				if ((this._PrintLimitation != value))
				{
					this.OnPrintLimitationChanging(value);
					this.SendPropertyChanging();
					this._PrintLimitation = value;
					this.SendPropertyChanged("PrintLimitation");
					this.OnPrintLimitationChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="BillTemplate_BillsPrintLog", Storage="_BillsPrintLogs", ThisKey="ID", OtherKey="BillIX")]
		public EntitySet<BillsPrintLog> BillsPrintLogs
		{
			get
			{
				return this._BillsPrintLogs;
			}
			set
			{
				this._BillsPrintLogs.Assign(value);
			}
		}
		
		[Association(Name="BillTemplate_BillsUserAccess", Storage="_BillsUserAccesses", ThisKey="ID", OtherKey="BillIX")]
		public EntitySet<BillsUserAccess> BillsUserAccesses
		{
			get
			{
				return this._BillsUserAccesses;
			}
			set
			{
				this._BillsUserAccesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillsPrintLogs(BillsPrintLog entity)
		{
			this.SendPropertyChanging();
			entity.BillTemplate = this;
		}
		
		private void detach_BillsPrintLogs(BillsPrintLog entity)
		{
			this.SendPropertyChanging();
			entity.BillTemplate = null;
		}
		
		private void attach_BillsUserAccesses(BillsUserAccess entity)
		{
			this.SendPropertyChanging();
			entity.BillTemplate = this;
		}
		
		private void detach_BillsUserAccesses(BillsUserAccess entity)
		{
			this.SendPropertyChanging();
			entity.BillTemplate = null;
		}
	}
	
	[Table(Name="Reports.BillServCatExclude")]
	public partial class BillServCatExclude : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ServiceIX;
		
		private EntityRef<ServicesCategories> _ServicesCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIXChanging(short value);
    partial void OnCategoryIXChanged();
    #endregion
		
		public BillServCatExclude()
		{
			this._ServicesCategories = default(EntityRef<ServicesCategories>);
			OnCreated();
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CategoryIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("CategoryIX");
					this.OnCategoryIXChanged();
				}
			}
		}
		
		[Association(Name="ServicesCategories_BillServCatExclude", Storage="_ServicesCategories", ThisKey="CategoryIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesCategories ServicesCategories
		{
			get
			{
				return this._ServicesCategories.Entity;
			}
			set
			{
				ServicesCategories previousValue = this._ServicesCategories.Entity;
				if (((previousValue != value) 
							|| (this._ServicesCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesCategories.Entity = null;
						previousValue.BillServCatExclude = null;
					}
					this._ServicesCategories.Entity = value;
					if ((value != null))
					{
						value.BillServCatExclude = this;
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.CostsAndDiscountsUsersExclude")]
	public partial class CostsAndDiscountsUsersExclude : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _UserIX;
		
		private short _CDIX;
		
		private EntityRef<CostsAndDiscountsType> _CostsAndDiscountsType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIXChanging(short value);
    partial void OnUserIXChanged();
    partial void OnCDIXChanging(short value);
    partial void OnCDIXChanged();
    #endregion
		
		public CostsAndDiscountsUsersExclude()
		{
			this._CostsAndDiscountsType = default(EntityRef<CostsAndDiscountsType>);
			OnCreated();
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_CDIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CDIX
		{
			get
			{
				return this._CDIX;
			}
			set
			{
				if ((this._CDIX != value))
				{
					if (this._CostsAndDiscountsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCDIXChanging(value);
					this.SendPropertyChanging();
					this._CDIX = value;
					this.SendPropertyChanged("CDIX");
					this.OnCDIXChanged();
				}
			}
		}
		
		[Association(Name="CostsAndDiscountsType_CostsAndDiscountsUsersExclude", Storage="_CostsAndDiscountsType", ThisKey="CDIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CostsAndDiscountsType CostsAndDiscountsType
		{
			get
			{
				return this._CostsAndDiscountsType.Entity;
			}
			set
			{
				CostsAndDiscountsType previousValue = this._CostsAndDiscountsType.Entity;
				if (((previousValue != value) 
							|| (this._CostsAndDiscountsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostsAndDiscountsType.Entity = null;
						previousValue.CostsAndDiscountsUsersExcludes.Remove(this);
					}
					this._CostsAndDiscountsType.Entity = value;
					if ((value != null))
					{
						value.CostsAndDiscountsUsersExcludes.Add(this);
						this._CDIX = value.ID;
					}
					else
					{
						this._CDIX = default(short);
					}
					this.SendPropertyChanged("CostsAndDiscountsType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Referrals.List")]
	public partial class RefList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PatientIX;
		
		private System.Nullable<int> _BedRiddenIX;
		
		private System.Nullable<System.DateTime> _LockDateTime;
		
		private System.DateTime _RegisterDate;
		
		private System.Nullable<System.DateTime> _PrescriptionDate;
		
		private System.Nullable<byte> _Weight;
		
		private short _AdmitterIX;
		
		private System.Nullable<short> _ReferPhysicianIX;
		
		private System.Nullable<short> _ReferStatusIX;
		
		private System.Nullable<short> _Ins1IX;
		
		private System.Nullable<System.DateTime> _Ins1Validation;
		
		private string _Ins1Num1;
		
		private string _Ins1PageNum;
		
		private System.Nullable<short> _Ins2IX;
		
		private System.Nullable<System.DateTime> _Ins2Validation;
		
		private string _Ins2Num;
		
		private System.Nullable<int> _PrePayable;
		
		private System.Nullable<int> _RemainValue;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _ReportDate;
		
		private EntitySet<RefService> _RefServices;
		
		private EntitySet<RefCostsAndDiscount> _RefCostsAndDiscounts;
		
		private EntitySet<BillsPrintLog> _BillsPrintLogs;
		
		private EntitySet<RefTransaction> _RefTransactions;
		
		private EntityRef<CashExcludedRef> _CashExcludedRef;
		
		private EntitySet<RefDocument> _RefDocuments;
		
		private EntitySet<SchAppointments> _SchAppointments;
		
		private EntitySet<MsgList> _MsgLists;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatientIXChanging(int value);
    partial void OnPatientIXChanged();
    partial void OnBedRiddenIXChanging(System.Nullable<int> value);
    partial void OnBedRiddenIXChanged();
    partial void OnLockDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLockDateTimeChanged();
    partial void OnRegisterDateChanging(System.DateTime value);
    partial void OnRegisterDateChanged();
    partial void OnPrescriptionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPrescriptionDateChanged();
    partial void OnWeightChanging(System.Nullable<byte> value);
    partial void OnWeightChanged();
    partial void OnAdmitterIXChanging(short value);
    partial void OnAdmitterIXChanged();
    partial void OnReferPhysicianIXChanging(System.Nullable<short> value);
    partial void OnReferPhysicianIXChanged();
    partial void OnReferStatusIXChanging(System.Nullable<short> value);
    partial void OnReferStatusIXChanged();
    partial void OnIns1IXChanging(System.Nullable<short> value);
    partial void OnIns1IXChanged();
    partial void OnIns1ValidationChanging(System.Nullable<System.DateTime> value);
    partial void OnIns1ValidationChanged();
    partial void OnIns1Num1Changing(string value);
    partial void OnIns1Num1Changed();
    partial void OnIns1PageNumChanging(string value);
    partial void OnIns1PageNumChanged();
    partial void OnIns2IXChanging(System.Nullable<short> value);
    partial void OnIns2IXChanged();
    partial void OnIns2ValidationChanging(System.Nullable<System.DateTime> value);
    partial void OnIns2ValidationChanged();
    partial void OnIns2NumChanging(string value);
    partial void OnIns2NumChanged();
    partial void OnPrePayableChanging(System.Nullable<int> value);
    partial void OnPrePayableChanged();
    partial void OnRemainValueChanging(System.Nullable<int> value);
    partial void OnRemainValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReportDateChanged();
    #endregion
		
		public RefList()
		{
			this._RefServices = new EntitySet<RefService>(new Action<RefService>(this.attach_RefServices), new Action<RefService>(this.detach_RefServices));
			this._RefCostsAndDiscounts = new EntitySet<RefCostsAndDiscount>(new Action<RefCostsAndDiscount>(this.attach_RefCostsAndDiscounts), new Action<RefCostsAndDiscount>(this.detach_RefCostsAndDiscounts));
			this._BillsPrintLogs = new EntitySet<BillsPrintLog>(new Action<BillsPrintLog>(this.attach_BillsPrintLogs), new Action<BillsPrintLog>(this.detach_BillsPrintLogs));
			this._RefTransactions = new EntitySet<RefTransaction>(new Action<RefTransaction>(this.attach_RefTransactions), new Action<RefTransaction>(this.detach_RefTransactions));
			this._CashExcludedRef = default(EntityRef<CashExcludedRef>);
			this._RefDocuments = new EntitySet<RefDocument>(new Action<RefDocument>(this.attach_RefDocuments), new Action<RefDocument>(this.detach_RefDocuments));
			this._SchAppointments = new EntitySet<SchAppointments>(new Action<SchAppointments>(this.attach_SchAppointments), new Action<SchAppointments>(this.detach_SchAppointments));
			this._MsgLists = new EntitySet<MsgList>(new Action<MsgList>(this.attach_MsgLists), new Action<MsgList>(this.detach_MsgLists));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PatientIX", DbType="Int NOT NULL")]
		public int PatientIX
		{
			get
			{
				return this._PatientIX;
			}
			set
			{
				if ((this._PatientIX != value))
				{
					this.OnPatientIXChanging(value);
					this.SendPropertyChanging();
					this._PatientIX = value;
					this.SendPropertyChanged("PatientIX");
					this.OnPatientIXChanged();
				}
			}
		}
		
		[Column(Storage="_BedRiddenIX", DbType="Int")]
		public System.Nullable<int> BedRiddenIX
		{
			get
			{
				return this._BedRiddenIX;
			}
			set
			{
				if ((this._BedRiddenIX != value))
				{
					this.OnBedRiddenIXChanging(value);
					this.SendPropertyChanging();
					this._BedRiddenIX = value;
					this.SendPropertyChanged("BedRiddenIX");
					this.OnBedRiddenIXChanged();
				}
			}
		}
		
		[Column(Storage="_LockDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockDateTime
		{
			get
			{
				return this._LockDateTime;
			}
			set
			{
				if ((this._LockDateTime != value))
				{
					this.OnLockDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LockDateTime = value;
					this.SendPropertyChanged("LockDateTime");
					this.OnLockDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_RegisterDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegisterDate
		{
			get
			{
				return this._RegisterDate;
			}
			set
			{
				if ((this._RegisterDate != value))
				{
					this.OnRegisterDateChanging(value);
					this.SendPropertyChanging();
					this._RegisterDate = value;
					this.SendPropertyChanged("RegisterDate");
					this.OnRegisterDateChanged();
				}
			}
		}
		
		[Column(Storage="_PrescriptionDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> PrescriptionDate
		{
			get
			{
				return this._PrescriptionDate;
			}
			set
			{
				if ((this._PrescriptionDate != value))
				{
					this.OnPrescriptionDateChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionDate = value;
					this.SendPropertyChanged("PrescriptionDate");
					this.OnPrescriptionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="TinyInt")]
		public System.Nullable<byte> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_AdmitterIX", DbType="SmallInt NOT NULL")]
		public short AdmitterIX
		{
			get
			{
				return this._AdmitterIX;
			}
			set
			{
				if ((this._AdmitterIX != value))
				{
					this.OnAdmitterIXChanging(value);
					this.SendPropertyChanging();
					this._AdmitterIX = value;
					this.SendPropertyChanged("AdmitterIX");
					this.OnAdmitterIXChanged();
				}
			}
		}
		
		[Column(Storage="_ReferPhysicianIX", DbType="SmallInt")]
		public System.Nullable<short> ReferPhysicianIX
		{
			get
			{
				return this._ReferPhysicianIX;
			}
			set
			{
				if ((this._ReferPhysicianIX != value))
				{
					this.OnReferPhysicianIXChanging(value);
					this.SendPropertyChanging();
					this._ReferPhysicianIX = value;
					this.SendPropertyChanged("ReferPhysicianIX");
					this.OnReferPhysicianIXChanged();
				}
			}
		}
		
		[Column(Storage="_ReferStatusIX", DbType="SmallInt")]
		public System.Nullable<short> ReferStatusIX
		{
			get
			{
				return this._ReferStatusIX;
			}
			set
			{
				if ((this._ReferStatusIX != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferStatusIXChanging(value);
					this.SendPropertyChanging();
					this._ReferStatusIX = value;
					this.SendPropertyChanged("ReferStatusIX");
					this.OnReferStatusIXChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1IX", DbType="SmallInt")]
		public System.Nullable<short> Ins1IX
		{
			get
			{
				return this._Ins1IX;
			}
			set
			{
				if ((this._Ins1IX != value))
				{
					this.OnIns1IXChanging(value);
					this.SendPropertyChanging();
					this._Ins1IX = value;
					this.SendPropertyChanged("Ins1IX");
					this.OnIns1IXChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1Validation", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Ins1Validation
		{
			get
			{
				return this._Ins1Validation;
			}
			set
			{
				if ((this._Ins1Validation != value))
				{
					this.OnIns1ValidationChanging(value);
					this.SendPropertyChanging();
					this._Ins1Validation = value;
					this.SendPropertyChanged("Ins1Validation");
					this.OnIns1ValidationChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1Num1", DbType="NVarChar(20)")]
		public string Ins1Num1
		{
			get
			{
				return this._Ins1Num1;
			}
			set
			{
				if ((this._Ins1Num1 != value))
				{
					this.OnIns1Num1Changing(value);
					this.SendPropertyChanging();
					this._Ins1Num1 = value;
					this.SendPropertyChanged("Ins1Num1");
					this.OnIns1Num1Changed();
				}
			}
		}
		
		[Column(Storage="_Ins1PageNum", DbType="NVarChar(10)")]
		public string Ins1PageNum
		{
			get
			{
				return this._Ins1PageNum;
			}
			set
			{
				if ((this._Ins1PageNum != value))
				{
					this.OnIns1PageNumChanging(value);
					this.SendPropertyChanging();
					this._Ins1PageNum = value;
					this.SendPropertyChanged("Ins1PageNum");
					this.OnIns1PageNumChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2IX", DbType="SmallInt")]
		public System.Nullable<short> Ins2IX
		{
			get
			{
				return this._Ins2IX;
			}
			set
			{
				if ((this._Ins2IX != value))
				{
					this.OnIns2IXChanging(value);
					this.SendPropertyChanging();
					this._Ins2IX = value;
					this.SendPropertyChanged("Ins2IX");
					this.OnIns2IXChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2Validation", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Ins2Validation
		{
			get
			{
				return this._Ins2Validation;
			}
			set
			{
				if ((this._Ins2Validation != value))
				{
					this.OnIns2ValidationChanging(value);
					this.SendPropertyChanging();
					this._Ins2Validation = value;
					this.SendPropertyChanged("Ins2Validation");
					this.OnIns2ValidationChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2Num", DbType="NVarChar(20)")]
		public string Ins2Num
		{
			get
			{
				return this._Ins2Num;
			}
			set
			{
				if ((this._Ins2Num != value))
				{
					this.OnIns2NumChanging(value);
					this.SendPropertyChanging();
					this._Ins2Num = value;
					this.SendPropertyChanged("Ins2Num");
					this.OnIns2NumChanged();
				}
			}
		}
		
		[Column(Storage="_PrePayable", DbType="Int")]
		public System.Nullable<int> PrePayable
		{
			get
			{
				return this._PrePayable;
			}
			set
			{
				if ((this._PrePayable != value))
				{
					this.OnPrePayableChanging(value);
					this.SendPropertyChanging();
					this._PrePayable = value;
					this.SendPropertyChanged("PrePayable");
					this.OnPrePayableChanged();
				}
			}
		}
		
		[Column(Storage="_RemainValue", DbType="Int")]
		public System.Nullable<int> RemainValue
		{
			get
			{
				return this._RemainValue;
			}
			set
			{
				if ((this._RemainValue != value))
				{
					this.OnRemainValueChanging(value);
					this.SendPropertyChanging();
					this._RemainValue = value;
					this.SendPropertyChanged("RemainValue");
					this.OnRemainValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ReportDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ReportDate
		{
			get
			{
				return this._ReportDate;
			}
			set
			{
				if ((this._ReportDate != value))
				{
					this.OnReportDateChanging(value);
					this.SendPropertyChanging();
					this._ReportDate = value;
					this.SendPropertyChanged("ReportDate");
					this.OnReportDateChanged();
				}
			}
		}
		
		[Association(Name="RefList_RefService", Storage="_RefServices", ThisKey="ID", OtherKey="ReferralIX")]
		public EntitySet<RefService> RefServices
		{
			get
			{
				return this._RefServices;
			}
			set
			{
				this._RefServices.Assign(value);
			}
		}
		
		[Association(Name="RefList_RefCostsAndDiscount", Storage="_RefCostsAndDiscounts", ThisKey="ID", OtherKey="ReferralIX")]
		public EntitySet<RefCostsAndDiscount> RefCostsAndDiscounts
		{
			get
			{
				return this._RefCostsAndDiscounts;
			}
			set
			{
				this._RefCostsAndDiscounts.Assign(value);
			}
		}
		
		[Association(Name="RefList_BillsPrintLog", Storage="_BillsPrintLogs", ThisKey="ID", OtherKey="RefIX")]
		public EntitySet<BillsPrintLog> BillsPrintLogs
		{
			get
			{
				return this._BillsPrintLogs;
			}
			set
			{
				this._BillsPrintLogs.Assign(value);
			}
		}
		
		[Association(Name="RefList_RefTransaction", Storage="_RefTransactions", ThisKey="ID", OtherKey="ReferralIX")]
		public EntitySet<RefTransaction> RefTransactions
		{
			get
			{
				return this._RefTransactions;
			}
			set
			{
				this._RefTransactions.Assign(value);
			}
		}
		
		[Association(Name="RefList_CashExcludedRef", Storage="_CashExcludedRef", ThisKey="ID", OtherKey="RefIX", IsUnique=true, IsForeignKey=false)]
		public CashExcludedRef CashExcludedRef
		{
			get
			{
				return this._CashExcludedRef.Entity;
			}
			set
			{
				CashExcludedRef previousValue = this._CashExcludedRef.Entity;
				if (((previousValue != value) 
							|| (this._CashExcludedRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashExcludedRef.Entity = null;
						previousValue.RefList = null;
					}
					this._CashExcludedRef.Entity = value;
					if ((value != null))
					{
						value.RefList = this;
					}
					this.SendPropertyChanged("CashExcludedRef");
				}
			}
		}
		
		[Association(Name="RefList_RefDocument", Storage="_RefDocuments", ThisKey="ID", OtherKey="RefIX")]
		public EntitySet<RefDocument> RefDocuments
		{
			get
			{
				return this._RefDocuments;
			}
			set
			{
				this._RefDocuments.Assign(value);
			}
		}
		
		[Association(Name="RefList_SchAppointments", Storage="_SchAppointments", ThisKey="ID", OtherKey="ReferralIX")]
		public EntitySet<SchAppointments> SchAppointments
		{
			get
			{
				return this._SchAppointments;
			}
			set
			{
				this._SchAppointments.Assign(value);
			}
		}
		
		[Association(Name="RefList_MsgList", Storage="_MsgLists", ThisKey="ID", OtherKey="RefIX")]
		public EntitySet<MsgList> MsgLists
		{
			get
			{
				return this._MsgLists;
			}
			set
			{
				this._MsgLists.Assign(value);
			}
		}
		
		[Association(Name="Status_RefList", Storage="_Status", ThisKey="ReferStatusIX", OtherKey="ID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.RefLists.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.RefLists.Add(this);
						this._ReferStatusIX = value.ID;
					}
					else
					{
						this._ReferStatusIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefServices(RefService entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_RefServices(RefService entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_RefCostsAndDiscounts(RefCostsAndDiscount entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_RefCostsAndDiscounts(RefCostsAndDiscount entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_BillsPrintLogs(BillsPrintLog entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_BillsPrintLogs(BillsPrintLog entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_RefTransactions(RefTransaction entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_RefTransactions(RefTransaction entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_RefDocuments(RefDocument entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_RefDocuments(RefDocument entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_SchAppointments(SchAppointments entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_SchAppointments(SchAppointments entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_MsgLists(MsgList entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_MsgLists(MsgList entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
	}
	
	[Table(Name="Insurances.PhysicianExclude")]
	public partial class InsPhysicianExclude : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _InsIX;
		
		private short _ServiceIX;
		
		private short _RefPhysID;
		
		private EntityRef<ListInsurance> _ListInsurance;
		
		private EntityRef<ServicesList> _ServicesList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsIXChanging(short value);
    partial void OnInsIXChanged();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnRefPhysIDChanging(short value);
    partial void OnRefPhysIDChanged();
    #endregion
		
		public InsPhysicianExclude()
		{
			this._ListInsurance = default(EntityRef<ListInsurance>);
			this._ServicesList = default(EntityRef<ServicesList>);
			OnCreated();
		}
		
		[Column(Storage="_InsIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short InsIX
		{
			get
			{
				return this._InsIX;
			}
			set
			{
				if ((this._InsIX != value))
				{
					if (this._ListInsurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsIXChanging(value);
					this.SendPropertyChanging();
					this._InsIX = value;
					this.SendPropertyChanged("InsIX");
					this.OnInsIXChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_RefPhysID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short RefPhysID
		{
			get
			{
				return this._RefPhysID;
			}
			set
			{
				if ((this._RefPhysID != value))
				{
					this.OnRefPhysIDChanging(value);
					this.SendPropertyChanging();
					this._RefPhysID = value;
					this.SendPropertyChanged("RefPhysID");
					this.OnRefPhysIDChanged();
				}
			}
		}
		
		[Association(Name="ListInsurance_InsPhysicianExclude", Storage="_ListInsurance", ThisKey="InsIX", OtherKey="InsuranceIX", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ListInsurance ListInsurance
		{
			get
			{
				return this._ListInsurance.Entity;
			}
			set
			{
				ListInsurance previousValue = this._ListInsurance.Entity;
				if (((previousValue != value) 
							|| (this._ListInsurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ListInsurance.Entity = null;
						previousValue.InsPhysicianExcludes.Remove(this);
					}
					this._ListInsurance.Entity = value;
					if ((value != null))
					{
						value.InsPhysicianExcludes.Add(this);
						this._InsIX = value.InsuranceIX;
					}
					else
					{
						this._InsIX = default(short);
					}
					this.SendPropertyChanged("ListInsurance");
				}
			}
		}
		
		[Association(Name="ServicesList_InsPhysicianExclude", Storage="_ServicesList", ThisKey="ServiceIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesList ServicesList
		{
			get
			{
				return this._ServicesList.Entity;
			}
			set
			{
				ServicesList previousValue = this._ServicesList.Entity;
				if (((previousValue != value) 
							|| (this._ServicesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesList.Entity = null;
						previousValue.InsPhysicianExcludes.Remove(this);
					}
					this._ServicesList.Entity = value;
					if ((value != null))
					{
						value.InsPhysicianExcludes.Add(this);
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Insurances.RefPhysSpecExclude")]
	public partial class InsRefPhysSpecExclude : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _InsIX;
		
		private short _ServiceIX;
		
		private short _RefPhysSpecID;
		
		private EntityRef<ListInsurance> _ListInsurance;
		
		private EntityRef<ServicesList> _ServicesList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsIXChanging(short value);
    partial void OnInsIXChanged();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnRefPhysSpecIDChanging(short value);
    partial void OnRefPhysSpecIDChanged();
    #endregion
		
		public InsRefPhysSpecExclude()
		{
			this._ListInsurance = default(EntityRef<ListInsurance>);
			this._ServicesList = default(EntityRef<ServicesList>);
			OnCreated();
		}
		
		[Column(Storage="_InsIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short InsIX
		{
			get
			{
				return this._InsIX;
			}
			set
			{
				if ((this._InsIX != value))
				{
					if (this._ListInsurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsIXChanging(value);
					this.SendPropertyChanging();
					this._InsIX = value;
					this.SendPropertyChanged("InsIX");
					this.OnInsIXChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_RefPhysSpecID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short RefPhysSpecID
		{
			get
			{
				return this._RefPhysSpecID;
			}
			set
			{
				if ((this._RefPhysSpecID != value))
				{
					this.OnRefPhysSpecIDChanging(value);
					this.SendPropertyChanging();
					this._RefPhysSpecID = value;
					this.SendPropertyChanged("RefPhysSpecID");
					this.OnRefPhysSpecIDChanged();
				}
			}
		}
		
		[Association(Name="ListInsurance_InsRefPhysSpecExclude", Storage="_ListInsurance", ThisKey="InsIX", OtherKey="InsuranceIX", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ListInsurance ListInsurance
		{
			get
			{
				return this._ListInsurance.Entity;
			}
			set
			{
				ListInsurance previousValue = this._ListInsurance.Entity;
				if (((previousValue != value) 
							|| (this._ListInsurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ListInsurance.Entity = null;
						previousValue.InsRefPhysSpecExcludes.Remove(this);
					}
					this._ListInsurance.Entity = value;
					if ((value != null))
					{
						value.InsRefPhysSpecExcludes.Add(this);
						this._InsIX = value.InsuranceIX;
					}
					else
					{
						this._InsIX = default(short);
					}
					this.SendPropertyChanged("ListInsurance");
				}
			}
		}
		
		[Association(Name="ServicesList_InsRefPhysSpecExclude", Storage="_ServicesList", ThisKey="ServiceIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesList ServicesList
		{
			get
			{
				return this._ServicesList.Entity;
			}
			set
			{
				ServicesList previousValue = this._ServicesList.Entity;
				if (((previousValue != value) 
							|| (this._ServicesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesList.Entity = null;
						previousValue.InsRefPhysSpecExcludes.Remove(this);
					}
					this._ServicesList.Entity = value;
					if ((value != null))
					{
						value.InsRefPhysSpecExcludes.Add(this);
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Referrals.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Title;
		
		private EntitySet<RefList> _RefLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Status()
		{
			this._RefLists = new EntitySet<RefList>(new Action<RefList>(this.attach_RefLists), new Action<RefList>(this.detach_RefLists));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="Status_RefList", Storage="_RefLists", ThisKey="ID", OtherKey="ReferStatusIX")]
		public EntitySet<RefList> RefLists
		{
			get
			{
				return this._RefLists;
			}
			set
			{
				this._RefLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefLists(RefList entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_RefLists(RefList entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[Table(Name="Accounting.CashExcludedRefs")]
	public partial class CashExcludedRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RefIX;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRefIXChanging(int value);
    partial void OnRefIXChanged();
    #endregion
		
		public CashExcludedRef()
		{
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_RefIX", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RefIX
		{
			get
			{
				return this._RefIX;
			}
			set
			{
				if ((this._RefIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefIXChanging(value);
					this.SendPropertyChanging();
					this._RefIX = value;
					this.SendPropertyChanged("RefIX");
					this.OnRefIXChanged();
				}
			}
		}
		
		[Association(Name="RefList_CashExcludedRef", Storage="_RefList", ThisKey="RefIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.CashExcludedRef = null;
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.CashExcludedRef = this;
						this._RefIX = value.ID;
					}
					else
					{
						this._RefIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Settings.UsersSettings")]
	public partial class UsersSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private short _SettingIX;
		
		private System.Nullable<short> _UserIX;
		
		private System.Nullable<bool> _Boolean;
		
		private string _Value;
		
		private EntityRef<SettingsList> _SettingsList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSettingIXChanging(short value);
    partial void OnSettingIXChanged();
    partial void OnUserIXChanging(System.Nullable<short> value);
    partial void OnUserIXChanged();
    partial void OnBooleanChanging(System.Nullable<bool> value);
    partial void OnBooleanChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public UsersSetting()
		{
			this._SettingsList = default(EntityRef<SettingsList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SettingIX", DbType="SmallInt NOT NULL")]
		public short SettingIX
		{
			get
			{
				return this._SettingIX;
			}
			set
			{
				if ((this._SettingIX != value))
				{
					if (this._SettingsList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettingIXChanging(value);
					this.SendPropertyChanging();
					this._SettingIX = value;
					this.SendPropertyChanged("SettingIX");
					this.OnSettingIXChanged();
				}
			}
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt")]
		public System.Nullable<short> UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_Boolean", DbType="Bit")]
		public System.Nullable<bool> Boolean
		{
			get
			{
				return this._Boolean;
			}
			set
			{
				if ((this._Boolean != value))
				{
					this.OnBooleanChanging(value);
					this.SendPropertyChanging();
					this._Boolean = value;
					this.SendPropertyChanged("Boolean");
					this.OnBooleanChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(1000)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="SettingsList_UsersSetting", Storage="_SettingsList", ThisKey="SettingIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SettingsList SettingsList
		{
			get
			{
				return this._SettingsList.Entity;
			}
			set
			{
				SettingsList previousValue = this._SettingsList.Entity;
				if (((previousValue != value) 
							|| (this._SettingsList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SettingsList.Entity = null;
						previousValue.UsersSettings.Remove(this);
					}
					this._SettingsList.Entity = value;
					if ((value != null))
					{
						value.UsersSettings.Add(this);
						this._SettingIX = value.ID;
					}
					else
					{
						this._SettingIX = default(short);
					}
					this.SendPropertyChanged("SettingsList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Settings.List")]
	public partial class SettingsList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Title;
		
		private string _Description;
		
		private EntitySet<UsersSetting> _UsersSettings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SettingsList()
		{
			this._UsersSettings = new EntitySet<UsersSetting>(new Action<UsersSetting>(this.attach_UsersSettings), new Action<UsersSetting>(this.detach_UsersSettings));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="SettingsList_UsersSetting", Storage="_UsersSettings", ThisKey="ID", OtherKey="SettingIX")]
		public EntitySet<UsersSetting> UsersSettings
		{
			get
			{
				return this._UsersSettings;
			}
			set
			{
				this._UsersSettings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersSettings(UsersSetting entity)
		{
			this.SendPropertyChanging();
			entity.SettingsList = this;
		}
		
		private void detach_UsersSettings(UsersSetting entity)
		{
			this.SendPropertyChanging();
			entity.SettingsList = null;
		}
	}
	
	[Table(Name="Documents.UsersDefaultDocType")]
	public partial class UsersDefaultDocType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _UserIX;
		
		private short _DocTypeIX;
		
		private EntityRef<DocType> _DocType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIXChanging(short value);
    partial void OnUserIXChanged();
    partial void OnDocTypeIXChanging(short value);
    partial void OnDocTypeIXChanged();
    #endregion
		
		public UsersDefaultDocType()
		{
			this._DocType = default(EntityRef<DocType>);
			OnCreated();
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					if (this._DocType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_DocTypeIX", DbType="SmallInt NOT NULL")]
		public short DocTypeIX
		{
			get
			{
				return this._DocTypeIX;
			}
			set
			{
				if ((this._DocTypeIX != value))
				{
					this.OnDocTypeIXChanging(value);
					this.SendPropertyChanging();
					this._DocTypeIX = value;
					this.SendPropertyChanged("DocTypeIX");
					this.OnDocTypeIXChanged();
				}
			}
		}
		
		[Association(Name="DocType_UsersDefaultDocType", Storage="_DocType", ThisKey="UserIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DocType DocType
		{
			get
			{
				return this._DocType.Entity;
			}
			set
			{
				DocType previousValue = this._DocType.Entity;
				if (((previousValue != value) 
							|| (this._DocType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocType.Entity = null;
						previousValue.UsersDefaultDocType = null;
					}
					this._DocType.Entity = value;
					if ((value != null))
					{
						value.UsersDefaultDocType = this;
						this._UserIX = value.ID;
					}
					else
					{
						this._UserIX = default(short);
					}
					this.SendPropertyChanged("DocType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="PACS.Studies")]
	public partial class Study : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ServiceStudy> _ServiceStudies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Study()
		{
			this._ServiceStudies = new EntitySet<ServiceStudy>(new Action<ServiceStudy>(this.attach_ServiceStudies), new Action<ServiceStudy>(this.detach_ServiceStudies));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(80)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Study_ServiceStudy", Storage="_ServiceStudies", ThisKey="ID", OtherKey="StudyIX")]
		public EntitySet<ServiceStudy> ServiceStudies
		{
			get
			{
				return this._ServiceStudies;
			}
			set
			{
				this._ServiceStudies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceStudies(ServiceStudy entity)
		{
			this.SendPropertyChanging();
			entity.Study = this;
		}
		
		private void detach_ServiceStudies(ServiceStudy entity)
		{
			this.SendPropertyChanging();
			entity.Study = null;
		}
	}
	
	[Table(Name="PACS.ServiceStudies")]
	public partial class ServiceStudy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ServiceIX;
		
		private int _StudyIX;
		
		private EntityRef<ServicesList> _ServicesList;
		
		private EntityRef<Study> _Study;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnStudyIXChanging(int value);
    partial void OnStudyIXChanged();
    #endregion
		
		public ServiceStudy()
		{
			this._ServicesList = default(EntityRef<ServicesList>);
			this._Study = default(EntityRef<Study>);
			OnCreated();
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_StudyIX", DbType="Int NOT NULL")]
		public int StudyIX
		{
			get
			{
				return this._StudyIX;
			}
			set
			{
				if ((this._StudyIX != value))
				{
					if (this._Study.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyIXChanging(value);
					this.SendPropertyChanging();
					this._StudyIX = value;
					this.SendPropertyChanged("StudyIX");
					this.OnStudyIXChanged();
				}
			}
		}
		
		[Association(Name="ServicesList_ServiceStudy", Storage="_ServicesList", ThisKey="ServiceIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesList ServicesList
		{
			get
			{
				return this._ServicesList.Entity;
			}
			set
			{
				ServicesList previousValue = this._ServicesList.Entity;
				if (((previousValue != value) 
							|| (this._ServicesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesList.Entity = null;
						previousValue.ServiceStudy = null;
					}
					this._ServicesList.Entity = value;
					if ((value != null))
					{
						value.ServiceStudy = this;
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesList");
				}
			}
		}
		
		[Association(Name="Study_ServiceStudy", Storage="_Study", ThisKey="StudyIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Study Study
		{
			get
			{
				return this._Study.Entity;
			}
			set
			{
				Study previousValue = this._Study.Entity;
				if (((previousValue != value) 
							|| (this._Study.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Study.Entity = null;
						previousValue.ServiceStudies.Remove(this);
					}
					this._Study.Entity = value;
					if ((value != null))
					{
						value.ServiceStudies.Add(this);
						this._StudyIX = value.ID;
					}
					else
					{
						this._StudyIX = default(int);
					}
					this.SendPropertyChanged("Study");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="PACS.Modalities")]
	public partial class Modality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private string _Abreviation;
		
		private string _Description;
		
		private string _AETitle;
		
		private string _IPAddress;
		
		private int _PortNo;
		
		private EntitySet<ServiceModality> _ServiceModalities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbreviationChanging(string value);
    partial void OnAbreviationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAETitleChanging(string value);
    partial void OnAETitleChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnPortNoChanging(int value);
    partial void OnPortNoChanged();
    #endregion
		
		public Modality()
		{
			this._ServiceModalities = new EntitySet<ServiceModality>(new Action<ServiceModality>(this.attach_ServiceModalities), new Action<ServiceModality>(this.detach_ServiceModalities));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Abreviation", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Abreviation
		{
			get
			{
				return this._Abreviation;
			}
			set
			{
				if ((this._Abreviation != value))
				{
					this.OnAbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abreviation = value;
					this.SendPropertyChanged("Abreviation");
					this.OnAbreviationChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(80)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_AETitle", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string AETitle
		{
			get
			{
				return this._AETitle;
			}
			set
			{
				if ((this._AETitle != value))
				{
					this.OnAETitleChanging(value);
					this.SendPropertyChanging();
					this._AETitle = value;
					this.SendPropertyChanged("AETitle");
					this.OnAETitleChanged();
				}
			}
		}
		
		[Column(Storage="_IPAddress", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PortNo", DbType="Int NOT NULL")]
		public int PortNo
		{
			get
			{
				return this._PortNo;
			}
			set
			{
				if ((this._PortNo != value))
				{
					this.OnPortNoChanging(value);
					this.SendPropertyChanging();
					this._PortNo = value;
					this.SendPropertyChanged("PortNo");
					this.OnPortNoChanged();
				}
			}
		}
		
		[Association(Name="Modality_ServiceModality", Storage="_ServiceModalities", ThisKey="ID", OtherKey="ModalityIX")]
		public EntitySet<ServiceModality> ServiceModalities
		{
			get
			{
				return this._ServiceModalities;
			}
			set
			{
				this._ServiceModalities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceModalities(ServiceModality entity)
		{
			this.SendPropertyChanging();
			entity.Modality = this;
		}
		
		private void detach_ServiceModalities(ServiceModality entity)
		{
			this.SendPropertyChanging();
			entity.Modality = null;
		}
	}
	
	[Table(Name="PACS.ServiceModalities")]
	public partial class ServiceModality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ServiceIX;
		
		private short _ModalityIX;
		
		private EntityRef<ServicesList> _ServicesList;
		
		private EntityRef<Modality> _Modality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnModalityIXChanging(short value);
    partial void OnModalityIXChanged();
    #endregion
		
		public ServiceModality()
		{
			this._ServicesList = default(EntityRef<ServicesList>);
			this._Modality = default(EntityRef<Modality>);
			OnCreated();
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					if (this._ServicesList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_ModalityIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ModalityIX
		{
			get
			{
				return this._ModalityIX;
			}
			set
			{
				if ((this._ModalityIX != value))
				{
					if (this._Modality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModalityIXChanging(value);
					this.SendPropertyChanging();
					this._ModalityIX = value;
					this.SendPropertyChanged("ModalityIX");
					this.OnModalityIXChanged();
				}
			}
		}
		
		[Association(Name="ServicesList_ServiceModality", Storage="_ServicesList", ThisKey="ServiceIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServicesList ServicesList
		{
			get
			{
				return this._ServicesList.Entity;
			}
			set
			{
				ServicesList previousValue = this._ServicesList.Entity;
				if (((previousValue != value) 
							|| (this._ServicesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicesList.Entity = null;
						previousValue.ServiceModalities.Remove(this);
					}
					this._ServicesList.Entity = value;
					if ((value != null))
					{
						value.ServiceModalities.Add(this);
						this._ServiceIX = value.ID;
					}
					else
					{
						this._ServiceIX = default(short);
					}
					this.SendPropertyChanged("ServicesList");
				}
			}
		}
		
		[Association(Name="Modality_ServiceModality", Storage="_Modality", ThisKey="ModalityIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Modality Modality
		{
			get
			{
				return this._Modality.Entity;
			}
			set
			{
				Modality previousValue = this._Modality.Entity;
				if (((previousValue != value) 
							|| (this._Modality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Modality.Entity = null;
						previousValue.ServiceModalities.Remove(this);
					}
					this._Modality.Entity = value;
					if ((value != null))
					{
						value.ServiceModalities.Add(this);
						this._ModalityIX = value.ID;
					}
					else
					{
						this._ModalityIX = default(short);
					}
					this.SendPropertyChanged("Modality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Referrals.RefDocuments")]
	public partial class RefDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RefIX;
		
		private System.Nullable<short> _TypeIX;
		
		private string _Title;
		
		private System.DateTime _Date;
		
		private System.Nullable<short> _ReportPhysicianIX;
		
		private short _TypistIX;
		
		private System.Nullable<System.DateTime> _LastModifyDate;
		
		private System.Nullable<short> _LastModifierIX;
		
		private bool _IsReport;
		
		private string _DocPath;
		
		private string _Extension;
		
		private EntityRef<RefList> _RefList;
		
		private EntityRef<Performer> _Performer;
		
		private EntityRef<DocType> _DocType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRefIXChanging(int value);
    partial void OnRefIXChanged();
    partial void OnTypeIXChanging(System.Nullable<short> value);
    partial void OnTypeIXChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnReportPhysicianIXChanging(System.Nullable<short> value);
    partial void OnReportPhysicianIXChanged();
    partial void OnTypistIXChanging(short value);
    partial void OnTypistIXChanged();
    partial void OnLastModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifyDateChanged();
    partial void OnLastModifierIXChanging(System.Nullable<short> value);
    partial void OnLastModifierIXChanged();
    partial void OnIsReportChanging(bool value);
    partial void OnIsReportChanged();
    partial void OnDocPathChanging(string value);
    partial void OnDocPathChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    #endregion
		
		public RefDocument()
		{
			this._RefList = default(EntityRef<RefList>);
			this._Performer = default(EntityRef<Performer>);
			this._DocType = default(EntityRef<DocType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_RefIX", DbType="Int NOT NULL")]
		public int RefIX
		{
			get
			{
				return this._RefIX;
			}
			set
			{
				if ((this._RefIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefIXChanging(value);
					this.SendPropertyChanging();
					this._RefIX = value;
					this.SendPropertyChanged("RefIX");
					this.OnRefIXChanged();
				}
			}
		}
		
		[Column(Storage="_TypeIX", DbType="SmallInt")]
		public System.Nullable<short> TypeIX
		{
			get
			{
				return this._TypeIX;
			}
			set
			{
				if ((this._TypeIX != value))
				{
					if (this._DocType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIXChanging(value);
					this.SendPropertyChanging();
					this._TypeIX = value;
					this.SendPropertyChanged("TypeIX");
					this.OnTypeIXChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReportPhysicianIX", DbType="SmallInt")]
		public System.Nullable<short> ReportPhysicianIX
		{
			get
			{
				return this._ReportPhysicianIX;
			}
			set
			{
				if ((this._ReportPhysicianIX != value))
				{
					if (this._Performer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportPhysicianIXChanging(value);
					this.SendPropertyChanging();
					this._ReportPhysicianIX = value;
					this.SendPropertyChanged("ReportPhysicianIX");
					this.OnReportPhysicianIXChanged();
				}
			}
		}
		
		[Column(Storage="_TypistIX", DbType="SmallInt NOT NULL")]
		public short TypistIX
		{
			get
			{
				return this._TypistIX;
			}
			set
			{
				if ((this._TypistIX != value))
				{
					this.OnTypistIXChanging(value);
					this.SendPropertyChanging();
					this._TypistIX = value;
					this.SendPropertyChanged("TypistIX");
					this.OnTypistIXChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifyDate
		{
			get
			{
				return this._LastModifyDate;
			}
			set
			{
				if ((this._LastModifyDate != value))
				{
					this.OnLastModifyDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifyDate = value;
					this.SendPropertyChanged("LastModifyDate");
					this.OnLastModifyDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifierIX", DbType="SmallInt")]
		public System.Nullable<short> LastModifierIX
		{
			get
			{
				return this._LastModifierIX;
			}
			set
			{
				if ((this._LastModifierIX != value))
				{
					this.OnLastModifierIXChanging(value);
					this.SendPropertyChanging();
					this._LastModifierIX = value;
					this.SendPropertyChanged("LastModifierIX");
					this.OnLastModifierIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsReport", DbType="Bit NOT NULL")]
		public bool IsReport
		{
			get
			{
				return this._IsReport;
			}
			set
			{
				if ((this._IsReport != value))
				{
					this.OnIsReportChanging(value);
					this.SendPropertyChanging();
					this._IsReport = value;
					this.SendPropertyChanged("IsReport");
					this.OnIsReportChanged();
				}
			}
		}
		
		[Column(Storage="_DocPath", DbType="VarChar(80)")]
		public string DocPath
		{
			get
			{
				return this._DocPath;
			}
			set
			{
				if ((this._DocPath != value))
				{
					this.OnDocPathChanging(value);
					this.SendPropertyChanging();
					this._DocPath = value;
					this.SendPropertyChanged("DocPath");
					this.OnDocPathChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="VarChar(8)")]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Association(Name="RefList_RefDocument", Storage="_RefList", ThisKey="RefIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.RefDocuments.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.RefDocuments.Add(this);
						this._RefIX = value.ID;
					}
					else
					{
						this._RefIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		[Association(Name="Performer_RefDocument", Storage="_Performer", ThisKey="ReportPhysicianIX", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Performer Performer
		{
			get
			{
				return this._Performer.Entity;
			}
			set
			{
				Performer previousValue = this._Performer.Entity;
				if (((previousValue != value) 
							|| (this._Performer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Performer.Entity = null;
						previousValue.RefDocuments.Remove(this);
					}
					this._Performer.Entity = value;
					if ((value != null))
					{
						value.RefDocuments.Add(this);
						this._ReportPhysicianIX = value.ID;
					}
					else
					{
						this._ReportPhysicianIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("Performer");
				}
			}
		}
		
		[Association(Name="DocType_RefDocument", Storage="_DocType", ThisKey="TypeIX", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public DocType DocType
		{
			get
			{
				return this._DocType.Entity;
			}
			set
			{
				DocType previousValue = this._DocType.Entity;
				if (((previousValue != value) 
							|| (this._DocType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocType.Entity = null;
						previousValue.RefDocuments.Remove(this);
					}
					this._DocType.Entity = value;
					if ((value != null))
					{
						value.RefDocuments.Add(this);
						this._TypeIX = value.ID;
					}
					else
					{
						this._TypeIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("DocType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Schedules.LogEvents")]
	public partial class SchLogEvents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private byte _CategoryIX;
		
		private int _AppointmentIX;
		
		private short _UserIX;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Description;
		
		private EntityRef<SchAppointments> _SchAppointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCategoryIXChanging(byte value);
    partial void OnCategoryIXChanged();
    partial void OnAppointmentIXChanging(int value);
    partial void OnAppointmentIXChanged();
    partial void OnUserIXChanging(short value);
    partial void OnUserIXChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SchLogEvents()
		{
			this._SchAppointments = default(EntityRef<SchAppointments>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="TinyInt NOT NULL")]
		public byte CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					this.OnCategoryIXChanging(value);
					this.SendPropertyChanging();
					this._CategoryIX = value;
					this.SendPropertyChanged("CategoryIX");
					this.OnCategoryIXChanged();
				}
			}
		}
		
		[Column(Storage="_AppointmentIX", DbType="Int NOT NULL")]
		public int AppointmentIX
		{
			get
			{
				return this._AppointmentIX;
			}
			set
			{
				if ((this._AppointmentIX != value))
				{
					if (this._SchAppointments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppointmentIXChanging(value);
					this.SendPropertyChanging();
					this._AppointmentIX = value;
					this.SendPropertyChanged("AppointmentIX");
					this.OnAppointmentIXChanged();
				}
			}
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt NOT NULL")]
		public short UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="SchAppointments_SchLogEvents", Storage="_SchAppointments", ThisKey="AppointmentIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchAppointments SchAppointments
		{
			get
			{
				return this._SchAppointments.Entity;
			}
			set
			{
				SchAppointments previousValue = this._SchAppointments.Entity;
				if (((previousValue != value) 
							|| (this._SchAppointments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchAppointments.Entity = null;
						previousValue.SchLogEvents.Remove(this);
					}
					this._SchAppointments.Entity = value;
					if ((value != null))
					{
						value.SchLogEvents.Add(this);
						this._AppointmentIX = value.ID;
					}
					else
					{
						this._AppointmentIX = default(int);
					}
					this.SendPropertyChanged("SchAppointments");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Schedules.Appointments")]
	public partial class SchAppointments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private short _ApplicationIX;
		
		private System.Nullable<int> _PatientIX;
		
		private System.Nullable<int> _ReferralIX;
		
		private short _OrderNo;
		
		private System.DateTime _OccuredDateTime;
		
		private bool _IsActive;
		
		private bool _IsAppointed;
		
		private System.Nullable<System.DateTime> _LockDateTime;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _IsMale;
		
		private System.Nullable<byte> _Age;
		
		private string _TelNo1;
		
		private string _TelNo2;
		
		private System.Nullable<short> _SchedulerIX;
		
		private System.Nullable<System.DateTime> _DateTime;
		
		private EntitySet<SchLogEvents> _SchLogEvents;
		
		private EntityRef<SchApplications> _SchApplications;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnApplicationIXChanging(short value);
    partial void OnApplicationIXChanged();
    partial void OnPatientIXChanging(System.Nullable<int> value);
    partial void OnPatientIXChanged();
    partial void OnReferralIXChanging(System.Nullable<int> value);
    partial void OnReferralIXChanged();
    partial void OnOrderNoChanging(short value);
    partial void OnOrderNoChanged();
    partial void OnOccuredDateTimeChanging(System.DateTime value);
    partial void OnOccuredDateTimeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsAppointedChanging(bool value);
    partial void OnIsAppointedChanged();
    partial void OnLockDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLockDateTimeChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIsMaleChanging(System.Nullable<bool> value);
    partial void OnIsMaleChanged();
    partial void OnAgeChanging(System.Nullable<byte> value);
    partial void OnAgeChanged();
    partial void OnTelNo1Changing(string value);
    partial void OnTelNo1Changed();
    partial void OnTelNo2Changing(string value);
    partial void OnTelNo2Changed();
    partial void OnSchedulerIXChanging(System.Nullable<short> value);
    partial void OnSchedulerIXChanged();
    partial void OnDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeChanged();
    #endregion
		
		public SchAppointments()
		{
			this._SchLogEvents = new EntitySet<SchLogEvents>(new Action<SchLogEvents>(this.attach_SchLogEvents), new Action<SchLogEvents>(this.detach_SchLogEvents));
			this._SchApplications = default(EntityRef<SchApplications>);
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationIX", DbType="SmallInt NOT NULL")]
		public short ApplicationIX
		{
			get
			{
				return this._ApplicationIX;
			}
			set
			{
				if ((this._ApplicationIX != value))
				{
					if (this._SchApplications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIXChanging(value);
					this.SendPropertyChanging();
					this._ApplicationIX = value;
					this.SendPropertyChanged("ApplicationIX");
					this.OnApplicationIXChanged();
				}
			}
		}
		
		[Column(Storage="_PatientIX", DbType="Int")]
		public System.Nullable<int> PatientIX
		{
			get
			{
				return this._PatientIX;
			}
			set
			{
				if ((this._PatientIX != value))
				{
					this.OnPatientIXChanging(value);
					this.SendPropertyChanging();
					this._PatientIX = value;
					this.SendPropertyChanged("PatientIX");
					this.OnPatientIXChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralIX", DbType="Int")]
		public System.Nullable<int> ReferralIX
		{
			get
			{
				return this._ReferralIX;
			}
			set
			{
				if ((this._ReferralIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferralIXChanging(value);
					this.SendPropertyChanging();
					this._ReferralIX = value;
					this.SendPropertyChanged("ReferralIX");
					this.OnReferralIXChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNo", DbType="SmallInt NOT NULL")]
		public short OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[Column(Storage="_OccuredDateTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime OccuredDateTime
		{
			get
			{
				return this._OccuredDateTime;
			}
			set
			{
				if ((this._OccuredDateTime != value))
				{
					this.OnOccuredDateTimeChanging(value);
					this.SendPropertyChanging();
					this._OccuredDateTime = value;
					this.SendPropertyChanged("OccuredDateTime");
					this.OnOccuredDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsAppointed", DbType="Bit NOT NULL")]
		public bool IsAppointed
		{
			get
			{
				return this._IsAppointed;
			}
			set
			{
				if ((this._IsAppointed != value))
				{
					this.OnIsAppointedChanging(value);
					this.SendPropertyChanging();
					this._IsAppointed = value;
					this.SendPropertyChanged("IsAppointed");
					this.OnIsAppointedChanged();
				}
			}
		}
		
		[Column(Storage="_LockDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockDateTime
		{
			get
			{
				return this._LockDateTime;
			}
			set
			{
				if ((this._LockDateTime != value))
				{
					this.OnLockDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LockDateTime = value;
					this.SendPropertyChanged("LockDateTime");
					this.OnLockDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(15)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(25)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsMale", DbType="Bit")]
		public System.Nullable<bool> IsMale
		{
			get
			{
				return this._IsMale;
			}
			set
			{
				if ((this._IsMale != value))
				{
					this.OnIsMaleChanging(value);
					this.SendPropertyChanging();
					this._IsMale = value;
					this.SendPropertyChanged("IsMale");
					this.OnIsMaleChanged();
				}
			}
		}
		
		[Column(Storage="_Age", DbType="TinyInt")]
		public System.Nullable<byte> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[Column(Storage="_TelNo1", DbType="NVarChar(15)")]
		public string TelNo1
		{
			get
			{
				return this._TelNo1;
			}
			set
			{
				if ((this._TelNo1 != value))
				{
					this.OnTelNo1Changing(value);
					this.SendPropertyChanging();
					this._TelNo1 = value;
					this.SendPropertyChanged("TelNo1");
					this.OnTelNo1Changed();
				}
			}
		}
		
		[Column(Storage="_TelNo2", DbType="NVarChar(15)")]
		public string TelNo2
		{
			get
			{
				return this._TelNo2;
			}
			set
			{
				if ((this._TelNo2 != value))
				{
					this.OnTelNo2Changing(value);
					this.SendPropertyChanging();
					this._TelNo2 = value;
					this.SendPropertyChanged("TelNo2");
					this.OnTelNo2Changed();
				}
			}
		}
		
		[Column(Storage="_SchedulerIX", DbType="SmallInt")]
		public System.Nullable<short> SchedulerIX
		{
			get
			{
				return this._SchedulerIX;
			}
			set
			{
				if ((this._SchedulerIX != value))
				{
					this.OnSchedulerIXChanging(value);
					this.SendPropertyChanging();
					this._SchedulerIX = value;
					this.SendPropertyChanged("SchedulerIX");
					this.OnSchedulerIXChanged();
				}
			}
		}
		
		[Column(Storage="_DateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[Association(Name="SchAppointments_SchLogEvents", Storage="_SchLogEvents", ThisKey="ID", OtherKey="AppointmentIX")]
		public EntitySet<SchLogEvents> SchLogEvents
		{
			get
			{
				return this._SchLogEvents;
			}
			set
			{
				this._SchLogEvents.Assign(value);
			}
		}
		
		[Association(Name="SchApplications_SchAppointments", Storage="_SchApplications", ThisKey="ApplicationIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchApplications SchApplications
		{
			get
			{
				return this._SchApplications.Entity;
			}
			set
			{
				SchApplications previousValue = this._SchApplications.Entity;
				if (((previousValue != value) 
							|| (this._SchApplications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchApplications.Entity = null;
						previousValue.SchAppointments.Remove(this);
					}
					this._SchApplications.Entity = value;
					if ((value != null))
					{
						value.SchAppointments.Add(this);
						this._ApplicationIX = value.ID;
					}
					else
					{
						this._ApplicationIX = default(short);
					}
					this.SendPropertyChanged("SchApplications");
				}
			}
		}
		
		[Association(Name="RefList_SchAppointments", Storage="_RefList", ThisKey="ReferralIX", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.SchAppointments.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.SchAppointments.Add(this);
						this._ReferralIX = value.ID;
					}
					else
					{
						this._ReferralIX = default(Nullable<int>);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchLogEvents(SchLogEvents entity)
		{
			this.SendPropertyChanging();
			entity.SchAppointments = this;
		}
		
		private void detach_SchLogEvents(SchLogEvents entity)
		{
			this.SendPropertyChanging();
			entity.SchAppointments = null;
		}
	}
	
	[Table(Name="Messages.Categories")]
	public partial class MsgCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<MsgList> _MsgLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MsgCategories()
		{
			this._MsgLists = new EntitySet<MsgList>(new Action<MsgList>(this.attach_MsgLists), new Action<MsgList>(this.detach_MsgLists));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="MsgCategories_MsgList", Storage="_MsgLists", ThisKey="ID", OtherKey="CategoryIX")]
		public EntitySet<MsgList> MsgLists
		{
			get
			{
				return this._MsgLists;
			}
			set
			{
				this._MsgLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsgLists(MsgList entity)
		{
			this.SendPropertyChanging();
			entity.MsgCategories = this;
		}
		
		private void detach_MsgLists(MsgList entity)
		{
			this.SendPropertyChanging();
			entity.MsgCategories = null;
		}
	}
	
	[Table(Name="Messages.LogCategories")]
	public partial class MsgLogCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _EnglishName;
		
		private string _LocaleName;
		
		private string _Description;
		
		private EntitySet<MsgLogEvents> _MsgLogEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnLocaleNameChanging(string value);
    partial void OnLocaleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MsgLogCategories()
		{
			this._MsgLogEvents = new EntitySet<MsgLogEvents>(new Action<MsgLogEvents>(this.attach_MsgLogEvents), new Action<MsgLogEvents>(this.detach_MsgLogEvents));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[Column(Storage="_LocaleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LocaleName
		{
			get
			{
				return this._LocaleName;
			}
			set
			{
				if ((this._LocaleName != value))
				{
					this.OnLocaleNameChanging(value);
					this.SendPropertyChanging();
					this._LocaleName = value;
					this.SendPropertyChanged("LocaleName");
					this.OnLocaleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="MsgLogCategories_MsgLogEvents", Storage="_MsgLogEvents", ThisKey="ID", OtherKey="CategoryIX")]
		public EntitySet<MsgLogEvents> MsgLogEvents
		{
			get
			{
				return this._MsgLogEvents;
			}
			set
			{
				this._MsgLogEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsgLogEvents(MsgLogEvents entity)
		{
			this.SendPropertyChanging();
			entity.MsgLogCategories = this;
		}
		
		private void detach_MsgLogEvents(MsgLogEvents entity)
		{
			this.SendPropertyChanging();
			entity.MsgLogCategories = null;
		}
	}
	
	[Table(Name="Messages.LogEvents")]
	public partial class MsgLogEvents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private byte _CategoryIX;
		
		private System.DateTime _DateTime;
		
		private string _Description;
		
		private EntityRef<MsgLogCategories> _MsgLogCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCategoryIXChanging(byte value);
    partial void OnCategoryIXChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MsgLogEvents()
		{
			this._MsgLogCategories = default(EntityRef<MsgLogCategories>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="TinyInt NOT NULL")]
		public byte CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					if (this._MsgLogCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIXChanging(value);
					this.SendPropertyChanging();
					this._CategoryIX = value;
					this.SendPropertyChanged("CategoryIX");
					this.OnCategoryIXChanged();
				}
			}
		}
		
		[Column(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="MsgLogCategories_MsgLogEvents", Storage="_MsgLogCategories", ThisKey="CategoryIX", OtherKey="ID", IsForeignKey=true)]
		public MsgLogCategories MsgLogCategories
		{
			get
			{
				return this._MsgLogCategories.Entity;
			}
			set
			{
				MsgLogCategories previousValue = this._MsgLogCategories.Entity;
				if (((previousValue != value) 
							|| (this._MsgLogCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsgLogCategories.Entity = null;
						previousValue.MsgLogEvents.Remove(this);
					}
					this._MsgLogCategories.Entity = value;
					if ((value != null))
					{
						value.MsgLogEvents.Add(this);
						this._CategoryIX = value.ID;
					}
					else
					{
						this._CategoryIX = default(byte);
					}
					this.SendPropertyChanged("MsgLogCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Messages.Priority")]
	public partial class MsgPriorities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<MsgList> _MsgLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MsgPriorities()
		{
			this._MsgLists = new EntitySet<MsgList>(new Action<MsgList>(this.attach_MsgLists), new Action<MsgList>(this.detach_MsgLists));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="MsgPriorities_MsgList", Storage="_MsgLists", ThisKey="ID", OtherKey="PriorityIX")]
		public EntitySet<MsgList> MsgLists
		{
			get
			{
				return this._MsgLists;
			}
			set
			{
				this._MsgLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsgLists(MsgList entity)
		{
			this.SendPropertyChanging();
			entity.MsgPriorities = this;
		}
		
		private void detach_MsgLists(MsgList entity)
		{
			this.SendPropertyChanging();
			entity.MsgPriorities = null;
		}
	}
	
	[Table(Name="Messages.States")]
	public partial class MsgStates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _EnglishName;
		
		private string _LocaleName;
		
		private string _Description;
		
		private EntitySet<MsgList> _MsgLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnLocaleNameChanging(string value);
    partial void OnLocaleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MsgStates()
		{
			this._MsgLists = new EntitySet<MsgList>(new Action<MsgList>(this.attach_MsgLists), new Action<MsgList>(this.detach_MsgLists));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[Column(Storage="_LocaleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LocaleName
		{
			get
			{
				return this._LocaleName;
			}
			set
			{
				if ((this._LocaleName != value))
				{
					this.OnLocaleNameChanging(value);
					this.SendPropertyChanging();
					this._LocaleName = value;
					this.SendPropertyChanged("LocaleName");
					this.OnLocaleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="MsgStates_MsgList", Storage="_MsgLists", ThisKey="ID", OtherKey="StateIX")]
		public EntitySet<MsgList> MsgLists
		{
			get
			{
				return this._MsgLists;
			}
			set
			{
				this._MsgLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsgLists(MsgList entity)
		{
			this.SendPropertyChanging();
			entity.MsgStates = this;
		}
		
		private void detach_MsgLists(MsgList entity)
		{
			this.SendPropertyChanging();
			entity.MsgStates = null;
		}
	}
	
	[Table(Name="Messages.List")]
	public partial class MsgList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private byte _CategoryIX;
		
		private System.Nullable<byte> _PriorityIX;
		
		private byte _StateIX;
		
		private System.Nullable<int> _RefIX;
		
		private string _Text;
		
		private System.DateTime _DateTime;
		
		private System.Nullable<byte> _LongMessageCount;
		
		private string _DestinationNumber;
		
		private System.DateTime _StateChangedDateTime;
		
		private string _MessageID;
		
		private EntityRef<MsgPriorities> _MsgPriorities;
		
		private EntityRef<MsgStates> _MsgStates;
		
		private EntityRef<MsgCategories> _MsgCategories;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCategoryIXChanging(byte value);
    partial void OnCategoryIXChanged();
    partial void OnPriorityIXChanging(System.Nullable<byte> value);
    partial void OnPriorityIXChanged();
    partial void OnStateIXChanging(byte value);
    partial void OnStateIXChanged();
    partial void OnRefIXChanging(System.Nullable<int> value);
    partial void OnRefIXChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnLongMessageCountChanging(System.Nullable<byte> value);
    partial void OnLongMessageCountChanged();
    partial void OnDestinationNumberChanging(string value);
    partial void OnDestinationNumberChanged();
    partial void OnStateChangedDateTimeChanging(System.DateTime value);
    partial void OnStateChangedDateTimeChanged();
    partial void OnMessageIDChanging(string value);
    partial void OnMessageIDChanged();
    #endregion
		
		public MsgList()
		{
			this._MsgPriorities = default(EntityRef<MsgPriorities>);
			this._MsgStates = default(EntityRef<MsgStates>);
			this._MsgCategories = default(EntityRef<MsgCategories>);
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="TinyInt NOT NULL")]
		public byte CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					if (this._MsgCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIXChanging(value);
					this.SendPropertyChanging();
					this._CategoryIX = value;
					this.SendPropertyChanged("CategoryIX");
					this.OnCategoryIXChanged();
				}
			}
		}
		
		[Column(Storage="_PriorityIX", DbType="TinyInt")]
		public System.Nullable<byte> PriorityIX
		{
			get
			{
				return this._PriorityIX;
			}
			set
			{
				if ((this._PriorityIX != value))
				{
					if (this._MsgPriorities.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriorityIXChanging(value);
					this.SendPropertyChanging();
					this._PriorityIX = value;
					this.SendPropertyChanged("PriorityIX");
					this.OnPriorityIXChanged();
				}
			}
		}
		
		[Column(Storage="_StateIX", DbType="TinyInt NOT NULL")]
		public byte StateIX
		{
			get
			{
				return this._StateIX;
			}
			set
			{
				if ((this._StateIX != value))
				{
					if (this._MsgStates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIXChanging(value);
					this.SendPropertyChanging();
					this._StateIX = value;
					this.SendPropertyChanged("StateIX");
					this.OnStateIXChanged();
				}
			}
		}
		
		[Column(Storage="_RefIX", DbType="Int")]
		public System.Nullable<int> RefIX
		{
			get
			{
				return this._RefIX;
			}
			set
			{
				if ((this._RefIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefIXChanging(value);
					this.SendPropertyChanging();
					this._RefIX = value;
					this.SendPropertyChanged("RefIX");
					this.OnRefIXChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LongMessageCount", DbType="TinyInt")]
		public System.Nullable<byte> LongMessageCount
		{
			get
			{
				return this._LongMessageCount;
			}
			set
			{
				if ((this._LongMessageCount != value))
				{
					this.OnLongMessageCountChanging(value);
					this.SendPropertyChanging();
					this._LongMessageCount = value;
					this.SendPropertyChanged("LongMessageCount");
					this.OnLongMessageCountChanged();
				}
			}
		}
		
		[Column(Storage="_DestinationNumber", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string DestinationNumber
		{
			get
			{
				return this._DestinationNumber;
			}
			set
			{
				if ((this._DestinationNumber != value))
				{
					this.OnDestinationNumberChanging(value);
					this.SendPropertyChanging();
					this._DestinationNumber = value;
					this.SendPropertyChanged("DestinationNumber");
					this.OnDestinationNumberChanged();
				}
			}
		}
		
		[Column(Storage="_StateChangedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime StateChangedDateTime
		{
			get
			{
				return this._StateChangedDateTime;
			}
			set
			{
				if ((this._StateChangedDateTime != value))
				{
					this.OnStateChangedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StateChangedDateTime = value;
					this.SendPropertyChanged("StateChangedDateTime");
					this.OnStateChangedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_MessageID", DbType="NVarChar(20)")]
		public string MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[Association(Name="MsgPriorities_MsgList", Storage="_MsgPriorities", ThisKey="PriorityIX", OtherKey="ID", IsForeignKey=true)]
		public MsgPriorities MsgPriorities
		{
			get
			{
				return this._MsgPriorities.Entity;
			}
			set
			{
				MsgPriorities previousValue = this._MsgPriorities.Entity;
				if (((previousValue != value) 
							|| (this._MsgPriorities.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsgPriorities.Entity = null;
						previousValue.MsgLists.Remove(this);
					}
					this._MsgPriorities.Entity = value;
					if ((value != null))
					{
						value.MsgLists.Add(this);
						this._PriorityIX = value.ID;
					}
					else
					{
						this._PriorityIX = default(Nullable<byte>);
					}
					this.SendPropertyChanged("MsgPriorities");
				}
			}
		}
		
		[Association(Name="MsgStates_MsgList", Storage="_MsgStates", ThisKey="StateIX", OtherKey="ID", IsForeignKey=true)]
		public MsgStates MsgStates
		{
			get
			{
				return this._MsgStates.Entity;
			}
			set
			{
				MsgStates previousValue = this._MsgStates.Entity;
				if (((previousValue != value) 
							|| (this._MsgStates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsgStates.Entity = null;
						previousValue.MsgLists.Remove(this);
					}
					this._MsgStates.Entity = value;
					if ((value != null))
					{
						value.MsgLists.Add(this);
						this._StateIX = value.ID;
					}
					else
					{
						this._StateIX = default(byte);
					}
					this.SendPropertyChanged("MsgStates");
				}
			}
		}
		
		[Association(Name="MsgCategories_MsgList", Storage="_MsgCategories", ThisKey="CategoryIX", OtherKey="ID", IsForeignKey=true)]
		public MsgCategories MsgCategories
		{
			get
			{
				return this._MsgCategories.Entity;
			}
			set
			{
				MsgCategories previousValue = this._MsgCategories.Entity;
				if (((previousValue != value) 
							|| (this._MsgCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsgCategories.Entity = null;
						previousValue.MsgLists.Remove(this);
					}
					this._MsgCategories.Entity = value;
					if ((value != null))
					{
						value.MsgLists.Add(this);
						this._CategoryIX = value.ID;
					}
					else
					{
						this._CategoryIX = default(byte);
					}
					this.SendPropertyChanged("MsgCategories");
				}
			}
		}
		
		[Association(Name="RefList_MsgList", Storage="_RefList", ThisKey="RefIX", OtherKey="ID", IsForeignKey=true)]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.MsgLists.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.MsgLists.Add(this);
						this._RefIX = value.ID;
					}
					else
					{
						this._RefIX = default(Nullable<int>);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class SP_SelectApplicationsResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		private System.Nullable<bool> _IsFixed;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Description;
		
		public SP_SelectApplicationsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_IsFixed", DbType="Bit")]
		public System.Nullable<bool> IsFixed
		{
			get
			{
				return this._IsFixed;
			}
			set
			{
				if ((this._IsFixed != value))
				{
					this._IsFixed = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCategoriesResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		public SP_SelectCategoriesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectServicesListResult
	{
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Code;
		
		private string _Name;
		
		private System.Nullable<short> _CategoryIX;
		
		private string _CategoryName;
		
		private int _PriceFree;
		
		private int _PriceGov;
		
		private string _Description;
		
		public SP_SelectServicesListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL")]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="SmallInt")]
		public System.Nullable<short> CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					this._CategoryIX = value;
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
		
		[Column(Storage="_PriceFree", DbType="Int NOT NULL")]
		public int PriceFree
		{
			get
			{
				return this._PriceFree;
			}
			set
			{
				if ((this._PriceFree != value))
				{
					this._PriceFree = value;
				}
			}
		}
		
		[Column(Storage="_PriceGov", DbType="Int NOT NULL")]
		public int PriceGov
		{
			get
			{
				return this._PriceGov;
			}
			set
			{
				if ((this._PriceGov != value))
				{
					this._PriceGov = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectInsFullDataResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _BaseIsActive;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		private System.Nullable<bool> _IsIns1;
		
		private System.Nullable<bool> _IsIns2;
		
		private System.Nullable<System.DateTime> _ContractStartDate;
		
		private System.Nullable<System.DateTime> _ContractEndDate;
		
		private System.Nullable<byte> _PatientPercent;
		
		private System.Nullable<int> _InsurerPartLimit;
		
		private System.Nullable<short> _Ins2FormulasIX;
		
		private string _Description;
		
		public SP_SelectInsFullDataResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_BaseIsActive", DbType="Bit")]
		public System.Nullable<bool> BaseIsActive
		{
			get
			{
				return this._BaseIsActive;
			}
			set
			{
				if ((this._BaseIsActive != value))
				{
					this._BaseIsActive = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_IsIns1", DbType="Bit")]
		public System.Nullable<bool> IsIns1
		{
			get
			{
				return this._IsIns1;
			}
			set
			{
				if ((this._IsIns1 != value))
				{
					this._IsIns1 = value;
				}
			}
		}
		
		[Column(Storage="_IsIns2", DbType="Bit")]
		public System.Nullable<bool> IsIns2
		{
			get
			{
				return this._IsIns2;
			}
			set
			{
				if ((this._IsIns2 != value))
				{
					this._IsIns2 = value;
				}
			}
		}
		
		[Column(Storage="_ContractStartDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ContractStartDate
		{
			get
			{
				return this._ContractStartDate;
			}
			set
			{
				if ((this._ContractStartDate != value))
				{
					this._ContractStartDate = value;
				}
			}
		}
		
		[Column(Storage="_ContractEndDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ContractEndDate
		{
			get
			{
				return this._ContractEndDate;
			}
			set
			{
				if ((this._ContractEndDate != value))
				{
					this._ContractEndDate = value;
				}
			}
		}
		
		[Column(Storage="_PatientPercent", DbType="TinyInt")]
		public System.Nullable<byte> PatientPercent
		{
			get
			{
				return this._PatientPercent;
			}
			set
			{
				if ((this._PatientPercent != value))
				{
					this._PatientPercent = value;
				}
			}
		}
		
		[Column(Storage="_InsurerPartLimit", DbType="Int")]
		public System.Nullable<int> InsurerPartLimit
		{
			get
			{
				return this._InsurerPartLimit;
			}
			set
			{
				if ((this._InsurerPartLimit != value))
				{
					this._InsurerPartLimit = value;
				}
			}
		}
		
		[Column(Storage="_Ins2FormulasIX", DbType="SmallInt")]
		public System.Nullable<short> Ins2FormulasIX
		{
			get
			{
				return this._Ins2FormulasIX;
			}
			set
			{
				if ((this._Ins2FormulasIX != value))
				{
					this._Ins2FormulasIX = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectPerformersResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<bool> _IsExpert;
		
		private System.Nullable<bool> _IsPhysician;
		
		private string _FullName;
		
		private string _FirstName;
		
		private string _LastName;
		
		public SP_SelectPerformersResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_IsExpert", DbType="Bit")]
		public System.Nullable<bool> IsExpert
		{
			get
			{
				return this._IsExpert;
			}
			set
			{
				if ((this._IsExpert != value))
				{
					this._IsExpert = value;
				}
			}
		}
		
		[Column(Storage="_IsPhysician", DbType="Bit")]
		public System.Nullable<bool> IsPhysician
		{
			get
			{
				return this._IsPhysician;
			}
			set
			{
				if ((this._IsPhysician != value))
				{
					this._IsPhysician = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(38) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(15)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(20)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
	}
	
	public partial class SP_SelectPriceColumnsListResult
	{
		
		private string _ColumnName;
		
		private string _Name;
		
		public SP_SelectPriceColumnsListResult()
		{
		}
		
		[Column(Storage="_ColumnName", DbType="NVarChar(15)")]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this._ColumnName = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectServicesInGroupsResult
	{
		
		private short _ID;
		
		private System.Nullable<short> _GroupID;
		
		private string _Code;
		
		private string _Name;
		
		public SP_SelectServicesInGroupsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL")]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="SmallInt")]
		public System.Nullable<short> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this._GroupID = value;
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectGroupsResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		public SP_SelectGroupsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectIns2FormulaColumnsResult
	{
		
		private string _ColumnName;
		
		private string _Name;
		
		public SP_SelectIns2FormulaColumnsResult()
		{
		}
		
		[Column(Storage="_ColumnName", DbType="NVarChar(20)")]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this._ColumnName = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(26) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectIns2FormulasResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		public SP_SelectIns2FormulasResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCashesResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		public SP_SelectCashesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCashiersCashesListResult
	{
		
		private short _CashierID;
		
		private string _UserName;
		
		private string _FullName;
		
		private short _CashID;
		
		private bool _CashIsActive;
		
		private string _CashName;
		
		public SP_SelectCashiersCashesListResult()
		{
		}
		
		[Column(Storage="_CashierID", DbType="SmallInt NOT NULL")]
		public short CashierID
		{
			get
			{
				return this._CashierID;
			}
			set
			{
				if ((this._CashierID != value))
				{
					this._CashierID = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(41) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_CashID", DbType="SmallInt NOT NULL")]
		public short CashID
		{
			get
			{
				return this._CashID;
			}
			set
			{
				if ((this._CashID != value))
				{
					this._CashID = value;
				}
			}
		}
		
		[Column(Storage="_CashIsActive", DbType="Bit NOT NULL")]
		public bool CashIsActive
		{
			get
			{
				return this._CashIsActive;
			}
			set
			{
				if ((this._CashIsActive != value))
				{
					this._CashIsActive = value;
				}
			}
		}
		
		[Column(Storage="_CashName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CashName
		{
			get
			{
				return this._CashName;
			}
			set
			{
				if ((this._CashName != value))
				{
					this._CashName = value;
				}
			}
		}
	}
	
	public partial class SP_SelectRefServicesDataResult
	{
		
		private string _Code;
		
		private string _ServiceName;
		
		private string _CategoryName;
		
		private System.Nullable<int> _PriceFree;
		
		private System.Nullable<int> _PriceGov;
		
		private string _Description;
		
		private byte _Quantity;
		
		private string _ExpertName;
		
		private string _PhysicianName;
		
		private System.Nullable<int> _Ins1Price;
		
		private System.Nullable<int> _Ins1PartPrice;
		
		private System.Nullable<int> _Ins2Price;
		
		private System.Nullable<int> _Ins2PartPrice;
		
		private int _PatientPayablePrice;
		
		public SP_SelectRefServicesDataResult()
		{
		}
		
		[Column(Storage="_Code", DbType="NVarChar(5)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[Column(Storage="_ServiceName", DbType="NVarChar(255)")]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this._ServiceName = value;
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(30)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
		
		[Column(Storage="_PriceFree", DbType="Int")]
		public System.Nullable<int> PriceFree
		{
			get
			{
				return this._PriceFree;
			}
			set
			{
				if ((this._PriceFree != value))
				{
					this._PriceFree = value;
				}
			}
		}
		
		[Column(Storage="_PriceGov", DbType="Int")]
		public System.Nullable<int> PriceGov
		{
			get
			{
				return this._PriceGov;
			}
			set
			{
				if ((this._PriceGov != value))
				{
					this._PriceGov = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="TinyInt NOT NULL")]
		public byte Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this._Quantity = value;
				}
			}
		}
		
		[Column(Storage="_ExpertName", DbType="NVarChar(36)")]
		public string ExpertName
		{
			get
			{
				return this._ExpertName;
			}
			set
			{
				if ((this._ExpertName != value))
				{
					this._ExpertName = value;
				}
			}
		}
		
		[Column(Storage="_PhysicianName", DbType="NVarChar(36)")]
		public string PhysicianName
		{
			get
			{
				return this._PhysicianName;
			}
			set
			{
				if ((this._PhysicianName != value))
				{
					this._PhysicianName = value;
				}
			}
		}
		
		[Column(Storage="_Ins1Price", DbType="Int")]
		public System.Nullable<int> Ins1Price
		{
			get
			{
				return this._Ins1Price;
			}
			set
			{
				if ((this._Ins1Price != value))
				{
					this._Ins1Price = value;
				}
			}
		}
		
		[Column(Storage="_Ins1PartPrice", DbType="Int")]
		public System.Nullable<int> Ins1PartPrice
		{
			get
			{
				return this._Ins1PartPrice;
			}
			set
			{
				if ((this._Ins1PartPrice != value))
				{
					this._Ins1PartPrice = value;
				}
			}
		}
		
		[Column(Storage="_Ins2Price", DbType="Int")]
		public System.Nullable<int> Ins2Price
		{
			get
			{
				return this._Ins2Price;
			}
			set
			{
				if ((this._Ins2Price != value))
				{
					this._Ins2Price = value;
				}
			}
		}
		
		[Column(Storage="_Ins2PartPrice", DbType="Int")]
		public System.Nullable<int> Ins2PartPrice
		{
			get
			{
				return this._Ins2PartPrice;
			}
			set
			{
				if ((this._Ins2PartPrice != value))
				{
					this._Ins2PartPrice = value;
				}
			}
		}
		
		[Column(Storage="_PatientPayablePrice", DbType="Int NOT NULL")]
		public int PatientPayablePrice
		{
			get
			{
				return this._PatientPayablePrice;
			}
			set
			{
				if ((this._PatientPayablePrice != value))
				{
					this._PatientPayablePrice = value;
				}
			}
		}
	}
	
	public partial class SP_SelectStatusResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Title;
		
		public SP_SelectStatusResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
	
	public partial class SP_SelectBanksResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		public SP_SelectBanksResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectDocumentPatientsResult
	{
		
		private System.Nullable<long> _RowNumber;
		
		private int _PatientListID;
		
		private string _PatientID;
		
		private string _FullName;
		
		private int _RefID;
		
		private System.DateTime _RefDate;
		
		private System.Nullable<int> _DocumentsCount;
		
		public SP_SelectDocumentPatientsResult()
		{
		}
		
		[Column(Storage="_RowNumber", DbType="BigInt")]
		public System.Nullable<long> RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this._RowNumber = value;
				}
			}
		}
		
		[Column(Storage="_PatientListID", DbType="Int NOT NULL")]
		public int PatientListID
		{
			get
			{
				return this._PatientListID;
			}
			set
			{
				if ((this._PatientListID != value))
				{
					this._PatientListID = value;
				}
			}
		}
		
		[Column(Storage="_PatientID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(51) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_RefID", DbType="Int NOT NULL")]
		public int RefID
		{
			get
			{
				return this._RefID;
			}
			set
			{
				if ((this._RefID != value))
				{
					this._RefID = value;
				}
			}
		}
		
		[Column(Storage="_RefDate", DbType="DateTime NOT NULL")]
		public System.DateTime RefDate
		{
			get
			{
				return this._RefDate;
			}
			set
			{
				if ((this._RefDate != value))
				{
					this._RefDate = value;
				}
			}
		}
		
		[Column(Storage="_DocumentsCount", DbType="Int")]
		public System.Nullable<int> DocumentsCount
		{
			get
			{
				return this._DocumentsCount;
			}
			set
			{
				if ((this._DocumentsCount != value))
				{
					this._DocumentsCount = value;
				}
			}
		}
	}
	
	public partial class SP_SelectTypeResult
	{
		
		private System.Nullable<short> _ID;
		
		private int _IsActive;
		
		private string _Title;
		
		private string _Description;
		
		public SP_SelectTypeResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Int NOT NULL")]
		public int IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCashesStatusResult
	{
		
		private System.Nullable<long> _RowNo;
		
		private short _CashID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _CashLogID;
		
		private System.Nullable<int> _CashStatusID;
		
		private string _CashStatus;
		
		private System.Nullable<int> _InOutBalance;
		
		public SP_SelectCashesStatusResult()
		{
		}
		
		[Column(Storage="_RowNo", DbType="BigInt")]
		public System.Nullable<long> RowNo
		{
			get
			{
				return this._RowNo;
			}
			set
			{
				if ((this._RowNo != value))
				{
					this._RowNo = value;
				}
			}
		}
		
		[Column(Storage="_CashID", DbType="SmallInt NOT NULL")]
		public short CashID
		{
			get
			{
				return this._CashID;
			}
			set
			{
				if ((this._CashID != value))
				{
					this._CashID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_CashLogID", DbType="Int")]
		public System.Nullable<int> CashLogID
		{
			get
			{
				return this._CashLogID;
			}
			set
			{
				if ((this._CashLogID != value))
				{
					this._CashLogID = value;
				}
			}
		}
		
		[Column(Storage="_CashStatusID", DbType="Int")]
		public System.Nullable<int> CashStatusID
		{
			get
			{
				return this._CashStatusID;
			}
			set
			{
				if ((this._CashStatusID != value))
				{
					this._CashStatusID = value;
				}
			}
		}
		
		[Column(Storage="_CashStatus", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string CashStatus
		{
			get
			{
				return this._CashStatus;
			}
			set
			{
				if ((this._CashStatus != value))
				{
					this._CashStatus = value;
				}
			}
		}
		
		[Column(Storage="_InOutBalance", DbType="Int")]
		public System.Nullable<int> InOutBalance
		{
			get
			{
				return this._InOutBalance;
			}
			set
			{
				if ((this._InOutBalance != value))
				{
					this._InOutBalance = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCashPatientsResult
	{
		
		private int _PatientListID;
		
		private string _PatientID;
		
		private string _FullName;
		
		private int _RefID;
		
		private System.DateTime _RefDate;
		
		private System.Nullable<short> _Ins1IX;
		
		private System.Nullable<short> _Ins2IX;
		
		private System.Nullable<int> _PatientPayable;
		
		public SP_SelectCashPatientsResult()
		{
		}
		
		[Column(Storage="_PatientListID", DbType="Int NOT NULL")]
		public int PatientListID
		{
			get
			{
				return this._PatientListID;
			}
			set
			{
				if ((this._PatientListID != value))
				{
					this._PatientListID = value;
				}
			}
		}
		
		[Column(Storage="_PatientID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(51) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_RefID", DbType="Int NOT NULL")]
		public int RefID
		{
			get
			{
				return this._RefID;
			}
			set
			{
				if ((this._RefID != value))
				{
					this._RefID = value;
				}
			}
		}
		
		[Column(Storage="_RefDate", DbType="DateTime NOT NULL")]
		public System.DateTime RefDate
		{
			get
			{
				return this._RefDate;
			}
			set
			{
				if ((this._RefDate != value))
				{
					this._RefDate = value;
				}
			}
		}
		
		[Column(Storage="_Ins1IX", DbType="SmallInt")]
		public System.Nullable<short> Ins1IX
		{
			get
			{
				return this._Ins1IX;
			}
			set
			{
				if ((this._Ins1IX != value))
				{
					this._Ins1IX = value;
				}
			}
		}
		
		[Column(Storage="_Ins2IX", DbType="SmallInt")]
		public System.Nullable<short> Ins2IX
		{
			get
			{
				return this._Ins2IX;
			}
			set
			{
				if ((this._Ins2IX != value))
				{
					this._Ins2IX = value;
				}
			}
		}
		
		[Column(Storage="_PatientPayable", DbType="Int")]
		public System.Nullable<int> PatientPayable
		{
			get
			{
				return this._PatientPayable;
			}
			set
			{
				if ((this._PatientPayable != value))
				{
					this._PatientPayable = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCashiersCashesResult
	{
		
		private System.Nullable<short> _CashierID;
		
		private System.Nullable<short> _CashID;
		
		private int _CashIsActive;
		
		private string _CashName;
		
		public SP_SelectCashiersCashesResult()
		{
		}
		
		[Column(Storage="_CashierID", DbType="SmallInt")]
		public System.Nullable<short> CashierID
		{
			get
			{
				return this._CashierID;
			}
			set
			{
				if ((this._CashierID != value))
				{
					this._CashierID = value;
				}
			}
		}
		
		[Column(Storage="_CashID", DbType="SmallInt")]
		public System.Nullable<short> CashID
		{
			get
			{
				return this._CashID;
			}
			set
			{
				if ((this._CashID != value))
				{
					this._CashID = value;
				}
			}
		}
		
		[Column(Storage="_CashIsActive", DbType="Int NOT NULL")]
		public int CashIsActive
		{
			get
			{
				return this._CashIsActive;
			}
			set
			{
				if ((this._CashIsActive != value))
				{
					this._CashIsActive = value;
				}
			}
		}
		
		[Column(Storage="_CashName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CashName
		{
			get
			{
				return this._CashName;
			}
			set
			{
				if ((this._CashName != value))
				{
					this._CashName = value;
				}
			}
		}
	}
	
	public partial class SP_SelectAppAdditionalColumnsResult
	{
		
		private System.Nullable<short> _ApplicationIX;
		
		private short _ID;
		
		private string _FieldName;
		
		private string _Title;
		
		private byte _TypeID;
		
		private System.Nullable<byte> _Lenght;
		
		private string _Description;
		
		public SP_SelectAppAdditionalColumnsResult()
		{
		}
		
		[Column(Storage="_ApplicationIX", DbType="SmallInt")]
		public System.Nullable<short> ApplicationIX
		{
			get
			{
				return this._ApplicationIX;
			}
			set
			{
				if ((this._ApplicationIX != value))
				{
					this._ApplicationIX = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL")]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="NVarChar(10)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this._FieldName = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="TinyInt NOT NULL")]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[Column(Storage="_Lenght", DbType="TinyInt")]
		public System.Nullable<byte> Lenght
		{
			get
			{
				return this._Lenght;
			}
			set
			{
				if ((this._Lenght != value))
				{
					this._Lenght = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectMultiSelectItemsResult
	{
		
		private System.Nullable<short> _ID;
		
		private string _Title;
		
		public SP_SelectMultiSelectItemsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
	
	public partial class SP_SelectTemplatesResult
	{
		
		private short _ID;
		
		private System.Nullable<short> _ParentIX;
		
		private string _Name;
		
		private System.Nullable<short> _Code;
		
		private bool _IsGroup;
		
		private System.Nullable<bool> _IsDefault;
		
		private string _Description;
		
		public SP_SelectTemplatesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL")]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentIX", DbType="SmallInt")]
		public System.Nullable<short> ParentIX
		{
			get
			{
				return this._ParentIX;
			}
			set
			{
				if ((this._ParentIX != value))
				{
					this._ParentIX = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Code", DbType="SmallInt")]
		public System.Nullable<short> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[Column(Storage="_IsGroup", DbType="Bit NOT NULL")]
		public bool IsGroup
		{
			get
			{
				return this._IsGroup;
			}
			set
			{
				if ((this._IsGroup != value))
				{
					this._IsGroup = value;
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit")]
		public System.Nullable<bool> IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this._IsDefault = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectPatMultiSelectItemsResult
	{
		
		private System.Nullable<short> _ID;
		
		private string _Title;
		
		public SP_SelectPatMultiSelectItemsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
	
	public partial class SP_SelectRefMultiSelectItemsResult
	{
		
		private System.Nullable<short> _ID;
		
		private string _Title;
		
		public SP_SelectRefMultiSelectItemsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
	
	public partial class SP_SaveDocBinaryResult
	{
		
		private System.Nullable<int> _Column1;
		
		public SP_SaveDocBinaryResult()
		{
		}
		
		[Column(Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class SP_SelectBillTemplateResult
	{
		
		private short _ID;
		
		private short _UserIX;
		
		private System.Nullable<bool> _PrintLimitation;
		
		private bool _IsActive;
		
		private string _Name;
		
		private string _Description;
		
		public SP_SelectBillTemplateResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL")]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt NOT NULL")]
		public short UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					this._UserIX = value;
				}
			}
		}
		
		[Column(Storage="_PrintLimitation", DbType="Bit")]
		public System.Nullable<bool> PrintLimitation
		{
			get
			{
				return this._PrintLimitation;
			}
			set
			{
				if ((this._PrintLimitation != value))
				{
					this._PrintLimitation = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectLogCategoriesResult
	{
		
		private System.Nullable<byte> _ID;
		
		private string _Name;
		
		private string _Description;
		
		public SP_SelectLogCategoriesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="TinyInt")]
		public System.Nullable<byte> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectLogEventsResult
	{
		
		private int _ID;
		
		private string _FullName;
		
		private byte _CategoryIX;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _Date;
		
		public SP_SelectLogEventsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(41)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="TinyInt NOT NULL")]
		public byte CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					this._CategoryIX = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
