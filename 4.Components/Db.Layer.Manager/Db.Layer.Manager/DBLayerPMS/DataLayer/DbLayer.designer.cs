#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Negar.DBLayerPMS.DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PatientsSystem")]
	public partial class DbLayer : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUsersList(UsersList instance);
    partial void UpdateUsersList(UsersList instance);
    partial void DeleteUsersList(UsersList instance);
    partial void InsertUsersInGroup(UsersInGroup instance);
    partial void UpdateUsersInGroup(UsersInGroup instance);
    partial void DeleteUsersInGroup(UsersInGroup instance);
    partial void InsertUsersGroups(UsersGroups instance);
    partial void UpdateUsersGroups(UsersGroups instance);
    partial void DeleteUsersGroups(UsersGroups instance);
    partial void InsertPermissionsGroups(PermissionsGroups instance);
    partial void UpdatePermissionsGroups(PermissionsGroups instance);
    partial void DeletePermissionsGroups(PermissionsGroups instance);
    partial void InsertPermissionsUsers(PermissionsUsers instance);
    partial void UpdatePermissionsUsers(PermissionsUsers instance);
    partial void DeletePermissionsUsers(PermissionsUsers instance);
    partial void InsertHISApplication(HISApplication instance);
    partial void UpdateHISApplication(HISApplication instance);
    partial void DeleteHISApplication(HISApplication instance);
    partial void InsertRefPhysiciansSpec(RefPhysiciansSpec instance);
    partial void UpdateRefPhysiciansSpec(RefPhysiciansSpec instance);
    partial void DeleteRefPhysiciansSpec(RefPhysiciansSpec instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertPatJob(PatJob instance);
    partial void UpdatePatJob(PatJob instance);
    partial void DeletePatJob(PatJob instance);
    partial void InsertNamesBank(NamesBank instance);
    partial void UpdateNamesBank(NamesBank instance);
    partial void DeleteNamesBank(NamesBank instance);
    partial void InsertPatList(PatList instance);
    partial void UpdatePatList(PatList instance);
    partial void DeletePatList(PatList instance);
    partial void InsertInsurance(Insurance instance);
    partial void UpdateInsurance(Insurance instance);
    partial void DeleteInsurance(Insurance instance);
    partial void InsertPatDetail(PatDetail instance);
    partial void UpdatePatDetail(PatDetail instance);
    partial void DeletePatDetail(PatDetail instance);
    partial void InsertTablesIndex(TablesIndex instance);
    partial void UpdateTablesIndex(TablesIndex instance);
    partial void DeleteTablesIndex(TablesIndex instance);
    partial void InsertRefPhysician(RefPhysician instance);
    partial void UpdateRefPhysician(RefPhysician instance);
    partial void DeleteRefPhysician(RefPhysician instance);
    partial void InsertSendQueue(SendQueue instance);
    partial void UpdateSendQueue(SendQueue instance);
    partial void DeleteSendQueue(SendQueue instance);
    partial void InsertSendFailed(SendFailed instance);
    partial void UpdateSendFailed(SendFailed instance);
    partial void DeleteSendFailed(SendFailed instance);
    partial void InsertSendSucceed(SendSucceed instance);
    partial void UpdateSendSucceed(SendSucceed instance);
    partial void DeleteSendSucceed(SendSucceed instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertDbEvent(DbEvent instance);
    partial void UpdateDbEvent(DbEvent instance);
    partial void DeleteDbEvent(DbEvent instance);
    partial void InsertSMSSettings(SMSSettings instance);
    partial void UpdateSMSSettings(SMSSettings instance);
    partial void DeleteSMSSettings(SMSSettings instance);
    partial void InsertSMSMessage(SMSMessage instance);
    partial void UpdateSMSMessage(SMSMessage instance);
    partial void DeleteSMSMessage(SMSMessage instance);
    #endregion
		
		public DbLayer() : 
				base("Data Source=.\\sqldeveloper;Initial Catalog=PatientsSystem;Integrated Security=Tru" +
						"e", mappingSource)
		{
			OnCreated();
		}
		
		public DbLayer(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbLayer(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbLayer(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbLayer(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UsersList> UsersLists
		{
			get
			{
				return this.GetTable<UsersList>();
			}
		}
		
		public System.Data.Linq.Table<UsersInGroup> UsersInGroups
		{
			get
			{
				return this.GetTable<UsersInGroup>();
			}
		}
		
		public System.Data.Linq.Table<UsersGroups> UsersGroups
		{
			get
			{
				return this.GetTable<UsersGroups>();
			}
		}
		
		public System.Data.Linq.Table<PermissionsGroups> PermissionsGroups
		{
			get
			{
				return this.GetTable<PermissionsGroups>();
			}
		}
		
		public System.Data.Linq.Table<PermissionsUsers> PermissionsUsers
		{
			get
			{
				return this.GetTable<PermissionsUsers>();
			}
		}
		
		public System.Data.Linq.Table<HISApplication> HISApplications
		{
			get
			{
				return this.GetTable<HISApplication>();
			}
		}
		
		public System.Data.Linq.Table<RefPhysiciansSpec> RefPhysiciansSpecs
		{
			get
			{
				return this.GetTable<RefPhysiciansSpec>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<PatJob> PatJobs
		{
			get
			{
				return this.GetTable<PatJob>();
			}
		}
		
		public System.Data.Linq.Table<NamesBank> NamesBanks
		{
			get
			{
				return this.GetTable<NamesBank>();
			}
		}
		
		public System.Data.Linq.Table<PatList> PatLists
		{
			get
			{
				return this.GetTable<PatList>();
			}
		}
		
		public System.Data.Linq.Table<Insurance> Insurances
		{
			get
			{
				return this.GetTable<Insurance>();
			}
		}
		
		public System.Data.Linq.Table<PatDetail> PatDetails
		{
			get
			{
				return this.GetTable<PatDetail>();
			}
		}
		
		public System.Data.Linq.Table<TablesIndex> TablesIndexes
		{
			get
			{
				return this.GetTable<TablesIndex>();
			}
		}
		
		public System.Data.Linq.Table<RefPhysician> RefPhysicians
		{
			get
			{
				return this.GetTable<RefPhysician>();
			}
		}
		
		public System.Data.Linq.Table<SendQueue> SendQueues
		{
			get
			{
				return this.GetTable<SendQueue>();
			}
		}
		
		public System.Data.Linq.Table<SendFailed> SendFaileds
		{
			get
			{
				return this.GetTable<SendFailed>();
			}
		}
		
		public System.Data.Linq.Table<SendSucceed> SendSucceeds
		{
			get
			{
				return this.GetTable<SendSucceed>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<DbEvent> DbEvents
		{
			get
			{
				return this.GetTable<DbEvent>();
			}
		}
		
		public System.Data.Linq.Table<SMSSettings> SMSSettings
		{
			get
			{
				return this.GetTable<SMSSettings>();
			}
		}
		
		public System.Data.Linq.Table<SMSMessage> SMSMessages
		{
			get
			{
				return this.GetTable<SMSMessage>();
			}
		}
		
		[Function(Name="Security.SP_SelectUsers")]
		public ISingleResult<SP_SelectUsersResult> SP_SelectUsers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectUsersResult>)(result.ReturnValue));
		}
		
		[Function(Name="Security.SP_InsertACLPermissionsGroups")]
		public int SP_InsertACLPermissionsGroups([Parameter(Name="GroupID", DbType="SmallInt")] System.Nullable<short> groupID, [Parameter(Name="ACLIX", DbType="Int")] System.Nullable<int> aCLIX, [Parameter(Name="IsAllowed", DbType="Bit")] System.Nullable<bool> isAllowed)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID, aCLIX, isAllowed);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Security.SP_InsertACLPermissionsUsers")]
		public int SP_InsertACLPermissionsUsers([Parameter(Name="UserIX", DbType="SmallInt")] System.Nullable<short> userIX, [Parameter(Name="ACLIX", DbType="Int")] System.Nullable<int> aCLIX, [Parameter(Name="IsAllowed", DbType="Bit")] System.Nullable<bool> isAllowed, [Parameter(Name="IsPremiered", DbType="Bit")] System.Nullable<bool> isPremiered)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userIX, aCLIX, isAllowed, isPremiered);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Security.SP_InsertUsersInGroups")]
		public int SP_InsertUsersInGroups([Parameter(Name="UserIX", DbType="SmallInt")] System.Nullable<short> userIX, [Parameter(Name="GroupIX", DbType="SmallInt")] System.Nullable<short> groupIX)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userIX, groupIX);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Security.SP_SelectACL")]
		public ISingleResult<SP_SelectACLResult> SP_SelectACL([Parameter(Name="AppID", DbType="SmallInt")] System.Nullable<short> appID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), appID);
			return ((ISingleResult<SP_SelectACLResult>)(result.ReturnValue));
		}
		
		[Function(Name="Security.SP_SelectACLPermissions")]
		public ISingleResult<SP_SelectACLPermissionsResult> SP_SelectACLPermissions([Parameter(Name="ACLID", DbType="Int")] System.Nullable<int> aCLID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aCLID);
			return ((ISingleResult<SP_SelectACLPermissionsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Security.SP_SelectGroups")]
		public ISingleResult<SP_SelectGroupsResult> SP_SelectGroups()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectGroupsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Security.SP_SelectUsersInGroups")]
		public ISingleResult<SP_SelectUsersInGroupsResult> SP_SelectUsersInGroups()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectUsersInGroupsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Security.SP_SelectACLPermissionsUsers")]
		public int SP_SelectACLPermissionsUsers([Parameter(Name="UserID", DbType="SmallInt")] System.Nullable<short> userID, [Parameter(Name="ACLID", DbType="Int")] System.Nullable<int> aCLID, [Parameter(Name="IsAllowed", DbType="Bit")] ref System.Nullable<bool> isAllowed)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, aCLID, isAllowed);
			isAllowed = ((System.Nullable<bool>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Clinic.SP_SelectRefPhysiciansSpecs")]
		public ISingleResult<SP_SelectRefPhysiciansSpecsResult> SP_SelectRefPhysiciansSpecs()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectRefPhysiciansSpecsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Clinic.SP_MixRefPhysicians")]
		public int SP_MixRefPhysicians([Parameter(Name="ToDeleteID", DbType="Int")] System.Nullable<int> toDeleteID, [Parameter(Name="ToReplaceID", DbType="Int")] System.Nullable<int> toReplaceID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), toDeleteID, toReplaceID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Locations.SP_SelectCities")]
		public ISingleResult<SP_SelectCitiesResult> SP_SelectCities()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectCitiesResult>)(result.ReturnValue));
		}
		
		[Function(Name="Locations.SP_SelectStates")]
		public ISingleResult<SP_SelectStatesResult> SP_SelectStates()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectStatesResult>)(result.ReturnValue));
		}
		
		[Function(Name="Locations.SP_SelectCountries")]
		public ISingleResult<SP_SelectCountriesResult> SP_SelectCountries()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectCountriesResult>)(result.ReturnValue));
		}
		
		[Function(Name="Patients.SP_SelectJobs")]
		public ISingleResult<SP_SelectJobsResult> SP_SelectJobs()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectJobsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Patients.SP_ChangeLockPatientList")]
		public int SP_ChangeLockPatientList([Parameter(Name="PatID", DbType="Int")] System.Nullable<int> patID, [Parameter(Name="IsLock", DbType="Bit")] System.Nullable<bool> isLock)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patID, isLock);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Patients.SP_CheckLockPatientList")]
		public int SP_CheckLockPatientList([Parameter(Name="PatID", DbType="Int")] System.Nullable<int> patID, [Parameter(Name="IsLock", DbType="Bit")] ref System.Nullable<bool> isLock)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patID, isLock);
			isLock = ((System.Nullable<bool>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Patients.SP_DeleteList")]
		public int SP_DeleteList([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Patients.SP_SelectLastPatientID")]
		public int SP_SelectLastPatientID([Parameter(Name="TodayDate", DbType="NVarChar(10)")] string todayDate, [Parameter(Name="PatientID", DbType="NVarChar(20)")] ref string patientID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), todayDate, patientID);
			patientID = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="Clinic.SP_RebuildIndex")]
		public int SP_RebuildIndex([Parameter(Name="ApplicationDb", DbType="NVarChar(50)")] string applicationDb, [Parameter(Name="TableFullName", DbType="NVarChar(100)")] string tableFullName, [Parameter(Name="IndexName", DbType="NVarChar(100)")] string indexName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationDb, tableFullName, indexName);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="[Log].SP_SelectCategories")]
		public ISingleResult<SP_SelectCategoriesResult> SP_SelectCategories()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectCategoriesResult>)(result.ReturnValue));
		}
		
		[Function(Name="[Log].SP_SelectEvents")]
		public ISingleResult<SP_SelectEventsResult> SP_SelectEvents([Parameter(Name="StartDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> startDate, [Parameter(Name="EndDate", DbType="SmallDateTime")] System.Nullable<System.DateTime> endDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate);
			return ((ISingleResult<SP_SelectEventsResult>)(result.ReturnValue));
		}
		
		[Function(Name="Clinic.SP_SelectRefPhysiciansFullDataList")]
		public ISingleResult<SP_SelectRefPhysiciansFullDataListResult> SP_SelectRefPhysiciansFullDataList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SP_SelectRefPhysiciansFullDataListResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="Security.Users")]
	public partial class UsersList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _UserName;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private bool _MustChangePassword;
		
		private string _Description;
		
		private EntitySet<UsersInGroup> _UsersInGroups;
		
		private EntitySet<PermissionsUsers> _PermissionsUsers;
		
		private EntitySet<DbEvent> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMustChangePasswordChanging(bool value);
    partial void OnMustChangePasswordChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UsersList()
		{
			this._UsersInGroups = new EntitySet<UsersInGroup>(new Action<UsersInGroup>(this.attach_UsersInGroups), new Action<UsersInGroup>(this.detach_UsersInGroups));
			this._PermissionsUsers = new EntitySet<PermissionsUsers>(new Action<PermissionsUsers>(this.attach_PermissionsUsers), new Action<PermissionsUsers>(this.detach_PermissionsUsers));
			this._Events = new EntitySet<DbEvent>(new Action<DbEvent>(this.attach_Events), new Action<DbEvent>(this.detach_Events));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(300)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_MustChangePassword", DbType="Bit NOT NULL")]
		public bool MustChangePassword
		{
			get
			{
				return this._MustChangePassword;
			}
			set
			{
				if ((this._MustChangePassword != value))
				{
					this.OnMustChangePasswordChanging(value);
					this.SendPropertyChanging();
					this._MustChangePassword = value;
					this.SendPropertyChanged("MustChangePassword");
					this.OnMustChangePasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="UsersList_UsersInGroup", Storage="_UsersInGroups", ThisKey="ID", OtherKey="UserIX")]
		public EntitySet<UsersInGroup> UsersInGroups
		{
			get
			{
				return this._UsersInGroups;
			}
			set
			{
				this._UsersInGroups.Assign(value);
			}
		}
		
		[Association(Name="UsersList_PermissionsUsers", Storage="_PermissionsUsers", ThisKey="ID", OtherKey="UserIX")]
		public EntitySet<PermissionsUsers> PermissionsUsers
		{
			get
			{
				return this._PermissionsUsers;
			}
			set
			{
				this._PermissionsUsers.Assign(value);
			}
		}
		
		[Association(Name="UsersList_DbEvent", Storage="_Events", ThisKey="ID", OtherKey="UserIX")]
		public EntitySet<DbEvent> DbEvents
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInGroups(UsersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.UsersList = this;
		}
		
		private void detach_UsersInGroups(UsersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.UsersList = null;
		}
		
		private void attach_PermissionsUsers(PermissionsUsers entity)
		{
			this.SendPropertyChanging();
			entity.UsersList = this;
		}
		
		private void detach_PermissionsUsers(PermissionsUsers entity)
		{
			this.SendPropertyChanging();
			entity.UsersList = null;
		}
		
		private void attach_Events(DbEvent entity)
		{
			this.SendPropertyChanging();
			entity.UsersList = this;
		}
		
		private void detach_Events(DbEvent entity)
		{
			this.SendPropertyChanging();
			entity.UsersList = null;
		}
	}
	
	[Table(Name="Security.UsersInGroups")]
	public partial class UsersInGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _UserIX;
		
		private short _GroupIX;
		
		private EntityRef<UsersList> _User;
		
		private EntityRef<UsersGroups> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIXChanging(short value);
    partial void OnUserIXChanged();
    partial void OnGroupIXChanging(short value);
    partial void OnGroupIXChanged();
    #endregion
		
		public UsersInGroup()
		{
			this._User = default(EntityRef<UsersList>);
			this._Group = default(EntityRef<UsersGroups>);
			OnCreated();
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_GroupIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short GroupIX
		{
			get
			{
				return this._GroupIX;
			}
			set
			{
				if ((this._GroupIX != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIXChanging(value);
					this.SendPropertyChanging();
					this._GroupIX = value;
					this.SendPropertyChanged("GroupIX");
					this.OnGroupIXChanged();
				}
			}
		}
		
		[Association(Name="UsersList_UsersInGroup", Storage="_User", ThisKey="UserIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UsersList UsersList
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				UsersList previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInGroups.Add(this);
						this._UserIX = value.ID;
					}
					else
					{
						this._UserIX = default(short);
					}
					this.SendPropertyChanged("UsersList");
				}
			}
		}
		
		[Association(Name="UsersGroups_UsersInGroup", Storage="_Group", ThisKey="GroupIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UsersGroups UsersGroups
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				UsersGroups previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UsersInGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UsersInGroups.Add(this);
						this._GroupIX = value.ID;
					}
					else
					{
						this._GroupIX = default(short);
					}
					this.SendPropertyChanged("UsersGroups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Security.Groups")]
	public partial class UsersGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UsersInGroup> _UsersInGroups;
		
		private EntitySet<PermissionsGroups> _PermissionsGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UsersGroups()
		{
			this._UsersInGroups = new EntitySet<UsersInGroup>(new Action<UsersInGroup>(this.attach_UsersInGroups), new Action<UsersInGroup>(this.detach_UsersInGroups));
			this._PermissionsGroups = new EntitySet<PermissionsGroups>(new Action<PermissionsGroups>(this.attach_PermissionsGroups), new Action<PermissionsGroups>(this.detach_PermissionsGroups));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="UsersGroups_UsersInGroup", Storage="_UsersInGroups", ThisKey="ID", OtherKey="GroupIX")]
		public EntitySet<UsersInGroup> UsersInGroups
		{
			get
			{
				return this._UsersInGroups;
			}
			set
			{
				this._UsersInGroups.Assign(value);
			}
		}
		
		[Association(Name="UsersGroups_PermissionsGroups", Storage="_PermissionsGroups", ThisKey="ID", OtherKey="GroupIX")]
		public EntitySet<PermissionsGroups> PermissionsGroups
		{
			get
			{
				return this._PermissionsGroups;
			}
			set
			{
				this._PermissionsGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInGroups(UsersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.UsersGroups = this;
		}
		
		private void detach_UsersInGroups(UsersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.UsersGroups = null;
		}
		
		private void attach_PermissionsGroups(PermissionsGroups entity)
		{
			this.SendPropertyChanging();
			entity.UsersGroups = this;
		}
		
		private void detach_PermissionsGroups(PermissionsGroups entity)
		{
			this.SendPropertyChanging();
			entity.UsersGroups = null;
		}
	}
	
	[Table(Name="Security.PermissionsGroups")]
	public partial class PermissionsGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _GroupIX;
		
		private int _ACLIX;
		
		private bool _IsAllowed;
		
		private EntityRef<UsersGroups> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIXChanging(short value);
    partial void OnGroupIXChanged();
    partial void OnACLIXChanging(int value);
    partial void OnACLIXChanged();
    partial void OnIsAllowedChanging(bool value);
    partial void OnIsAllowedChanged();
    #endregion
		
		public PermissionsGroups()
		{
			this._Group = default(EntityRef<UsersGroups>);
			OnCreated();
		}
		
		[Column(Storage="_GroupIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short GroupIX
		{
			get
			{
				return this._GroupIX;
			}
			set
			{
				if ((this._GroupIX != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIXChanging(value);
					this.SendPropertyChanging();
					this._GroupIX = value;
					this.SendPropertyChanged("GroupIX");
					this.OnGroupIXChanged();
				}
			}
		}
		
		[Column(Storage="_ACLIX", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ACLIX
		{
			get
			{
				return this._ACLIX;
			}
			set
			{
				if ((this._ACLIX != value))
				{
					this.OnACLIXChanging(value);
					this.SendPropertyChanging();
					this._ACLIX = value;
					this.SendPropertyChanged("ACLIX");
					this.OnACLIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsAllowed", DbType="Bit NOT NULL")]
		public bool IsAllowed
		{
			get
			{
				return this._IsAllowed;
			}
			set
			{
				if ((this._IsAllowed != value))
				{
					this.OnIsAllowedChanging(value);
					this.SendPropertyChanging();
					this._IsAllowed = value;
					this.SendPropertyChanged("IsAllowed");
					this.OnIsAllowedChanged();
				}
			}
		}
		
		[Association(Name="UsersGroups_PermissionsGroups", Storage="_Group", ThisKey="GroupIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UsersGroups UsersGroups
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				UsersGroups previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.PermissionsGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.PermissionsGroups.Add(this);
						this._GroupIX = value.ID;
					}
					else
					{
						this._GroupIX = default(short);
					}
					this.SendPropertyChanged("UsersGroups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Security.PermissionsUsers")]
	public partial class PermissionsUsers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _UserIX;
		
		private int _ACLIX;
		
		private bool _IsAllowed;
		
		private bool _IsPremiered;
		
		private EntityRef<UsersList> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIXChanging(short value);
    partial void OnUserIXChanged();
    partial void OnACLIXChanging(int value);
    partial void OnACLIXChanged();
    partial void OnIsAllowedChanging(bool value);
    partial void OnIsAllowedChanged();
    partial void OnIsPremieredChanging(bool value);
    partial void OnIsPremieredChanged();
    #endregion
		
		public PermissionsUsers()
		{
			this._User = default(EntityRef<UsersList>);
			OnCreated();
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_ACLIX", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ACLIX
		{
			get
			{
				return this._ACLIX;
			}
			set
			{
				if ((this._ACLIX != value))
				{
					this.OnACLIXChanging(value);
					this.SendPropertyChanging();
					this._ACLIX = value;
					this.SendPropertyChanged("ACLIX");
					this.OnACLIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsAllowed", DbType="Bit NOT NULL")]
		public bool IsAllowed
		{
			get
			{
				return this._IsAllowed;
			}
			set
			{
				if ((this._IsAllowed != value))
				{
					this.OnIsAllowedChanging(value);
					this.SendPropertyChanging();
					this._IsAllowed = value;
					this.SendPropertyChanged("IsAllowed");
					this.OnIsAllowedChanged();
				}
			}
		}
		
		[Column(Storage="_IsPremiered", DbType="Bit NOT NULL")]
		public bool IsPremiered
		{
			get
			{
				return this._IsPremiered;
			}
			set
			{
				if ((this._IsPremiered != value))
				{
					this.OnIsPremieredChanging(value);
					this.SendPropertyChanging();
					this._IsPremiered = value;
					this.SendPropertyChanged("IsPremiered");
					this.OnIsPremieredChanged();
				}
			}
		}
		
		[Association(Name="UsersList_PermissionsUsers", Storage="_User", ThisKey="UserIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UsersList UsersList
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				UsersList previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PermissionsUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PermissionsUsers.Add(this);
						this._UserIX = value.ID;
					}
					else
					{
						this._UserIX = default(short);
					}
					this.SendPropertyChanged("UsersList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Clinic.Applications")]
	public partial class HISApplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _EnglishName;
		
		private string _LocalizedName;
		
		private string _Edition;
		
		private string _Version;
		
		private string _DatabaseName;
		
		private string _DbVersion;
		
		private string _Description;
		
		private EntitySet<DbEvent> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnLocalizedNameChanging(string value);
    partial void OnLocalizedNameChanged();
    partial void OnEditionChanging(string value);
    partial void OnEditionChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnDatabaseNameChanging(string value);
    partial void OnDatabaseNameChanged();
    partial void OnDbVersionChanging(string value);
    partial void OnDbVersionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public HISApplication()
		{
			this._Events = new EntitySet<DbEvent>(new Action<DbEvent>(this.attach_Events), new Action<DbEvent>(this.detach_Events));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[Column(Storage="_LocalizedName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocalizedName
		{
			get
			{
				return this._LocalizedName;
			}
			set
			{
				if ((this._LocalizedName != value))
				{
					this.OnLocalizedNameChanging(value);
					this.SendPropertyChanging();
					this._LocalizedName = value;
					this.SendPropertyChanged("LocalizedName");
					this.OnLocalizedNameChanged();
				}
			}
		}
		
		[Column(Storage="_Edition", DbType="NVarChar(20)")]
		public string Edition
		{
			get
			{
				return this._Edition;
			}
			set
			{
				if ((this._Edition != value))
				{
					this.OnEditionChanging(value);
					this.SendPropertyChanging();
					this._Edition = value;
					this.SendPropertyChanged("Edition");
					this.OnEditionChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(10)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_DatabaseName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DatabaseName
		{
			get
			{
				return this._DatabaseName;
			}
			set
			{
				if ((this._DatabaseName != value))
				{
					this.OnDatabaseNameChanging(value);
					this.SendPropertyChanging();
					this._DatabaseName = value;
					this.SendPropertyChanged("DatabaseName");
					this.OnDatabaseNameChanged();
				}
			}
		}
		
		[Column(Storage="_DbVersion", DbType="NVarChar(50)")]
		public string DbVersion
		{
			get
			{
				return this._DbVersion;
			}
			set
			{
				if ((this._DbVersion != value))
				{
					this.OnDbVersionChanging(value);
					this.SendPropertyChanging();
					this._DbVersion = value;
					this.SendPropertyChanged("DbVersion");
					this.OnDbVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="HISApplication_DbEvent", Storage="_Events", ThisKey="ID", OtherKey="ApplicationIX")]
		public EntitySet<DbEvent> DbEvents
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(DbEvent entity)
		{
			this.SendPropertyChanging();
			entity.HISApplication = this;
		}
		
		private void detach_Events(DbEvent entity)
		{
			this.SendPropertyChanging();
			entity.HISApplication = null;
		}
	}
	
	[Table(Name="Clinic.RefPhysiciansSpecs")]
	public partial class RefPhysiciansSpec : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Title;
		
		private EntitySet<RefPhysician> _RefPhysicians;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public RefPhysiciansSpec()
		{
			this._RefPhysicians = new EntitySet<RefPhysician>(new Action<RefPhysician>(this.attach_RefPhysicians), new Action<RefPhysician>(this.detach_RefPhysicians));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="RefPhysiciansSpec_RefPhysician", Storage="_RefPhysicians", ThisKey="ID", OtherKey="SpecialtyIX")]
		public EntitySet<RefPhysician> RefPhysicians
		{
			get
			{
				return this._RefPhysicians;
			}
			set
			{
				this._RefPhysicians.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefPhysicians(RefPhysician entity)
		{
			this.SendPropertyChanging();
			entity.RefPhysiciansSpec = this;
		}
		
		private void detach_RefPhysicians(RefPhysician entity)
		{
			this.SendPropertyChanging();
			entity.RefPhysiciansSpec = null;
		}
	}
	
	[Table(Name="Locations.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private short _StateIX;
		
		private EntitySet<PatDetail> _PatDetails;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStateIXChanging(short value);
    partial void OnStateIXChanged();
    #endregion
		
		public City()
		{
			this._PatDetails = new EntitySet<PatDetail>(new Action<PatDetail>(this.attach_PatDetails), new Action<PatDetail>(this.detach_PatDetails));
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_StateIX", DbType="SmallInt NOT NULL")]
		public short StateIX
		{
			get
			{
				return this._StateIX;
			}
			set
			{
				if ((this._StateIX != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIXChanging(value);
					this.SendPropertyChanging();
					this._StateIX = value;
					this.SendPropertyChanged("StateIX");
					this.OnStateIXChanged();
				}
			}
		}
		
		[Association(Name="City_PatDetail", Storage="_PatDetails", ThisKey="ID", OtherKey="CityIX")]
		public EntitySet<PatDetail> PatDetails
		{
			get
			{
				return this._PatDetails;
			}
			set
			{
				this._PatDetails.Assign(value);
			}
		}
		
		[Association(Name="State_City", Storage="_State", ThisKey="StateIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._StateIX = value.ID;
					}
					else
					{
						this._StateIX = default(short);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatDetails(PatDetail entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_PatDetails(PatDetail entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[Table(Name="Locations.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private EntitySet<State> _States;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Country_State", Storage="_States", ThisKey="ID", OtherKey="CountryIX")]
		public EntitySet<State> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="Locations.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
		private short _CountryIX;
		
		private EntitySet<City> _Cities;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIXChanging(short value);
    partial void OnCountryIXChanged();
    #endregion
		
		public State()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryIX", DbType="SmallInt NOT NULL")]
		public short CountryIX
		{
			get
			{
				return this._CountryIX;
			}
			set
			{
				if ((this._CountryIX != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIXChanging(value);
					this.SendPropertyChanging();
					this._CountryIX = value;
					this.SendPropertyChanged("CountryIX");
					this.OnCountryIXChanged();
				}
			}
		}
		
		[Association(Name="State_City", Storage="_Cities", ThisKey="ID", OtherKey="StateIX")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[Association(Name="Country_State", Storage="_Country", ThisKey="CountryIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.States.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._CountryIX = value.ID;
					}
					else
					{
						this._CountryIX = default(short);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[Table(Name="Patients.Jobs")]
	public partial class PatJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Title;
		
		private EntitySet<PatDetail> _PatDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public PatJob()
		{
			this._PatDetails = new EntitySet<PatDetail>(new Action<PatDetail>(this.attach_PatDetails), new Action<PatDetail>(this.detach_PatDetails));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="PatJob_PatDetail", Storage="_PatDetails", ThisKey="ID", OtherKey="JobIX")]
		public EntitySet<PatDetail> PatDetails
		{
			get
			{
				return this._PatDetails;
			}
			set
			{
				this._PatDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatDetails(PatDetail entity)
		{
			this.SendPropertyChanging();
			entity.PatJob = this;
		}
		
		private void detach_PatDetails(PatDetail entity)
		{
			this.SendPropertyChanging();
			entity.PatJob = null;
		}
	}
	
	[Table(Name="Patients.NamesBank")]
	public partial class NamesBank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LocaleName;
		
		private string _EnglishName;
		
		private bool _IsFirstName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocaleNameChanging(string value);
    partial void OnLocaleNameChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnIsFirstNameChanging(bool value);
    partial void OnIsFirstNameChanged();
    #endregion
		
		public NamesBank()
		{
			OnCreated();
		}
		
		[Column(Storage="_LocaleName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LocaleName
		{
			get
			{
				return this._LocaleName;
			}
			set
			{
				if ((this._LocaleName != value))
				{
					this.OnLocaleNameChanging(value);
					this.SendPropertyChanging();
					this._LocaleName = value;
					this.SendPropertyChanged("LocaleName");
					this.OnLocaleNameChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(30)")]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsFirstName", DbType="Bit NOT NULL", IsPrimaryKey=true)]
		public bool IsFirstName
		{
			get
			{
				return this._IsFirstName;
			}
			set
			{
				if ((this._IsFirstName != value))
				{
					this.OnIsFirstNameChanging(value);
					this.SendPropertyChanging();
					this._IsFirstName = value;
					this.SendPropertyChanged("IsFirstName");
					this.OnIsFirstNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Patients.List")]
	public partial class PatList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PatientID;
		
		private System.Nullable<System.DateTime> _LockDateTime;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _IsMale;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private EntityRef<PatDetail> _PatDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnLockDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLockDateTimeChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIsMaleChanging(System.Nullable<bool> value);
    partial void OnIsMaleChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    #endregion
		
		public PatList()
		{
			this._PatDetail = default(EntityRef<PatDetail>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PatientID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[Column(Storage="_LockDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockDateTime
		{
			get
			{
				return this._LockDateTime;
			}
			set
			{
				if ((this._LockDateTime != value))
				{
					this.OnLockDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LockDateTime = value;
					this.SendPropertyChanged("LockDateTime");
					this.OnLockDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsMale", DbType="Bit")]
		public System.Nullable<bool> IsMale
		{
			get
			{
				return this._IsMale;
			}
			set
			{
				if ((this._IsMale != value))
				{
					this.OnIsMaleChanging(value);
					this.SendPropertyChanging();
					this._IsMale = value;
					this.SendPropertyChanged("IsMale");
					this.OnIsMaleChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Association(Name="PatList_PatDetail", Storage="_PatDetail", ThisKey="ID", OtherKey="PatientListIX", IsUnique=true, IsForeignKey=false)]
		public PatDetail PatDetail
		{
			get
			{
				return this._PatDetail.Entity;
			}
			set
			{
				PatDetail previousValue = this._PatDetail.Entity;
				if (((previousValue != value) 
							|| (this._PatDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatDetail.Entity = null;
						previousValue.PatList = null;
					}
					this._PatDetail.Entity = value;
					if ((value != null))
					{
						value.PatList = this;
					}
					this.SendPropertyChanged("PatDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Clinic.Insurances")]
	public partial class Insurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Insurance()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Patients.Details")]
	public partial class PatDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientListIX;
		
		private string _EngFirstName;
		
		private string _EngLastName;
		
		private System.Nullable<bool> _IsMaried;
		
		private string _FatherName;
		
		private string _IDNo;
		
		private string _NationalID;
		
		private System.Nullable<short> _CityIX;
		
		private string _BirthLocation;
		
		private System.Nullable<short> _JobIX;
		
		private string _TelNo1;
		
		private string _TelNo2;
		
		private string _Address;
		
		private string _ZipCode;
		
		private string _Email;
		
		private EntityRef<City> _City;
		
		private EntityRef<PatJob> _PatJob;
		
		private EntityRef<PatList> _PatList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientListIXChanging(int value);
    partial void OnPatientListIXChanged();
    partial void OnEngFirstNameChanging(string value);
    partial void OnEngFirstNameChanged();
    partial void OnEngLastNameChanging(string value);
    partial void OnEngLastNameChanged();
    partial void OnIsMariedChanging(System.Nullable<bool> value);
    partial void OnIsMariedChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnIDNoChanging(string value);
    partial void OnIDNoChanged();
    partial void OnNationalIDChanging(string value);
    partial void OnNationalIDChanged();
    partial void OnCityIXChanging(System.Nullable<short> value);
    partial void OnCityIXChanged();
    partial void OnBirthLocationChanging(string value);
    partial void OnBirthLocationChanged();
    partial void OnJobIXChanging(System.Nullable<short> value);
    partial void OnJobIXChanged();
    partial void OnTelNo1Changing(string value);
    partial void OnTelNo1Changed();
    partial void OnTelNo2Changing(string value);
    partial void OnTelNo2Changed();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public PatDetail()
		{
			this._City = default(EntityRef<City>);
			this._PatJob = default(EntityRef<PatJob>);
			this._PatList = default(EntityRef<PatList>);
			OnCreated();
		}
		
		[Column(Storage="_PatientListIX", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientListIX
		{
			get
			{
				return this._PatientListIX;
			}
			set
			{
				if ((this._PatientListIX != value))
				{
					if (this._PatList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientListIXChanging(value);
					this.SendPropertyChanging();
					this._PatientListIX = value;
					this.SendPropertyChanged("PatientListIX");
					this.OnPatientListIXChanged();
				}
			}
		}
		
		[Column(Storage="_EngFirstName", DbType="NVarChar(20)")]
		public string EngFirstName
		{
			get
			{
				return this._EngFirstName;
			}
			set
			{
				if ((this._EngFirstName != value))
				{
					this.OnEngFirstNameChanging(value);
					this.SendPropertyChanging();
					this._EngFirstName = value;
					this.SendPropertyChanged("EngFirstName");
					this.OnEngFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_EngLastName", DbType="NVarChar(30)")]
		public string EngLastName
		{
			get
			{
				return this._EngLastName;
			}
			set
			{
				if ((this._EngLastName != value))
				{
					this.OnEngLastNameChanging(value);
					this.SendPropertyChanging();
					this._EngLastName = value;
					this.SendPropertyChanged("EngLastName");
					this.OnEngLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsMaried", DbType="Bit")]
		public System.Nullable<bool> IsMaried
		{
			get
			{
				return this._IsMaried;
			}
			set
			{
				if ((this._IsMaried != value))
				{
					this.OnIsMariedChanging(value);
					this.SendPropertyChanging();
					this._IsMaried = value;
					this.SendPropertyChanged("IsMaried");
					this.OnIsMariedChanged();
				}
			}
		}
		
		[Column(Storage="_FatherName", DbType="NVarChar(15)")]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[Column(Storage="_IDNo", DbType="NVarChar(15)")]
		public string IDNo
		{
			get
			{
				return this._IDNo;
			}
			set
			{
				if ((this._IDNo != value))
				{
					this.OnIDNoChanging(value);
					this.SendPropertyChanging();
					this._IDNo = value;
					this.SendPropertyChanged("IDNo");
					this.OnIDNoChanged();
				}
			}
		}
		
		[Column(Storage="_NationalID", DbType="NVarChar(15)")]
		public string NationalID
		{
			get
			{
				return this._NationalID;
			}
			set
			{
				if ((this._NationalID != value))
				{
					this.OnNationalIDChanging(value);
					this.SendPropertyChanging();
					this._NationalID = value;
					this.SendPropertyChanged("NationalID");
					this.OnNationalIDChanged();
				}
			}
		}
		
		[Column(Storage="_CityIX", DbType="SmallInt")]
		public System.Nullable<short> CityIX
		{
			get
			{
				return this._CityIX;
			}
			set
			{
				if ((this._CityIX != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIXChanging(value);
					this.SendPropertyChanging();
					this._CityIX = value;
					this.SendPropertyChanged("CityIX");
					this.OnCityIXChanged();
				}
			}
		}
		
		[Column(Storage="_BirthLocation", DbType="NVarChar(20)")]
		public string BirthLocation
		{
			get
			{
				return this._BirthLocation;
			}
			set
			{
				if ((this._BirthLocation != value))
				{
					this.OnBirthLocationChanging(value);
					this.SendPropertyChanging();
					this._BirthLocation = value;
					this.SendPropertyChanged("BirthLocation");
					this.OnBirthLocationChanged();
				}
			}
		}
		
		[Column(Storage="_JobIX", DbType="SmallInt")]
		public System.Nullable<short> JobIX
		{
			get
			{
				return this._JobIX;
			}
			set
			{
				if ((this._JobIX != value))
				{
					if (this._PatJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIXChanging(value);
					this.SendPropertyChanging();
					this._JobIX = value;
					this.SendPropertyChanged("JobIX");
					this.OnJobIXChanged();
				}
			}
		}
		
		[Column(Storage="_TelNo1", DbType="NVarChar(15)")]
		public string TelNo1
		{
			get
			{
				return this._TelNo1;
			}
			set
			{
				if ((this._TelNo1 != value))
				{
					this.OnTelNo1Changing(value);
					this.SendPropertyChanging();
					this._TelNo1 = value;
					this.SendPropertyChanged("TelNo1");
					this.OnTelNo1Changed();
				}
			}
		}
		
		[Column(Storage="_TelNo2", DbType="NVarChar(15)")]
		public string TelNo2
		{
			get
			{
				return this._TelNo2;
			}
			set
			{
				if ((this._TelNo2 != value))
				{
					this.OnTelNo2Changing(value);
					this.SendPropertyChanging();
					this._TelNo2 = value;
					this.SendPropertyChanged("TelNo2");
					this.OnTelNo2Changed();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="NVarChar(20)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(25)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="City_PatDetail", Storage="_City", ThisKey="CityIX", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.PatDetails.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.PatDetails.Add(this);
						this._CityIX = value.ID;
					}
					else
					{
						this._CityIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="PatJob_PatDetail", Storage="_PatJob", ThisKey="JobIX", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PatJob PatJob
		{
			get
			{
				return this._PatJob.Entity;
			}
			set
			{
				PatJob previousValue = this._PatJob.Entity;
				if (((previousValue != value) 
							|| (this._PatJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatJob.Entity = null;
						previousValue.PatDetails.Remove(this);
					}
					this._PatJob.Entity = value;
					if ((value != null))
					{
						value.PatDetails.Add(this);
						this._JobIX = value.ID;
					}
					else
					{
						this._JobIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("PatJob");
				}
			}
		}
		
		[Association(Name="PatList_PatDetail", Storage="_PatList", ThisKey="PatientListIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PatList PatList
		{
			get
			{
				return this._PatList.Entity;
			}
			set
			{
				PatList previousValue = this._PatList.Entity;
				if (((previousValue != value) 
							|| (this._PatList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatList.Entity = null;
						previousValue.PatDetail = null;
					}
					this._PatList.Entity = value;
					if ((value != null))
					{
						value.PatDetail = this;
						this._PatientListIX = value.ID;
					}
					else
					{
						this._PatientListIX = default(int);
					}
					this.SendPropertyChanged("PatList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Clinic.TablesIndexes")]
	public partial class TablesIndex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationDb;
		
		private string _TableFullName;
		
		private string _IndexName;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationDbChanging(string value);
    partial void OnApplicationDbChanged();
    partial void OnTableFullNameChanging(string value);
    partial void OnTableFullNameChanged();
    partial void OnIndexNameChanging(string value);
    partial void OnIndexNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TablesIndex()
		{
			OnCreated();
		}
		
		[Column(Storage="_ApplicationDb", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ApplicationDb
		{
			get
			{
				return this._ApplicationDb;
			}
			set
			{
				if ((this._ApplicationDb != value))
				{
					this.OnApplicationDbChanging(value);
					this.SendPropertyChanging();
					this._ApplicationDb = value;
					this.SendPropertyChanged("ApplicationDb");
					this.OnApplicationDbChanged();
				}
			}
		}
		
		[Column(Storage="_TableFullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TableFullName
		{
			get
			{
				return this._TableFullName;
			}
			set
			{
				if ((this._TableFullName != value))
				{
					this.OnTableFullNameChanging(value);
					this.SendPropertyChanging();
					this._TableFullName = value;
					this.SendPropertyChanged("TableFullName");
					this.OnTableFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_IndexName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IndexName
		{
			get
			{
				return this._IndexName;
			}
			set
			{
				if ((this._IndexName != value))
				{
					this.OnIndexNameChanging(value);
					this.SendPropertyChanging();
					this._IndexName = value;
					this.SendPropertyChanged("IndexName");
					this.OnIndexNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Clinic.RefPhysicians")]
	public partial class RefPhysician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private bool _IsMale;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _FirstNameEn;
		
		private string _LastNameEn;
		
		private string _MedicalID;
		
		private System.Nullable<short> _SpecialtyIX;
		
		private string _Description;
		
		private EntityRef<RefPhysiciansSpec> _RefPhysiciansSpec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnIsMaleChanging(bool value);
    partial void OnIsMaleChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameEnChanging(string value);
    partial void OnFirstNameEnChanged();
    partial void OnLastNameEnChanging(string value);
    partial void OnLastNameEnChanged();
    partial void OnMedicalIDChanging(string value);
    partial void OnMedicalIDChanged();
    partial void OnSpecialtyIXChanging(System.Nullable<short> value);
    partial void OnSpecialtyIXChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RefPhysician()
		{
			this._RefPhysiciansSpec = default(EntityRef<RefPhysiciansSpec>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsMale", DbType="Bit NOT NULL")]
		public bool IsMale
		{
			get
			{
				return this._IsMale;
			}
			set
			{
				if ((this._IsMale != value))
				{
					this.OnIsMaleChanging(value);
					this.SendPropertyChanging();
					this._IsMale = value;
					this.SendPropertyChanged("IsMale");
					this.OnIsMaleChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(15)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstNameEn", DbType="NVarChar(20)")]
		public string FirstNameEn
		{
			get
			{
				return this._FirstNameEn;
			}
			set
			{
				if ((this._FirstNameEn != value))
				{
					this.OnFirstNameEnChanging(value);
					this.SendPropertyChanging();
					this._FirstNameEn = value;
					this.SendPropertyChanged("FirstNameEn");
					this.OnFirstNameEnChanged();
				}
			}
		}
		
		[Column(Storage="_LastNameEn", DbType="NVarChar(25)")]
		public string LastNameEn
		{
			get
			{
				return this._LastNameEn;
			}
			set
			{
				if ((this._LastNameEn != value))
				{
					this.OnLastNameEnChanging(value);
					this.SendPropertyChanging();
					this._LastNameEn = value;
					this.SendPropertyChanged("LastNameEn");
					this.OnLastNameEnChanged();
				}
			}
		}
		
		[Column(Storage="_MedicalID", DbType="NVarChar(15)")]
		public string MedicalID
		{
			get
			{
				return this._MedicalID;
			}
			set
			{
				if ((this._MedicalID != value))
				{
					this.OnMedicalIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalID = value;
					this.SendPropertyChanged("MedicalID");
					this.OnMedicalIDChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialtyIX", DbType="SmallInt")]
		public System.Nullable<short> SpecialtyIX
		{
			get
			{
				return this._SpecialtyIX;
			}
			set
			{
				if ((this._SpecialtyIX != value))
				{
					if (this._RefPhysiciansSpec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialtyIXChanging(value);
					this.SendPropertyChanging();
					this._SpecialtyIX = value;
					this.SendPropertyChanged("SpecialtyIX");
					this.OnSpecialtyIXChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="RefPhysiciansSpec_RefPhysician", Storage="_RefPhysiciansSpec", ThisKey="SpecialtyIX", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public RefPhysiciansSpec RefPhysiciansSpec
		{
			get
			{
				return this._RefPhysiciansSpec.Entity;
			}
			set
			{
				RefPhysiciansSpec previousValue = this._RefPhysiciansSpec.Entity;
				if (((previousValue != value) 
							|| (this._RefPhysiciansSpec.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefPhysiciansSpec.Entity = null;
						previousValue.RefPhysicians.Remove(this);
					}
					this._RefPhysiciansSpec.Entity = value;
					if ((value != null))
					{
						value.RefPhysicians.Add(this);
						this._SpecialtyIX = value.ID;
					}
					else
					{
						this._SpecialtyIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("RefPhysiciansSpec");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="SMS.SendQueue")]
	public partial class SendQueue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MessageIX;
		
		private System.DateTime _SaveDateTime;
		
		private System.Nullable<System.DateTime> _SendDateTime;
		
		private System.Nullable<System.DateTime> _QueueDateTime;
		
		private EntityRef<SMSMessage> _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMessageIXChanging(long value);
    partial void OnMessageIXChanged();
    partial void OnSaveDateTimeChanging(System.DateTime value);
    partial void OnSaveDateTimeChanged();
    partial void OnSendDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSendDateTimeChanged();
    partial void OnQueueDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnQueueDateTimeChanged();
    #endregion
		
		public SendQueue()
		{
			this._Message = default(EntityRef<SMSMessage>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageIX", DbType="BigInt NOT NULL")]
		public long MessageIX
		{
			get
			{
				return this._MessageIX;
			}
			set
			{
				if ((this._MessageIX != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIXChanging(value);
					this.SendPropertyChanging();
					this._MessageIX = value;
					this.SendPropertyChanged("MessageIX");
					this.OnMessageIXChanged();
				}
			}
		}
		
		[Column(Storage="_SaveDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime SaveDateTime
		{
			get
			{
				return this._SaveDateTime;
			}
			set
			{
				if ((this._SaveDateTime != value))
				{
					this.OnSaveDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SaveDateTime = value;
					this.SendPropertyChanged("SaveDateTime");
					this.OnSaveDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SendDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SendDateTime
		{
			get
			{
				return this._SendDateTime;
			}
			set
			{
				if ((this._SendDateTime != value))
				{
					this.OnSendDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SendDateTime = value;
					this.SendPropertyChanged("SendDateTime");
					this.OnSendDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_QueueDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> QueueDateTime
		{
			get
			{
				return this._QueueDateTime;
			}
			set
			{
				if ((this._QueueDateTime != value))
				{
					this.OnQueueDateTimeChanging(value);
					this.SendPropertyChanging();
					this._QueueDateTime = value;
					this.SendPropertyChanged("QueueDateTime");
					this.OnQueueDateTimeChanged();
				}
			}
		}
		
		[Association(Name="SMSMessage_SendQueue", Storage="_Message", ThisKey="MessageIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SMSMessage SMSMessage
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				SMSMessage previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.SendQueues.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.SendQueues.Add(this);
						this._MessageIX = value.ID;
					}
					else
					{
						this._MessageIX = default(long);
					}
					this.SendPropertyChanged("SMSMessage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="SMS.SendFailed")]
	public partial class SendFailed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MessageIX;
		
		private System.DateTime _SendDateTime;
		
		private System.DateTime _SavedDateTime;
		
		private EntityRef<SMSMessage> _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMessageIXChanging(long value);
    partial void OnMessageIXChanged();
    partial void OnSendDateTimeChanging(System.DateTime value);
    partial void OnSendDateTimeChanged();
    partial void OnSavedDateTimeChanging(System.DateTime value);
    partial void OnSavedDateTimeChanged();
    #endregion
		
		public SendFailed()
		{
			this._Message = default(EntityRef<SMSMessage>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageIX", DbType="BigInt NOT NULL")]
		public long MessageIX
		{
			get
			{
				return this._MessageIX;
			}
			set
			{
				if ((this._MessageIX != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIXChanging(value);
					this.SendPropertyChanging();
					this._MessageIX = value;
					this.SendPropertyChanged("MessageIX");
					this.OnMessageIXChanged();
				}
			}
		}
		
		[Column(Storage="_SendDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime SendDateTime
		{
			get
			{
				return this._SendDateTime;
			}
			set
			{
				if ((this._SendDateTime != value))
				{
					this.OnSendDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SendDateTime = value;
					this.SendPropertyChanged("SendDateTime");
					this.OnSendDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SavedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime SavedDateTime
		{
			get
			{
				return this._SavedDateTime;
			}
			set
			{
				if ((this._SavedDateTime != value))
				{
					this.OnSavedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SavedDateTime = value;
					this.SendPropertyChanged("SavedDateTime");
					this.OnSavedDateTimeChanged();
				}
			}
		}
		
		[Association(Name="SMSMessage_SendFailed", Storage="_Message", ThisKey="MessageIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SMSMessage SMSMessage
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				SMSMessage previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.SendFaileds.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.SendFaileds.Add(this);
						this._MessageIX = value.ID;
					}
					else
					{
						this._MessageIX = default(long);
					}
					this.SendPropertyChanged("SMSMessage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="SMS.SendSucceed")]
	public partial class SendSucceed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MessageIX;
		
		private System.DateTime _SendDateTime;
		
		private System.DateTime _SavedDateTime;
		
		private EntityRef<SMSMessage> _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMessageIXChanging(long value);
    partial void OnMessageIXChanged();
    partial void OnSendDateTimeChanging(System.DateTime value);
    partial void OnSendDateTimeChanged();
    partial void OnSavedDateTimeChanging(System.DateTime value);
    partial void OnSavedDateTimeChanged();
    #endregion
		
		public SendSucceed()
		{
			this._Message = default(EntityRef<SMSMessage>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageIX", DbType="BigInt NOT NULL")]
		public long MessageIX
		{
			get
			{
				return this._MessageIX;
			}
			set
			{
				if ((this._MessageIX != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIXChanging(value);
					this.SendPropertyChanging();
					this._MessageIX = value;
					this.SendPropertyChanged("MessageIX");
					this.OnMessageIXChanged();
				}
			}
		}
		
		[Column(Storage="_SendDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime SendDateTime
		{
			get
			{
				return this._SendDateTime;
			}
			set
			{
				if ((this._SendDateTime != value))
				{
					this.OnSendDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SendDateTime = value;
					this.SendPropertyChanged("SendDateTime");
					this.OnSendDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SavedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime SavedDateTime
		{
			get
			{
				return this._SavedDateTime;
			}
			set
			{
				if ((this._SavedDateTime != value))
				{
					this.OnSavedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SavedDateTime = value;
					this.SendPropertyChanged("SavedDateTime");
					this.OnSavedDateTimeChanged();
				}
			}
		}
		
		[Association(Name="SMSMessage_SendSucceed", Storage="_Message", ThisKey="MessageIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SMSMessage SMSMessage
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				SMSMessage previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.SendSucceeds.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.SendSucceeds.Add(this);
						this._MessageIX = value.ID;
					}
					else
					{
						this._MessageIX = default(long);
					}
					this.SendPropertyChanged("SMSMessage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="[Log].Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _EnglishTitle;
		
		private string _LocaleTitle;
		
		private EntitySet<DbEvent> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnEnglishTitleChanging(string value);
    partial void OnEnglishTitleChanged();
    partial void OnLocaleTitleChanging(string value);
    partial void OnLocaleTitleChanged();
    #endregion
		
		public Category()
		{
			this._Events = new EntitySet<DbEvent>(new Action<DbEvent>(this.attach_Events), new Action<DbEvent>(this.detach_Events));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EnglishTitle
		{
			get
			{
				return this._EnglishTitle;
			}
			set
			{
				if ((this._EnglishTitle != value))
				{
					this.OnEnglishTitleChanging(value);
					this.SendPropertyChanging();
					this._EnglishTitle = value;
					this.SendPropertyChanged("EnglishTitle");
					this.OnEnglishTitleChanged();
				}
			}
		}
		
		[Column(Storage="_LocaleTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocaleTitle
		{
			get
			{
				return this._LocaleTitle;
			}
			set
			{
				if ((this._LocaleTitle != value))
				{
					this.OnLocaleTitleChanging(value);
					this.SendPropertyChanging();
					this._LocaleTitle = value;
					this.SendPropertyChanged("LocaleTitle");
					this.OnLocaleTitleChanged();
				}
			}
		}
		
		[Association(Name="Category_DbEvent", Storage="_Events", ThisKey="ID", OtherKey="CategoryIX")]
		public EntitySet<DbEvent> DbEvents
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(DbEvent entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Events(DbEvent entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="[Log].Events")]
	public partial class DbEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private short _CategoryIX;
		
		private System.Nullable<short> _ApplicationIX;
		
		private System.Nullable<short> _UserIX;
		
		private System.DateTime _Date;
		
		private string _Description;
		
		private EntityRef<HISApplication> _HISApplication;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<UsersList> _UsersList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCategoryIXChanging(short value);
    partial void OnCategoryIXChanged();
    partial void OnApplicationIXChanging(System.Nullable<short> value);
    partial void OnApplicationIXChanged();
    partial void OnUserIXChanging(System.Nullable<short> value);
    partial void OnUserIXChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DbEvent()
		{
			this._HISApplication = default(EntityRef<HISApplication>);
			this._Category = default(EntityRef<Category>);
			this._UsersList = default(EntityRef<UsersList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="SmallInt NOT NULL")]
		public short CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIXChanging(value);
					this.SendPropertyChanging();
					this._CategoryIX = value;
					this.SendPropertyChanged("CategoryIX");
					this.OnCategoryIXChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationIX", DbType="SmallInt")]
		public System.Nullable<short> ApplicationIX
		{
			get
			{
				return this._ApplicationIX;
			}
			set
			{
				if ((this._ApplicationIX != value))
				{
					if (this._HISApplication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIXChanging(value);
					this.SendPropertyChanging();
					this._ApplicationIX = value;
					this.SendPropertyChanged("ApplicationIX");
					this.OnApplicationIXChanged();
				}
			}
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt")]
		public System.Nullable<short> UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					if (this._UsersList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIXChanging(value);
					this.SendPropertyChanging();
					this._UserIX = value;
					this.SendPropertyChanged("UserIX");
					this.OnUserIXChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="HISApplication_DbEvent", Storage="_HISApplication", ThisKey="ApplicationIX", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public HISApplication HISApplication
		{
			get
			{
				return this._HISApplication.Entity;
			}
			set
			{
				HISApplication previousValue = this._HISApplication.Entity;
				if (((previousValue != value) 
							|| (this._HISApplication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HISApplication.Entity = null;
						previousValue.DbEvents.Remove(this);
					}
					this._HISApplication.Entity = value;
					if ((value != null))
					{
						value.DbEvents.Add(this);
						this._ApplicationIX = value.ID;
					}
					else
					{
						this._ApplicationIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("HISApplication");
				}
			}
		}
		
		[Association(Name="Category_DbEvent", Storage="_Category", ThisKey="CategoryIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.DbEvents.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.DbEvents.Add(this);
						this._CategoryIX = value.ID;
					}
					else
					{
						this._CategoryIX = default(short);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="UsersList_DbEvent", Storage="_UsersList", ThisKey="UserIX", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public UsersList UsersList
		{
			get
			{
				return this._UsersList.Entity;
			}
			set
			{
				UsersList previousValue = this._UsersList.Entity;
				if (((previousValue != value) 
							|| (this._UsersList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersList.Entity = null;
						previousValue.DbEvents.Remove(this);
					}
					this._UsersList.Entity = value;
					if ((value != null))
					{
						value.DbEvents.Add(this);
						this._UserIX = value.ID;
					}
					else
					{
						this._UserIX = default(Nullable<short>);
					}
					this.SendPropertyChanged("UsersList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="SMS.Settings")]
	public partial class SMSSettings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Data;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public SMSSettings()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(300)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="SMS.Messages")]
	public partial class SMSMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _SenderNumber;
		
		private string _RecieverNumber;
		
		private string _MessageText;
		
		private System.Nullable<int> _RefIX;
		
		private EntitySet<SendQueue> _SendQueues;
		
		private EntitySet<SendFailed> _SendFaileds;
		
		private EntitySet<SendSucceed> _SendSucceeds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSenderNumberChanging(string value);
    partial void OnSenderNumberChanged();
    partial void OnRecieverNumberChanging(string value);
    partial void OnRecieverNumberChanged();
    partial void OnMessageTextChanging(string value);
    partial void OnMessageTextChanged();
    partial void OnRefIXChanging(System.Nullable<int> value);
    partial void OnRefIXChanged();
    #endregion
		
		public SMSMessage()
		{
			this._SendQueues = new EntitySet<SendQueue>(new Action<SendQueue>(this.attach_SendQueues), new Action<SendQueue>(this.detach_SendQueues));
			this._SendFaileds = new EntitySet<SendFailed>(new Action<SendFailed>(this.attach_SendFaileds), new Action<SendFailed>(this.detach_SendFaileds));
			this._SendSucceeds = new EntitySet<SendSucceed>(new Action<SendSucceed>(this.attach_SendSucceeds), new Action<SendSucceed>(this.detach_SendSucceeds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SenderNumber", DbType="NVarChar(15)")]
		public string SenderNumber
		{
			get
			{
				return this._SenderNumber;
			}
			set
			{
				if ((this._SenderNumber != value))
				{
					this.OnSenderNumberChanging(value);
					this.SendPropertyChanging();
					this._SenderNumber = value;
					this.SendPropertyChanged("SenderNumber");
					this.OnSenderNumberChanged();
				}
			}
		}
		
		[Column(Storage="_RecieverNumber", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string RecieverNumber
		{
			get
			{
				return this._RecieverNumber;
			}
			set
			{
				if ((this._RecieverNumber != value))
				{
					this.OnRecieverNumberChanging(value);
					this.SendPropertyChanging();
					this._RecieverNumber = value;
					this.SendPropertyChanged("RecieverNumber");
					this.OnRecieverNumberChanged();
				}
			}
		}
		
		[Column(Storage="_MessageText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MessageText
		{
			get
			{
				return this._MessageText;
			}
			set
			{
				if ((this._MessageText != value))
				{
					this.OnMessageTextChanging(value);
					this.SendPropertyChanging();
					this._MessageText = value;
					this.SendPropertyChanged("MessageText");
					this.OnMessageTextChanged();
				}
			}
		}
		
		[Column(Storage="_RefIX", DbType="Int")]
		public System.Nullable<int> RefIX
		{
			get
			{
				return this._RefIX;
			}
			set
			{
				if ((this._RefIX != value))
				{
					this.OnRefIXChanging(value);
					this.SendPropertyChanging();
					this._RefIX = value;
					this.SendPropertyChanged("RefIX");
					this.OnRefIXChanged();
				}
			}
		}
		
		[Association(Name="SMSMessage_SendQueue", Storage="_SendQueues", ThisKey="ID", OtherKey="MessageIX")]
		public EntitySet<SendQueue> SendQueues
		{
			get
			{
				return this._SendQueues;
			}
			set
			{
				this._SendQueues.Assign(value);
			}
		}
		
		[Association(Name="SMSMessage_SendFailed", Storage="_SendFaileds", ThisKey="ID", OtherKey="MessageIX")]
		public EntitySet<SendFailed> SendFaileds
		{
			get
			{
				return this._SendFaileds;
			}
			set
			{
				this._SendFaileds.Assign(value);
			}
		}
		
		[Association(Name="SMSMessage_SendSucceed", Storage="_SendSucceeds", ThisKey="ID", OtherKey="MessageIX")]
		public EntitySet<SendSucceed> SendSucceeds
		{
			get
			{
				return this._SendSucceeds;
			}
			set
			{
				this._SendSucceeds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SendQueues(SendQueue entity)
		{
			this.SendPropertyChanging();
			entity.SMSMessage = this;
		}
		
		private void detach_SendQueues(SendQueue entity)
		{
			this.SendPropertyChanging();
			entity.SMSMessage = null;
		}
		
		private void attach_SendFaileds(SendFailed entity)
		{
			this.SendPropertyChanging();
			entity.SMSMessage = this;
		}
		
		private void detach_SendFaileds(SendFailed entity)
		{
			this.SendPropertyChanging();
			entity.SMSMessage = null;
		}
		
		private void attach_SendSucceeds(SendSucceed entity)
		{
			this.SendPropertyChanging();
			entity.SMSMessage = this;
		}
		
		private void detach_SendSucceeds(SendSucceed entity)
		{
			this.SendPropertyChanging();
			entity.SMSMessage = null;
		}
	}
	
	public partial class SP_SelectUsersResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _FullName;
		
		private string _Description;
		
		public SP_SelectUsersResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(20)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(41) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectACLResult
	{
		
		private int _ID;
		
		private System.Nullable<int> _ParentIX;
		
		private short _ApplicationIX;
		
		private bool _IsTitle;
		
		private string _EnglishName;
		
		private string _LocaleName;
		
		private string _Description;
		
		public SP_SelectACLResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentIX", DbType="Int")]
		public System.Nullable<int> ParentIX
		{
			get
			{
				return this._ParentIX;
			}
			set
			{
				if ((this._ParentIX != value))
				{
					this._ParentIX = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationIX", DbType="SmallInt NOT NULL")]
		public short ApplicationIX
		{
			get
			{
				return this._ApplicationIX;
			}
			set
			{
				if ((this._ApplicationIX != value))
				{
					this._ApplicationIX = value;
				}
			}
		}
		
		[Column(Storage="_IsTitle", DbType="Bit NOT NULL")]
		public bool IsTitle
		{
			get
			{
				return this._IsTitle;
			}
			set
			{
				if ((this._IsTitle != value))
				{
					this._IsTitle = value;
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this._EnglishName = value;
				}
			}
		}
		
		[Column(Storage="_LocaleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LocaleName
		{
			get
			{
				return this._LocaleName;
			}
			set
			{
				if ((this._LocaleName != value))
				{
					this._LocaleName = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectACLPermissionsResult
	{
		
		private short _ID;
		
		private string _FullName;
		
		private int _ACLID;
		
		private System.Nullable<bool> _IsUser;
		
		private string _Type;
		
		private string _IsAllowed;
		
		private System.Nullable<bool> _IsPremiered;
		
		public SP_SelectACLPermissionsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt NOT NULL")]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(41)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_ACLID", DbType="Int NOT NULL")]
		public int ACLID
		{
			get
			{
				return this._ACLID;
			}
			set
			{
				if ((this._ACLID != value))
				{
					this._ACLID = value;
				}
			}
		}
		
		[Column(Storage="_IsUser", DbType="Bit")]
		public System.Nullable<bool> IsUser
		{
			get
			{
				return this._IsUser;
			}
			set
			{
				if ((this._IsUser != value))
				{
					this._IsUser = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[Column(Storage="_IsAllowed", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string IsAllowed
		{
			get
			{
				return this._IsAllowed;
			}
			set
			{
				if ((this._IsAllowed != value))
				{
					this._IsAllowed = value;
				}
			}
		}
		
		[Column(Storage="_IsPremiered", DbType="Bit")]
		public System.Nullable<bool> IsPremiered
		{
			get
			{
				return this._IsPremiered;
			}
			set
			{
				if ((this._IsPremiered != value))
				{
					this._IsPremiered = value;
				}
			}
		}
	}
	
	public partial class SP_SelectGroupsResult
	{
		
		private System.Nullable<short> _ID;
		
		private int _IsActive;
		
		private string _Name;
		
		private string _Description;
		
		public SP_SelectGroupsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Int NOT NULL")]
		public int IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectUsersInGroupsResult
	{
		
		private System.Nullable<short> _GroupID;
		
		private System.Nullable<short> _UserID;
		
		private string _UserName;
		
		private string _FullName;
		
		private string _FirstName;
		
		private string _LastName;
		
		public SP_SelectUsersInGroupsResult()
		{
		}
		
		[Column(Storage="_GroupID", DbType="SmallInt")]
		public System.Nullable<short> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this._GroupID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="SmallInt")]
		public System.Nullable<short> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(41)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(20)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
	}
	
	public partial class SP_SelectRefPhysiciansSpecsResult
	{
		
		private System.Nullable<short> _ID;
		
		private int _IsActive;
		
		private string _Title;
		
		public SP_SelectRefPhysiciansSpecsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Int NOT NULL")]
		public int IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCitiesResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		private System.Nullable<short> _StateIX;
		
		public SP_SelectCitiesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_StateIX", DbType="SmallInt")]
		public System.Nullable<short> StateIX
		{
			get
			{
				return this._StateIX;
			}
			set
			{
				if ((this._StateIX != value))
				{
					this._StateIX = value;
				}
			}
		}
	}
	
	public partial class SP_SelectStatesResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		private System.Nullable<short> _CountryIX;
		
		public SP_SelectStatesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_CountryIX", DbType="SmallInt")]
		public System.Nullable<short> CountryIX
		{
			get
			{
				return this._CountryIX;
			}
			set
			{
				if ((this._CountryIX != value))
				{
					this._CountryIX = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCountriesResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Name;
		
		public SP_SelectCountriesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class SP_SelectJobsResult
	{
		
		private System.Nullable<short> _ID;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Title;
		
		public SP_SelectJobsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
	
	public partial class SP_SelectCategoriesResult
	{
		
		private System.Nullable<short> _ID;
		
		private string _EnglishTitle;
		
		private string _LocaleTitle;
		
		public SP_SelectCategoriesResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_EnglishTitle", DbType="NVarChar(50)")]
		public string EnglishTitle
		{
			get
			{
				return this._EnglishTitle;
			}
			set
			{
				if ((this._EnglishTitle != value))
				{
					this._EnglishTitle = value;
				}
			}
		}
		
		[Column(Storage="_LocaleTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocaleTitle
		{
			get
			{
				return this._LocaleTitle;
			}
			set
			{
				if ((this._LocaleTitle != value))
				{
					this._LocaleTitle = value;
				}
			}
		}
	}
	
	public partial class SP_SelectEventsResult
	{
		
		private System.Nullable<long> _RowNumber;
		
		private int _ID;
		
		private System.Nullable<short> _ApplicationIX;
		
		private string _ApplicationName;
		
		private short _CategoryIX;
		
		private string _CategoryName;
		
		private System.Nullable<short> _UserIX;
		
		private string _UserName;
		
		private string _FullName;
		
		private System.DateTime _Date;
		
		private string _Description;
		
		public SP_SelectEventsResult()
		{
		}
		
		[Column(Storage="_RowNumber", DbType="BigInt")]
		public System.Nullable<long> RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this._RowNumber = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationIX", DbType="SmallInt")]
		public System.Nullable<short> ApplicationIX
		{
			get
			{
				return this._ApplicationIX;
			}
			set
			{
				if ((this._ApplicationIX != value))
				{
					this._ApplicationIX = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationName", DbType="NVarChar(50)")]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this._ApplicationName = value;
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="SmallInt NOT NULL")]
		public short CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					this._CategoryIX = value;
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
		
		[Column(Storage="_UserIX", DbType="SmallInt")]
		public System.Nullable<short> UserIX
		{
			get
			{
				return this._UserIX;
			}
			set
			{
				if ((this._UserIX != value))
				{
					this._UserIX = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(41)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class SP_SelectRefPhysiciansFullDataListResult
	{
		
		private System.Nullable<short> _ID;
		
		private string _FullName;
		
		private string _Gender;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MedicalID;
		
		private string _Specialty;
		
		private string _Description;
		
		public SP_SelectRefPhysiciansFullDataListResult()
		{
		}
		
		[Column(Storage="_ID", DbType="SmallInt")]
		public System.Nullable<short> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(54) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="VarChar(3)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(15)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(20)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_MedicalID", DbType="NVarChar(15)")]
		public string MedicalID
		{
			get
			{
				return this._MedicalID;
			}
			set
			{
				if ((this._MedicalID != value))
				{
					this._MedicalID = value;
				}
			}
		}
		
		[Column(Storage="_Specialty", DbType="NVarChar(50)")]
		public string Specialty
		{
			get
			{
				return this._Specialty;
			}
			set
			{
				if ((this._Specialty != value))
				{
					this._Specialty = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
