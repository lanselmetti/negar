#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Negar
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ImagingSystem")]
	public partial class DbIS : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRefList(RefList instance);
    partial void UpdateRefList(RefList instance);
    partial void DeleteRefList(RefList instance);
    partial void InsertRefService(RefService instance);
    partial void UpdateRefService(RefService instance);
    partial void DeleteRefService(RefService instance);
    partial void InsertServiceList(ServiceList instance);
    partial void UpdateServiceList(ServiceList instance);
    partial void DeleteServiceList(ServiceList instance);
    partial void InsertRefTransaction(RefTransaction instance);
    partial void UpdateRefTransaction(RefTransaction instance);
    partial void DeleteRefTransaction(RefTransaction instance);
    partial void InsertRefCostsAndDiscount(RefCostsAndDiscount instance);
    partial void UpdateRefCostsAndDiscount(RefCostsAndDiscount instance);
    partial void DeleteRefCostsAndDiscount(RefCostsAndDiscount instance);
    partial void InsertCostsAndDiscountsType(CostsAndDiscountsType instance);
    partial void UpdateCostsAndDiscountsType(CostsAndDiscountsType instance);
    partial void DeleteCostsAndDiscountsType(CostsAndDiscountsType instance);
    partial void InsertRefDocument(RefDocument instance);
    partial void UpdateRefDocument(RefDocument instance);
    partial void DeleteRefDocument(RefDocument instance);
    #endregion
		
		public DbIS() : 
				base(global::Negar.Properties.Settings.Default.ImagingSystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbIS(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbIS(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbIS(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbIS(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RefList> RefLists
		{
			get
			{
				return this.GetTable<RefList>();
			}
		}
		
		public System.Data.Linq.Table<RefService> RefServices
		{
			get
			{
				return this.GetTable<RefService>();
			}
		}
		
		public System.Data.Linq.Table<ServiceList> ServiceLists
		{
			get
			{
				return this.GetTable<ServiceList>();
			}
		}
		
		public System.Data.Linq.Table<RefTransaction> RefTransactions
		{
			get
			{
				return this.GetTable<RefTransaction>();
			}
		}
		
		public System.Data.Linq.Table<RefCostsAndDiscount> RefCostsAndDiscounts
		{
			get
			{
				return this.GetTable<RefCostsAndDiscount>();
			}
		}
		
		public System.Data.Linq.Table<CostsAndDiscountsType> CostsAndDiscountsTypes
		{
			get
			{
				return this.GetTable<CostsAndDiscountsType>();
			}
		}
		
		public System.Data.Linq.Table<RefDocument> RefDocuments
		{
			get
			{
				return this.GetTable<RefDocument>();
			}
		}
	}
	
	[Table(Name="Referrals.List")]
	public partial class RefList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PatientIX;
		
		private System.Nullable<int> _BedRiddenIX;
		
		private bool _IsEditing;
		
		private System.DateTime _RegisterDate;
		
		private System.Nullable<System.DateTime> _PrescriptionDate;
		
		private System.Nullable<byte> _Weight;
		
		private short _AdmitterIX;
		
		private System.Nullable<short> _ReferPhysicianIX;
		
		private System.Nullable<short> _ReferStatusIX;
		
		private System.Nullable<short> _Ins1IX;
		
		private System.Nullable<System.DateTime> _Ins1Validation;
		
		private string _Ins1Num1;
		
		private string _Ins1Num2;
		
		private string _Ins1PageNum;
		
		private System.Nullable<int> _Ins1PartLimit;
		
		private System.Nullable<short> _Ins2IX;
		
		private System.Nullable<System.DateTime> _Ins2Validation;
		
		private string _Ins2Num;
		
		private System.Nullable<int> _Ins2PartLimit;
		
		private System.Nullable<int> _PrePayable;
		
		private string _Description;
		
		private EntitySet<RefService> _RefServices;
		
		private EntitySet<RefTransaction> _RefTransactions;
		
		private EntitySet<RefCostsAndDiscount> _RefCostsAndDiscounts;
		
		private EntitySet<RefDocument> _RefDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatientIXChanging(int value);
    partial void OnPatientIXChanged();
    partial void OnBedRiddenIXChanging(System.Nullable<int> value);
    partial void OnBedRiddenIXChanged();
    partial void OnIsEditingChanging(bool value);
    partial void OnIsEditingChanged();
    partial void OnRegisterDateChanging(System.DateTime value);
    partial void OnRegisterDateChanged();
    partial void OnPrescriptionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPrescriptionDateChanged();
    partial void OnWeightChanging(System.Nullable<byte> value);
    partial void OnWeightChanged();
    partial void OnAdmitterIXChanging(short value);
    partial void OnAdmitterIXChanged();
    partial void OnReferPhysicianIXChanging(System.Nullable<short> value);
    partial void OnReferPhysicianIXChanged();
    partial void OnReferStatusIXChanging(System.Nullable<short> value);
    partial void OnReferStatusIXChanged();
    partial void OnIns1IXChanging(System.Nullable<short> value);
    partial void OnIns1IXChanged();
    partial void OnIns1ValidationChanging(System.Nullable<System.DateTime> value);
    partial void OnIns1ValidationChanged();
    partial void OnIns1Num1Changing(string value);
    partial void OnIns1Num1Changed();
    partial void OnIns1Num2Changing(string value);
    partial void OnIns1Num2Changed();
    partial void OnIns1PageNumChanging(string value);
    partial void OnIns1PageNumChanged();
    partial void OnIns1PartLimitChanging(System.Nullable<int> value);
    partial void OnIns1PartLimitChanged();
    partial void OnIns2IXChanging(System.Nullable<short> value);
    partial void OnIns2IXChanged();
    partial void OnIns2ValidationChanging(System.Nullable<System.DateTime> value);
    partial void OnIns2ValidationChanged();
    partial void OnIns2NumChanging(string value);
    partial void OnIns2NumChanged();
    partial void OnIns2PartLimitChanging(System.Nullable<int> value);
    partial void OnIns2PartLimitChanged();
    partial void OnPrePayableChanging(System.Nullable<int> value);
    partial void OnPrePayableChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RefList()
		{
			this._RefServices = new EntitySet<RefService>(new Action<RefService>(this.attach_RefServices), new Action<RefService>(this.detach_RefServices));
			this._RefTransactions = new EntitySet<RefTransaction>(new Action<RefTransaction>(this.attach_RefTransactions), new Action<RefTransaction>(this.detach_RefTransactions));
			this._RefCostsAndDiscounts = new EntitySet<RefCostsAndDiscount>(new Action<RefCostsAndDiscount>(this.attach_RefCostsAndDiscounts), new Action<RefCostsAndDiscount>(this.detach_RefCostsAndDiscounts));
			this._RefDocuments = new EntitySet<RefDocument>(new Action<RefDocument>(this.attach_RefDocuments), new Action<RefDocument>(this.detach_RefDocuments));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PatientIX", DbType="Int NOT NULL")]
		public int PatientIX
		{
			get
			{
				return this._PatientIX;
			}
			set
			{
				if ((this._PatientIX != value))
				{
					this.OnPatientIXChanging(value);
					this.SendPropertyChanging();
					this._PatientIX = value;
					this.SendPropertyChanged("PatientIX");
					this.OnPatientIXChanged();
				}
			}
		}
		
		[Column(Storage="_BedRiddenIX", DbType="Int")]
		public System.Nullable<int> BedRiddenIX
		{
			get
			{
				return this._BedRiddenIX;
			}
			set
			{
				if ((this._BedRiddenIX != value))
				{
					this.OnBedRiddenIXChanging(value);
					this.SendPropertyChanging();
					this._BedRiddenIX = value;
					this.SendPropertyChanged("BedRiddenIX");
					this.OnBedRiddenIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsEditing", DbType="Bit NOT NULL")]
		public bool IsEditing
		{
			get
			{
				return this._IsEditing;
			}
			set
			{
				if ((this._IsEditing != value))
				{
					this.OnIsEditingChanging(value);
					this.SendPropertyChanging();
					this._IsEditing = value;
					this.SendPropertyChanged("IsEditing");
					this.OnIsEditingChanged();
				}
			}
		}
		
		[Column(Storage="_RegisterDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegisterDate
		{
			get
			{
				return this._RegisterDate;
			}
			set
			{
				if ((this._RegisterDate != value))
				{
					this.OnRegisterDateChanging(value);
					this.SendPropertyChanging();
					this._RegisterDate = value;
					this.SendPropertyChanged("RegisterDate");
					this.OnRegisterDateChanged();
				}
			}
		}
		
		[Column(Storage="_PrescriptionDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> PrescriptionDate
		{
			get
			{
				return this._PrescriptionDate;
			}
			set
			{
				if ((this._PrescriptionDate != value))
				{
					this.OnPrescriptionDateChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionDate = value;
					this.SendPropertyChanged("PrescriptionDate");
					this.OnPrescriptionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="TinyInt")]
		public System.Nullable<byte> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_AdmitterIX", DbType="SmallInt NOT NULL")]
		public short AdmitterIX
		{
			get
			{
				return this._AdmitterIX;
			}
			set
			{
				if ((this._AdmitterIX != value))
				{
					this.OnAdmitterIXChanging(value);
					this.SendPropertyChanging();
					this._AdmitterIX = value;
					this.SendPropertyChanged("AdmitterIX");
					this.OnAdmitterIXChanged();
				}
			}
		}
		
		[Column(Storage="_ReferPhysicianIX", DbType="SmallInt")]
		public System.Nullable<short> ReferPhysicianIX
		{
			get
			{
				return this._ReferPhysicianIX;
			}
			set
			{
				if ((this._ReferPhysicianIX != value))
				{
					this.OnReferPhysicianIXChanging(value);
					this.SendPropertyChanging();
					this._ReferPhysicianIX = value;
					this.SendPropertyChanged("ReferPhysicianIX");
					this.OnReferPhysicianIXChanged();
				}
			}
		}
		
		[Column(Storage="_ReferStatusIX", DbType="SmallInt")]
		public System.Nullable<short> ReferStatusIX
		{
			get
			{
				return this._ReferStatusIX;
			}
			set
			{
				if ((this._ReferStatusIX != value))
				{
					this.OnReferStatusIXChanging(value);
					this.SendPropertyChanging();
					this._ReferStatusIX = value;
					this.SendPropertyChanged("ReferStatusIX");
					this.OnReferStatusIXChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1IX", DbType="SmallInt")]
		public System.Nullable<short> Ins1IX
		{
			get
			{
				return this._Ins1IX;
			}
			set
			{
				if ((this._Ins1IX != value))
				{
					this.OnIns1IXChanging(value);
					this.SendPropertyChanging();
					this._Ins1IX = value;
					this.SendPropertyChanged("Ins1IX");
					this.OnIns1IXChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1Validation", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Ins1Validation
		{
			get
			{
				return this._Ins1Validation;
			}
			set
			{
				if ((this._Ins1Validation != value))
				{
					this.OnIns1ValidationChanging(value);
					this.SendPropertyChanging();
					this._Ins1Validation = value;
					this.SendPropertyChanged("Ins1Validation");
					this.OnIns1ValidationChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1Num1", DbType="NVarChar(20)")]
		public string Ins1Num1
		{
			get
			{
				return this._Ins1Num1;
			}
			set
			{
				if ((this._Ins1Num1 != value))
				{
					this.OnIns1Num1Changing(value);
					this.SendPropertyChanging();
					this._Ins1Num1 = value;
					this.SendPropertyChanged("Ins1Num1");
					this.OnIns1Num1Changed();
				}
			}
		}
		
		[Column(Storage="_Ins1Num2", DbType="NVarChar(20)")]
		public string Ins1Num2
		{
			get
			{
				return this._Ins1Num2;
			}
			set
			{
				if ((this._Ins1Num2 != value))
				{
					this.OnIns1Num2Changing(value);
					this.SendPropertyChanging();
					this._Ins1Num2 = value;
					this.SendPropertyChanged("Ins1Num2");
					this.OnIns1Num2Changed();
				}
			}
		}
		
		[Column(Storage="_Ins1PageNum", DbType="NVarChar(10)")]
		public string Ins1PageNum
		{
			get
			{
				return this._Ins1PageNum;
			}
			set
			{
				if ((this._Ins1PageNum != value))
				{
					this.OnIns1PageNumChanging(value);
					this.SendPropertyChanging();
					this._Ins1PageNum = value;
					this.SendPropertyChanged("Ins1PageNum");
					this.OnIns1PageNumChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1PartLimit", DbType="Int")]
		public System.Nullable<int> Ins1PartLimit
		{
			get
			{
				return this._Ins1PartLimit;
			}
			set
			{
				if ((this._Ins1PartLimit != value))
				{
					this.OnIns1PartLimitChanging(value);
					this.SendPropertyChanging();
					this._Ins1PartLimit = value;
					this.SendPropertyChanged("Ins1PartLimit");
					this.OnIns1PartLimitChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2IX", DbType="SmallInt")]
		public System.Nullable<short> Ins2IX
		{
			get
			{
				return this._Ins2IX;
			}
			set
			{
				if ((this._Ins2IX != value))
				{
					this.OnIns2IXChanging(value);
					this.SendPropertyChanging();
					this._Ins2IX = value;
					this.SendPropertyChanged("Ins2IX");
					this.OnIns2IXChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2Validation", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Ins2Validation
		{
			get
			{
				return this._Ins2Validation;
			}
			set
			{
				if ((this._Ins2Validation != value))
				{
					this.OnIns2ValidationChanging(value);
					this.SendPropertyChanging();
					this._Ins2Validation = value;
					this.SendPropertyChanged("Ins2Validation");
					this.OnIns2ValidationChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2Num", DbType="NVarChar(20)")]
		public string Ins2Num
		{
			get
			{
				return this._Ins2Num;
			}
			set
			{
				if ((this._Ins2Num != value))
				{
					this.OnIns2NumChanging(value);
					this.SendPropertyChanging();
					this._Ins2Num = value;
					this.SendPropertyChanged("Ins2Num");
					this.OnIns2NumChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2PartLimit", DbType="Int")]
		public System.Nullable<int> Ins2PartLimit
		{
			get
			{
				return this._Ins2PartLimit;
			}
			set
			{
				if ((this._Ins2PartLimit != value))
				{
					this.OnIns2PartLimitChanging(value);
					this.SendPropertyChanging();
					this._Ins2PartLimit = value;
					this.SendPropertyChanged("Ins2PartLimit");
					this.OnIns2PartLimitChanged();
				}
			}
		}
		
		[Column(Storage="_PrePayable", DbType="Int")]
		public System.Nullable<int> PrePayable
		{
			get
			{
				return this._PrePayable;
			}
			set
			{
				if ((this._PrePayable != value))
				{
					this.OnPrePayableChanging(value);
					this.SendPropertyChanging();
					this._PrePayable = value;
					this.SendPropertyChanged("PrePayable");
					this.OnPrePayableChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="RefList_RefService", Storage="_RefServices", ThisKey="ID", OtherKey="ReferralIX")]
		public EntitySet<RefService> RefServices
		{
			get
			{
				return this._RefServices;
			}
			set
			{
				this._RefServices.Assign(value);
			}
		}
		
		[Association(Name="RefList_RefTransaction", Storage="_RefTransactions", ThisKey="ID", OtherKey="ReferralIX")]
		public EntitySet<RefTransaction> RefTransactions
		{
			get
			{
				return this._RefTransactions;
			}
			set
			{
				this._RefTransactions.Assign(value);
			}
		}
		
		[Association(Name="RefList_RefCostsAndDiscount", Storage="_RefCostsAndDiscounts", ThisKey="ID", OtherKey="ReferralIX")]
		public EntitySet<RefCostsAndDiscount> RefCostsAndDiscounts
		{
			get
			{
				return this._RefCostsAndDiscounts;
			}
			set
			{
				this._RefCostsAndDiscounts.Assign(value);
			}
		}
		
		[Association(Name="RefList_RefDocument", Storage="_RefDocuments", ThisKey="ID", OtherKey="RefIX")]
		public EntitySet<RefDocument> RefDocuments
		{
			get
			{
				return this._RefDocuments;
			}
			set
			{
				this._RefDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefServices(RefService entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_RefServices(RefService entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_RefTransactions(RefTransaction entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_RefTransactions(RefTransaction entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_RefCostsAndDiscounts(RefCostsAndDiscount entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_RefCostsAndDiscounts(RefCostsAndDiscount entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
		
		private void attach_RefDocuments(RefDocument entity)
		{
			this.SendPropertyChanging();
			entity.RefList = this;
		}
		
		private void detach_RefDocuments(RefDocument entity)
		{
			this.SendPropertyChanging();
			entity.RefList = null;
		}
	}
	
	[Table(Name="Referrals.RefServices")]
	public partial class RefService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReferralIX;
		
		private short _ServiceIX;
		
		private bool _IsActive;
		
		private byte _Quantity;
		
		private System.Nullable<short> _ExpertIX;
		
		private System.Nullable<short> _PhysicianIX;
		
		private System.Nullable<bool> _IsIns1Cover;
		
		private System.Nullable<bool> _IsIns2Cover;
		
		private System.Nullable<int> _Ins1Price;
		
		private System.Nullable<int> _Ins1PartPrice;
		
		private System.Nullable<int> _Ins2Price;
		
		private System.Nullable<int> _Ins2PartPrice;
		
		private int _PatientPayablePrice;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReferralIXChanging(int value);
    partial void OnReferralIXChanged();
    partial void OnServiceIXChanging(short value);
    partial void OnServiceIXChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnQuantityChanging(byte value);
    partial void OnQuantityChanged();
    partial void OnExpertIXChanging(System.Nullable<short> value);
    partial void OnExpertIXChanged();
    partial void OnPhysicianIXChanging(System.Nullable<short> value);
    partial void OnPhysicianIXChanged();
    partial void OnIsIns1CoverChanging(System.Nullable<bool> value);
    partial void OnIsIns1CoverChanged();
    partial void OnIsIns2CoverChanging(System.Nullable<bool> value);
    partial void OnIsIns2CoverChanged();
    partial void OnIns1PriceChanging(System.Nullable<int> value);
    partial void OnIns1PriceChanged();
    partial void OnIns1PartPriceChanging(System.Nullable<int> value);
    partial void OnIns1PartPriceChanged();
    partial void OnIns2PriceChanging(System.Nullable<int> value);
    partial void OnIns2PriceChanged();
    partial void OnIns2PartPriceChanging(System.Nullable<int> value);
    partial void OnIns2PartPriceChanged();
    partial void OnPatientPayablePriceChanging(int value);
    partial void OnPatientPayablePriceChanged();
    #endregion
		
		public RefService()
		{
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralIX", DbType="Int NOT NULL")]
		public int ReferralIX
		{
			get
			{
				return this._ReferralIX;
			}
			set
			{
				if ((this._ReferralIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferralIXChanging(value);
					this.SendPropertyChanging();
					this._ReferralIX = value;
					this.SendPropertyChanged("ReferralIX");
					this.OnReferralIXChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceIX", DbType="SmallInt NOT NULL")]
		public short ServiceIX
		{
			get
			{
				return this._ServiceIX;
			}
			set
			{
				if ((this._ServiceIX != value))
				{
					this.OnServiceIXChanging(value);
					this.SendPropertyChanging();
					this._ServiceIX = value;
					this.SendPropertyChanged("ServiceIX");
					this.OnServiceIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="TinyInt NOT NULL")]
		public byte Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertIX", DbType="SmallInt")]
		public System.Nullable<short> ExpertIX
		{
			get
			{
				return this._ExpertIX;
			}
			set
			{
				if ((this._ExpertIX != value))
				{
					this.OnExpertIXChanging(value);
					this.SendPropertyChanging();
					this._ExpertIX = value;
					this.SendPropertyChanged("ExpertIX");
					this.OnExpertIXChanged();
				}
			}
		}
		
		[Column(Storage="_PhysicianIX", DbType="SmallInt")]
		public System.Nullable<short> PhysicianIX
		{
			get
			{
				return this._PhysicianIX;
			}
			set
			{
				if ((this._PhysicianIX != value))
				{
					this.OnPhysicianIXChanging(value);
					this.SendPropertyChanging();
					this._PhysicianIX = value;
					this.SendPropertyChanged("PhysicianIX");
					this.OnPhysicianIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsIns1Cover", DbType="Bit")]
		public System.Nullable<bool> IsIns1Cover
		{
			get
			{
				return this._IsIns1Cover;
			}
			set
			{
				if ((this._IsIns1Cover != value))
				{
					this.OnIsIns1CoverChanging(value);
					this.SendPropertyChanging();
					this._IsIns1Cover = value;
					this.SendPropertyChanged("IsIns1Cover");
					this.OnIsIns1CoverChanged();
				}
			}
		}
		
		[Column(Storage="_IsIns2Cover", DbType="Bit")]
		public System.Nullable<bool> IsIns2Cover
		{
			get
			{
				return this._IsIns2Cover;
			}
			set
			{
				if ((this._IsIns2Cover != value))
				{
					this.OnIsIns2CoverChanging(value);
					this.SendPropertyChanging();
					this._IsIns2Cover = value;
					this.SendPropertyChanged("IsIns2Cover");
					this.OnIsIns2CoverChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1Price", DbType="Int")]
		public System.Nullable<int> Ins1Price
		{
			get
			{
				return this._Ins1Price;
			}
			set
			{
				if ((this._Ins1Price != value))
				{
					this.OnIns1PriceChanging(value);
					this.SendPropertyChanging();
					this._Ins1Price = value;
					this.SendPropertyChanged("Ins1Price");
					this.OnIns1PriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ins1PartPrice", DbType="Int")]
		public System.Nullable<int> Ins1PartPrice
		{
			get
			{
				return this._Ins1PartPrice;
			}
			set
			{
				if ((this._Ins1PartPrice != value))
				{
					this.OnIns1PartPriceChanging(value);
					this.SendPropertyChanging();
					this._Ins1PartPrice = value;
					this.SendPropertyChanged("Ins1PartPrice");
					this.OnIns1PartPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2Price", DbType="Int")]
		public System.Nullable<int> Ins2Price
		{
			get
			{
				return this._Ins2Price;
			}
			set
			{
				if ((this._Ins2Price != value))
				{
					this.OnIns2PriceChanging(value);
					this.SendPropertyChanging();
					this._Ins2Price = value;
					this.SendPropertyChanged("Ins2Price");
					this.OnIns2PriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ins2PartPrice", DbType="Int")]
		public System.Nullable<int> Ins2PartPrice
		{
			get
			{
				return this._Ins2PartPrice;
			}
			set
			{
				if ((this._Ins2PartPrice != value))
				{
					this.OnIns2PartPriceChanging(value);
					this.SendPropertyChanging();
					this._Ins2PartPrice = value;
					this.SendPropertyChanged("Ins2PartPrice");
					this.OnIns2PartPriceChanged();
				}
			}
		}
		
		[Column(Storage="_PatientPayablePrice", DbType="Int NOT NULL")]
		public int PatientPayablePrice
		{
			get
			{
				return this._PatientPayablePrice;
			}
			set
			{
				if ((this._PatientPayablePrice != value))
				{
					this.OnPatientPayablePriceChanging(value);
					this.SendPropertyChanging();
					this._PatientPayablePrice = value;
					this.SendPropertyChanged("PatientPayablePrice");
					this.OnPatientPayablePriceChanged();
				}
			}
		}
		
		[Association(Name="RefList_RefService", Storage="_RefList", ThisKey="ReferralIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.RefServices.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.RefServices.Add(this);
						this._ReferralIX = value.ID;
					}
					else
					{
						this._ReferralIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Services.List")]
	public partial class ServiceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private string _Code;
		
		private string _Name;
		
		private System.Nullable<short> _CategoryIX;
		
		private int _PriceFree;
		
		private int _PriceGov;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryIXChanging(System.Nullable<short> value);
    partial void OnCategoryIXChanged();
    partial void OnPriceFreeChanging(int value);
    partial void OnPriceFreeChanged();
    partial void OnPriceGovChanging(int value);
    partial void OnPriceGovChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ServiceList()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryIX", DbType="SmallInt")]
		public System.Nullable<short> CategoryIX
		{
			get
			{
				return this._CategoryIX;
			}
			set
			{
				if ((this._CategoryIX != value))
				{
					this.OnCategoryIXChanging(value);
					this.SendPropertyChanging();
					this._CategoryIX = value;
					this.SendPropertyChanged("CategoryIX");
					this.OnCategoryIXChanged();
				}
			}
		}
		
		[Column(Storage="_PriceFree", DbType="Int NOT NULL")]
		public int PriceFree
		{
			get
			{
				return this._PriceFree;
			}
			set
			{
				if ((this._PriceFree != value))
				{
					this.OnPriceFreeChanging(value);
					this.SendPropertyChanging();
					this._PriceFree = value;
					this.SendPropertyChanged("PriceFree");
					this.OnPriceFreeChanged();
				}
			}
		}
		
		[Column(Storage="_PriceGov", DbType="Int NOT NULL")]
		public int PriceGov
		{
			get
			{
				return this._PriceGov;
			}
			set
			{
				if ((this._PriceGov != value))
				{
					this.OnPriceGovChanging(value);
					this.SendPropertyChanging();
					this._PriceGov = value;
					this.SendPropertyChanged("PriceGov");
					this.OnPriceGovChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.RefTransaction")]
	public partial class RefTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReferralIX;
		
		private bool _IsActive;
		
		private System.DateTime _OccuredDate;
		
		private short _CashierIX;
		
		private System.Nullable<short> _CashIX;
		
		private int _Value;
		
		private string _Description;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReferralIXChanging(int value);
    partial void OnReferralIXChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnOccuredDateChanging(System.DateTime value);
    partial void OnOccuredDateChanged();
    partial void OnCashierIXChanging(short value);
    partial void OnCashierIXChanged();
    partial void OnCashIXChanging(System.Nullable<short> value);
    partial void OnCashIXChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RefTransaction()
		{
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralIX", DbType="Int NOT NULL")]
		public int ReferralIX
		{
			get
			{
				return this._ReferralIX;
			}
			set
			{
				if ((this._ReferralIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferralIXChanging(value);
					this.SendPropertyChanging();
					this._ReferralIX = value;
					this.SendPropertyChanged("ReferralIX");
					this.OnReferralIXChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_OccuredDate", DbType="DateTime NOT NULL")]
		public System.DateTime OccuredDate
		{
			get
			{
				return this._OccuredDate;
			}
			set
			{
				if ((this._OccuredDate != value))
				{
					this.OnOccuredDateChanging(value);
					this.SendPropertyChanging();
					this._OccuredDate = value;
					this.SendPropertyChanged("OccuredDate");
					this.OnOccuredDateChanged();
				}
			}
		}
		
		[Column(Storage="_CashierIX", DbType="SmallInt NOT NULL")]
		public short CashierIX
		{
			get
			{
				return this._CashierIX;
			}
			set
			{
				if ((this._CashierIX != value))
				{
					this.OnCashierIXChanging(value);
					this.SendPropertyChanging();
					this._CashierIX = value;
					this.SendPropertyChanged("CashierIX");
					this.OnCashierIXChanged();
				}
			}
		}
		
		[Column(Storage="_CashIX", DbType="SmallInt")]
		public System.Nullable<short> CashIX
		{
			get
			{
				return this._CashIX;
			}
			set
			{
				if ((this._CashIX != value))
				{
					this.OnCashIXChanging(value);
					this.SendPropertyChanging();
					this._CashIX = value;
					this.SendPropertyChanged("CashIX");
					this.OnCashIXChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="RefList_RefTransaction", Storage="_RefList", ThisKey="ReferralIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.RefTransactions.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.RefTransactions.Add(this);
						this._ReferralIX = value.ID;
					}
					else
					{
						this._ReferralIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.RefCostsAndDiscounts")]
	public partial class RefCostsAndDiscount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Date;
		
		private int _ReferralIX;
		
		private short _CostIXOrDiscountIX;
		
		private short _CashierIX;
		
		private int _Value;
		
		private string _Description;
		
		private EntityRef<RefList> _RefList;
		
		private EntityRef<CostsAndDiscountsType> _CostsAndDiscountsType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnReferralIXChanging(int value);
    partial void OnReferralIXChanged();
    partial void OnCostIXOrDiscountIXChanging(short value);
    partial void OnCostIXOrDiscountIXChanged();
    partial void OnCashierIXChanging(short value);
    partial void OnCashierIXChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RefCostsAndDiscount()
		{
			this._RefList = default(EntityRef<RefList>);
			this._CostsAndDiscountsType = default(EntityRef<CostsAndDiscountsType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReferralIX", DbType="Int NOT NULL")]
		public int ReferralIX
		{
			get
			{
				return this._ReferralIX;
			}
			set
			{
				if ((this._ReferralIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferralIXChanging(value);
					this.SendPropertyChanging();
					this._ReferralIX = value;
					this.SendPropertyChanged("ReferralIX");
					this.OnReferralIXChanged();
				}
			}
		}
		
		[Column(Storage="_CostIXOrDiscountIX", DbType="SmallInt NOT NULL")]
		public short CostIXOrDiscountIX
		{
			get
			{
				return this._CostIXOrDiscountIX;
			}
			set
			{
				if ((this._CostIXOrDiscountIX != value))
				{
					if (this._CostsAndDiscountsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostIXOrDiscountIXChanging(value);
					this.SendPropertyChanging();
					this._CostIXOrDiscountIX = value;
					this.SendPropertyChanged("CostIXOrDiscountIX");
					this.OnCostIXOrDiscountIXChanged();
				}
			}
		}
		
		[Column(Storage="_CashierIX", DbType="SmallInt NOT NULL")]
		public short CashierIX
		{
			get
			{
				return this._CashierIX;
			}
			set
			{
				if ((this._CashierIX != value))
				{
					this.OnCashierIXChanging(value);
					this.SendPropertyChanging();
					this._CashierIX = value;
					this.SendPropertyChanged("CashierIX");
					this.OnCashierIXChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="RefList_RefCostsAndDiscount", Storage="_RefList", ThisKey="ReferralIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.RefCostsAndDiscounts.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.RefCostsAndDiscounts.Add(this);
						this._ReferralIX = value.ID;
					}
					else
					{
						this._ReferralIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		[Association(Name="CostsAndDiscountsType_RefCostsAndDiscount", Storage="_CostsAndDiscountsType", ThisKey="CostIXOrDiscountIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CostsAndDiscountsType CostsAndDiscountsType
		{
			get
			{
				return this._CostsAndDiscountsType.Entity;
			}
			set
			{
				CostsAndDiscountsType previousValue = this._CostsAndDiscountsType.Entity;
				if (((previousValue != value) 
							|| (this._CostsAndDiscountsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostsAndDiscountsType.Entity = null;
						previousValue.RefCostsAndDiscounts.Remove(this);
					}
					this._CostsAndDiscountsType.Entity = value;
					if ((value != null))
					{
						value.RefCostsAndDiscounts.Add(this);
						this._CostIXOrDiscountIX = value.ID;
					}
					else
					{
						this._CostIXOrDiscountIX = default(short);
					}
					this.SendPropertyChanged("CostsAndDiscountsType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Accounting.CostsAndDiscountsTypes")]
	public partial class CostsAndDiscountsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private bool _IsActive;
		
		private bool _IsCost;
		
		private string _Name;
		
		private int _Limitation;
		
		private string _Description;
		
		private EntitySet<RefCostsAndDiscount> _RefCostsAndDiscounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsCostChanging(bool value);
    partial void OnIsCostChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLimitationChanging(int value);
    partial void OnLimitationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CostsAndDiscountsType()
		{
			this._RefCostsAndDiscounts = new EntitySet<RefCostsAndDiscount>(new Action<RefCostsAndDiscount>(this.attach_RefCostsAndDiscounts), new Action<RefCostsAndDiscount>(this.detach_RefCostsAndDiscounts));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsCost", DbType="Bit NOT NULL")]
		public bool IsCost
		{
			get
			{
				return this._IsCost;
			}
			set
			{
				if ((this._IsCost != value))
				{
					this.OnIsCostChanging(value);
					this.SendPropertyChanging();
					this._IsCost = value;
					this.SendPropertyChanged("IsCost");
					this.OnIsCostChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Limitation", DbType="Int NOT NULL")]
		public int Limitation
		{
			get
			{
				return this._Limitation;
			}
			set
			{
				if ((this._Limitation != value))
				{
					this.OnLimitationChanging(value);
					this.SendPropertyChanging();
					this._Limitation = value;
					this.SendPropertyChanged("Limitation");
					this.OnLimitationChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="CostsAndDiscountsType_RefCostsAndDiscount", Storage="_RefCostsAndDiscounts", ThisKey="ID", OtherKey="CostIXOrDiscountIX")]
		public EntitySet<RefCostsAndDiscount> RefCostsAndDiscounts
		{
			get
			{
				return this._RefCostsAndDiscounts;
			}
			set
			{
				this._RefCostsAndDiscounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefCostsAndDiscounts(RefCostsAndDiscount entity)
		{
			this.SendPropertyChanging();
			entity.CostsAndDiscountsType = this;
		}
		
		private void detach_RefCostsAndDiscounts(RefCostsAndDiscount entity)
		{
			this.SendPropertyChanging();
			entity.CostsAndDiscountsType = null;
		}
	}
	
	[Table(Name="Referrals.RefDocuments")]
	public partial class RefDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RefIX;
		
		private System.Nullable<short> _TypeIX;
		
		private string _Title;
		
		private System.DateTime _Date;
		
		private System.Nullable<short> _ReportPhysicianIX;
		
		private short _TypistIX;
		
		private System.Nullable<System.DateTime> _LastModifyDate;
		
		private System.Nullable<short> _LastModifierIX;
		
		private System.Data.Linq.Binary _DocData;
		
		private EntityRef<RefList> _RefList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRefIXChanging(int value);
    partial void OnRefIXChanged();
    partial void OnTypeIXChanging(System.Nullable<short> value);
    partial void OnTypeIXChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnReportPhysicianIXChanging(System.Nullable<short> value);
    partial void OnReportPhysicianIXChanged();
    partial void OnTypistIXChanging(short value);
    partial void OnTypistIXChanged();
    partial void OnLastModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifyDateChanged();
    partial void OnLastModifierIXChanging(System.Nullable<short> value);
    partial void OnLastModifierIXChanged();
    partial void OnDocDataChanging(System.Data.Linq.Binary value);
    partial void OnDocDataChanged();
    #endregion
		
		public RefDocument()
		{
			this._RefList = default(EntityRef<RefList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_RefIX", DbType="Int NOT NULL")]
		public int RefIX
		{
			get
			{
				return this._RefIX;
			}
			set
			{
				if ((this._RefIX != value))
				{
					if (this._RefList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefIXChanging(value);
					this.SendPropertyChanging();
					this._RefIX = value;
					this.SendPropertyChanged("RefIX");
					this.OnRefIXChanged();
				}
			}
		}
		
		[Column(Storage="_TypeIX", DbType="SmallInt")]
		public System.Nullable<short> TypeIX
		{
			get
			{
				return this._TypeIX;
			}
			set
			{
				if ((this._TypeIX != value))
				{
					this.OnTypeIXChanging(value);
					this.SendPropertyChanging();
					this._TypeIX = value;
					this.SendPropertyChanged("TypeIX");
					this.OnTypeIXChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReportPhysicianIX", DbType="SmallInt")]
		public System.Nullable<short> ReportPhysicianIX
		{
			get
			{
				return this._ReportPhysicianIX;
			}
			set
			{
				if ((this._ReportPhysicianIX != value))
				{
					this.OnReportPhysicianIXChanging(value);
					this.SendPropertyChanging();
					this._ReportPhysicianIX = value;
					this.SendPropertyChanged("ReportPhysicianIX");
					this.OnReportPhysicianIXChanged();
				}
			}
		}
		
		[Column(Storage="_TypistIX", DbType="SmallInt NOT NULL")]
		public short TypistIX
		{
			get
			{
				return this._TypistIX;
			}
			set
			{
				if ((this._TypistIX != value))
				{
					this.OnTypistIXChanging(value);
					this.SendPropertyChanging();
					this._TypistIX = value;
					this.SendPropertyChanged("TypistIX");
					this.OnTypistIXChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifyDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastModifyDate
		{
			get
			{
				return this._LastModifyDate;
			}
			set
			{
				if ((this._LastModifyDate != value))
				{
					this.OnLastModifyDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifyDate = value;
					this.SendPropertyChanged("LastModifyDate");
					this.OnLastModifyDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifierIX", DbType="SmallInt")]
		public System.Nullable<short> LastModifierIX
		{
			get
			{
				return this._LastModifierIX;
			}
			set
			{
				if ((this._LastModifierIX != value))
				{
					this.OnLastModifierIXChanging(value);
					this.SendPropertyChanging();
					this._LastModifierIX = value;
					this.SendPropertyChanged("LastModifierIX");
					this.OnLastModifierIXChanged();
				}
			}
		}
		
		[Column(Storage="_DocData", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DocData
		{
			get
			{
				return this._DocData;
			}
			set
			{
				if ((this._DocData != value))
				{
					this.OnDocDataChanging(value);
					this.SendPropertyChanging();
					this._DocData = value;
					this.SendPropertyChanged("DocData");
					this.OnDocDataChanged();
				}
			}
		}
		
		[Association(Name="RefList_RefDocument", Storage="_RefList", ThisKey="RefIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RefList RefList
		{
			get
			{
				return this._RefList.Entity;
			}
			set
			{
				RefList previousValue = this._RefList.Entity;
				if (((previousValue != value) 
							|| (this._RefList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefList.Entity = null;
						previousValue.RefDocuments.Remove(this);
					}
					this._RefList.Entity = value;
					if ((value != null))
					{
						value.RefDocuments.Add(this);
						this._RefIX = value.ID;
					}
					else
					{
						this._RefIX = default(int);
					}
					this.SendPropertyChanged("RefList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
