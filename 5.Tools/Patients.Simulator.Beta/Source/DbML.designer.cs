#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Negar
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PatientsSystem")]
	public partial class DbMLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPatList(PatList instance);
    partial void UpdatePatList(PatList instance);
    partial void DeletePatList(PatList instance);
    partial void InsertNamesBank(NamesBank instance);
    partial void UpdateNamesBank(NamesBank instance);
    partial void DeleteNamesBank(NamesBank instance);
    partial void InsertDetail(Detail instance);
    partial void UpdateDetail(Detail instance);
    partial void DeleteDetail(Detail instance);
    #endregion
		
		public DbMLDataContext() : 
				base(global::Negar.Properties.Settings.Default.PatientsSystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbMLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbMLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbMLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbMLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PatList> PatLists
		{
			get
			{
				return this.GetTable<PatList>();
			}
		}
		
		public System.Data.Linq.Table<NamesBank> NamesBanks
		{
			get
			{
				return this.GetTable<NamesBank>();
			}
		}
		
		public System.Data.Linq.Table<Detail> Details
		{
			get
			{
				return this.GetTable<Detail>();
			}
		}
	}
	
	[Table(Name="Patients.List")]
	public partial class PatList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PatientID;
		
		private bool _IsEditing;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _IsMale;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnIsEditingChanging(bool value);
    partial void OnIsEditingChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIsMaleChanging(System.Nullable<bool> value);
    partial void OnIsMaleChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    #endregion
		
		public PatList()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PatientID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsEditing", DbType="Bit NOT NULL")]
		public bool IsEditing
		{
			get
			{
				return this._IsEditing;
			}
			set
			{
				if ((this._IsEditing != value))
				{
					this.OnIsEditingChanging(value);
					this.SendPropertyChanging();
					this._IsEditing = value;
					this.SendPropertyChanged("IsEditing");
					this.OnIsEditingChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsMale", DbType="Bit")]
		public System.Nullable<bool> IsMale
		{
			get
			{
				return this._IsMale;
			}
			set
			{
				if ((this._IsMale != value))
				{
					this.OnIsMaleChanging(value);
					this.SendPropertyChanging();
					this._IsMale = value;
					this.SendPropertyChanged("IsMale");
					this.OnIsMaleChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Association(Name="PatList_Detail", Storage="_Detail", ThisKey="ID", OtherKey="PatientListIX", IsUnique=true, IsForeignKey=false)]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.PatList = null;
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.PatList = this;
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Patients.NamesBank")]
	public partial class NamesBank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LocaleName;
		
		private string _EnglishName;
		
		private bool _IsFirstName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocaleNameChanging(string value);
    partial void OnLocaleNameChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnIsFirstNameChanging(bool value);
    partial void OnIsFirstNameChanged();
    #endregion
		
		public NamesBank()
		{
			OnCreated();
		}
		
		[Column(Storage="_LocaleName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LocaleName
		{
			get
			{
				return this._LocaleName;
			}
			set
			{
				if ((this._LocaleName != value))
				{
					this.OnLocaleNameChanging(value);
					this.SendPropertyChanging();
					this._LocaleName = value;
					this.SendPropertyChanged("LocaleName");
					this.OnLocaleNameChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(30)")]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsFirstName", DbType="Bit NOT NULL", IsPrimaryKey=true)]
		public bool IsFirstName
		{
			get
			{
				return this._IsFirstName;
			}
			set
			{
				if ((this._IsFirstName != value))
				{
					this.OnIsFirstNameChanging(value);
					this.SendPropertyChanging();
					this._IsFirstName = value;
					this.SendPropertyChanged("IsFirstName");
					this.OnIsFirstNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Patients.Details")]
	public partial class Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientListIX;
		
		private string _EngFirstName;
		
		private string _EngLastName;
		
		private System.Nullable<bool> _IsMaried;
		
		private string _FatherName;
		
		private string _IDNo;
		
		private string _NationalID;
		
		private System.Nullable<short> _CityIX;
		
		private string _BirthLocation;
		
		private System.Nullable<short> _JobIX;
		
		private string _TelNo1;
		
		private string _TelNo2;
		
		private string _Address;
		
		private string _ZipCode;
		
		private string _Email;
		
		private EntityRef<PatList> _PatList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientListIXChanging(int value);
    partial void OnPatientListIXChanged();
    partial void OnEngFirstNameChanging(string value);
    partial void OnEngFirstNameChanged();
    partial void OnEngLastNameChanging(string value);
    partial void OnEngLastNameChanged();
    partial void OnIsMariedChanging(System.Nullable<bool> value);
    partial void OnIsMariedChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnIDNoChanging(string value);
    partial void OnIDNoChanged();
    partial void OnNationalIDChanging(string value);
    partial void OnNationalIDChanged();
    partial void OnCityIXChanging(System.Nullable<short> value);
    partial void OnCityIXChanged();
    partial void OnBirthLocationChanging(string value);
    partial void OnBirthLocationChanged();
    partial void OnJobIXChanging(System.Nullable<short> value);
    partial void OnJobIXChanged();
    partial void OnTelNo1Changing(string value);
    partial void OnTelNo1Changed();
    partial void OnTelNo2Changing(string value);
    partial void OnTelNo2Changed();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Detail()
		{
			this._PatList = default(EntityRef<PatList>);
			OnCreated();
		}
		
		[Column(Storage="_PatientListIX", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientListIX
		{
			get
			{
				return this._PatientListIX;
			}
			set
			{
				if ((this._PatientListIX != value))
				{
					if (this._PatList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientListIXChanging(value);
					this.SendPropertyChanging();
					this._PatientListIX = value;
					this.SendPropertyChanged("PatientListIX");
					this.OnPatientListIXChanged();
				}
			}
		}
		
		[Column(Storage="_EngFirstName", DbType="NVarChar(20)")]
		public string EngFirstName
		{
			get
			{
				return this._EngFirstName;
			}
			set
			{
				if ((this._EngFirstName != value))
				{
					this.OnEngFirstNameChanging(value);
					this.SendPropertyChanging();
					this._EngFirstName = value;
					this.SendPropertyChanged("EngFirstName");
					this.OnEngFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_EngLastName", DbType="NVarChar(30)")]
		public string EngLastName
		{
			get
			{
				return this._EngLastName;
			}
			set
			{
				if ((this._EngLastName != value))
				{
					this.OnEngLastNameChanging(value);
					this.SendPropertyChanging();
					this._EngLastName = value;
					this.SendPropertyChanged("EngLastName");
					this.OnEngLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsMaried", DbType="Bit")]
		public System.Nullable<bool> IsMaried
		{
			get
			{
				return this._IsMaried;
			}
			set
			{
				if ((this._IsMaried != value))
				{
					this.OnIsMariedChanging(value);
					this.SendPropertyChanging();
					this._IsMaried = value;
					this.SendPropertyChanged("IsMaried");
					this.OnIsMariedChanged();
				}
			}
		}
		
		[Column(Storage="_FatherName", DbType="NVarChar(15)")]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[Column(Storage="_IDNo", DbType="NVarChar(15)")]
		public string IDNo
		{
			get
			{
				return this._IDNo;
			}
			set
			{
				if ((this._IDNo != value))
				{
					this.OnIDNoChanging(value);
					this.SendPropertyChanging();
					this._IDNo = value;
					this.SendPropertyChanged("IDNo");
					this.OnIDNoChanged();
				}
			}
		}
		
		[Column(Storage="_NationalID", DbType="NVarChar(15)")]
		public string NationalID
		{
			get
			{
				return this._NationalID;
			}
			set
			{
				if ((this._NationalID != value))
				{
					this.OnNationalIDChanging(value);
					this.SendPropertyChanging();
					this._NationalID = value;
					this.SendPropertyChanged("NationalID");
					this.OnNationalIDChanged();
				}
			}
		}
		
		[Column(Storage="_CityIX", DbType="SmallInt")]
		public System.Nullable<short> CityIX
		{
			get
			{
				return this._CityIX;
			}
			set
			{
				if ((this._CityIX != value))
				{
					this.OnCityIXChanging(value);
					this.SendPropertyChanging();
					this._CityIX = value;
					this.SendPropertyChanged("CityIX");
					this.OnCityIXChanged();
				}
			}
		}
		
		[Column(Storage="_BirthLocation", DbType="NVarChar(20)")]
		public string BirthLocation
		{
			get
			{
				return this._BirthLocation;
			}
			set
			{
				if ((this._BirthLocation != value))
				{
					this.OnBirthLocationChanging(value);
					this.SendPropertyChanging();
					this._BirthLocation = value;
					this.SendPropertyChanged("BirthLocation");
					this.OnBirthLocationChanged();
				}
			}
		}
		
		[Column(Storage="_JobIX", DbType="SmallInt")]
		public System.Nullable<short> JobIX
		{
			get
			{
				return this._JobIX;
			}
			set
			{
				if ((this._JobIX != value))
				{
					this.OnJobIXChanging(value);
					this.SendPropertyChanging();
					this._JobIX = value;
					this.SendPropertyChanged("JobIX");
					this.OnJobIXChanged();
				}
			}
		}
		
		[Column(Storage="_TelNo1", DbType="NVarChar(15)")]
		public string TelNo1
		{
			get
			{
				return this._TelNo1;
			}
			set
			{
				if ((this._TelNo1 != value))
				{
					this.OnTelNo1Changing(value);
					this.SendPropertyChanging();
					this._TelNo1 = value;
					this.SendPropertyChanged("TelNo1");
					this.OnTelNo1Changed();
				}
			}
		}
		
		[Column(Storage="_TelNo2", DbType="NVarChar(15)")]
		public string TelNo2
		{
			get
			{
				return this._TelNo2;
			}
			set
			{
				if ((this._TelNo2 != value))
				{
					this.OnTelNo2Changing(value);
					this.SendPropertyChanging();
					this._TelNo2 = value;
					this.SendPropertyChanged("TelNo2");
					this.OnTelNo2Changed();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="NVarChar(20)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(25)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="PatList_Detail", Storage="_PatList", ThisKey="PatientListIX", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PatList PatList
		{
			get
			{
				return this._PatList.Entity;
			}
			set
			{
				PatList previousValue = this._PatList.Entity;
				if (((previousValue != value) 
							|| (this._PatList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatList.Entity = null;
						previousValue.Detail = null;
					}
					this._PatList.Entity = value;
					if ((value != null))
					{
						value.Detail = this;
						this._PatientListIX = value.ID;
					}
					else
					{
						this._PatientListIX = default(int);
					}
					this.SendPropertyChanged("PatList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
